
/Users/lucy/Mr_argon/ArgonAirQualitySystem/airQualityMonitoringSystem/target/5.1.0/argon/airQualityMonitoringSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005764  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000b9784  000b9784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000b978c  000b978c  0000978c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000074  2003e5c4  000b97b0  0000e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b8  2003e638  2003e638  0001e638  2**2
                  ALLOC
  7 .backup       00000004  2003f400  000b9824  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000b9828  000b9828  00019828  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000b982e  000b982e  0001982e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000b9852  000b9852  00019852  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   00132abc  00000000  00000000  00019856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00015452  00000000  00000000  0014c312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0003f6a1  00000000  00000000  00161764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f58  00000000  00000000  001a0e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000abd0  00000000  00000000  001a3d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003db89  00000000  00000000  001ae92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048758  00000000  00000000  001ec4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013adec  00000000  00000000  00234c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00008c54  00000000  00000000  0036f9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2f>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4900:	bf24      	itt	cs
   b4902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b490a:	d90d      	bls.n	b4928 <__aeabi_d2f+0x30>
   b490c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b491c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4920:	bf08      	it	eq
   b4922:	f020 0001 	biceq.w	r0, r0, #1
   b4926:	4770      	bx	lr
   b4928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b492c:	d121      	bne.n	b4972 <__aeabi_d2f+0x7a>
   b492e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4932:	bfbc      	itt	lt
   b4934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4938:	4770      	bxlt	lr
   b493a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b493e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4942:	f1c2 0218 	rsb	r2, r2, #24
   b4946:	f1c2 0c20 	rsb	ip, r2, #32
   b494a:	fa10 f30c 	lsls.w	r3, r0, ip
   b494e:	fa20 f002 	lsr.w	r0, r0, r2
   b4952:	bf18      	it	ne
   b4954:	f040 0001 	orrne.w	r0, r0, #1
   b4958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4960:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4964:	ea40 000c 	orr.w	r0, r0, ip
   b4968:	fa23 f302 	lsr.w	r3, r3, r2
   b496c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4970:	e7cc      	b.n	b490c <__aeabi_d2f+0x14>
   b4972:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4976:	d107      	bne.n	b4988 <__aeabi_d2f+0x90>
   b4978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b497c:	bf1e      	ittt	ne
   b497e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4986:	4770      	bxne	lr
   b4988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b498c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4994:	4770      	bx	lr
   b4996:	bf00      	nop

000b4998 <__aeabi_frsub>:
   b4998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b499c:	e002      	b.n	b49a4 <__addsf3>
   b499e:	bf00      	nop

000b49a0 <__aeabi_fsub>:
   b49a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b49a4 <__addsf3>:
   b49a4:	0042      	lsls	r2, r0, #1
   b49a6:	bf1f      	itttt	ne
   b49a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b49ac:	ea92 0f03 	teqne	r2, r3
   b49b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b49b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b49b8:	d06a      	beq.n	b4a90 <__addsf3+0xec>
   b49ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b49be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b49c2:	bfc1      	itttt	gt
   b49c4:	18d2      	addgt	r2, r2, r3
   b49c6:	4041      	eorgt	r1, r0
   b49c8:	4048      	eorgt	r0, r1
   b49ca:	4041      	eorgt	r1, r0
   b49cc:	bfb8      	it	lt
   b49ce:	425b      	neglt	r3, r3
   b49d0:	2b19      	cmp	r3, #25
   b49d2:	bf88      	it	hi
   b49d4:	4770      	bxhi	lr
   b49d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b49da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b49e2:	bf18      	it	ne
   b49e4:	4240      	negne	r0, r0
   b49e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b49ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b49ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b49f2:	bf18      	it	ne
   b49f4:	4249      	negne	r1, r1
   b49f6:	ea92 0f03 	teq	r2, r3
   b49fa:	d03f      	beq.n	b4a7c <__addsf3+0xd8>
   b49fc:	f1a2 0201 	sub.w	r2, r2, #1
   b4a00:	fa41 fc03 	asr.w	ip, r1, r3
   b4a04:	eb10 000c 	adds.w	r0, r0, ip
   b4a08:	f1c3 0320 	rsb	r3, r3, #32
   b4a0c:	fa01 f103 	lsl.w	r1, r1, r3
   b4a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4a14:	d502      	bpl.n	b4a1c <__addsf3+0x78>
   b4a16:	4249      	negs	r1, r1
   b4a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b4a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4a20:	d313      	bcc.n	b4a4a <__addsf3+0xa6>
   b4a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b4a26:	d306      	bcc.n	b4a36 <__addsf3+0x92>
   b4a28:	0840      	lsrs	r0, r0, #1
   b4a2a:	ea4f 0131 	mov.w	r1, r1, rrx
   b4a2e:	f102 0201 	add.w	r2, r2, #1
   b4a32:	2afe      	cmp	r2, #254	; 0xfe
   b4a34:	d251      	bcs.n	b4ada <__addsf3+0x136>
   b4a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b4a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b4a3e:	bf08      	it	eq
   b4a40:	f020 0001 	biceq.w	r0, r0, #1
   b4a44:	ea40 0003 	orr.w	r0, r0, r3
   b4a48:	4770      	bx	lr
   b4a4a:	0049      	lsls	r1, r1, #1
   b4a4c:	eb40 0000 	adc.w	r0, r0, r0
   b4a50:	3a01      	subs	r2, #1
   b4a52:	bf28      	it	cs
   b4a54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b4a58:	d2ed      	bcs.n	b4a36 <__addsf3+0x92>
   b4a5a:	fab0 fc80 	clz	ip, r0
   b4a5e:	f1ac 0c08 	sub.w	ip, ip, #8
   b4a62:	ebb2 020c 	subs.w	r2, r2, ip
   b4a66:	fa00 f00c 	lsl.w	r0, r0, ip
   b4a6a:	bfaa      	itet	ge
   b4a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b4a70:	4252      	neglt	r2, r2
   b4a72:	4318      	orrge	r0, r3
   b4a74:	bfbc      	itt	lt
   b4a76:	40d0      	lsrlt	r0, r2
   b4a78:	4318      	orrlt	r0, r3
   b4a7a:	4770      	bx	lr
   b4a7c:	f092 0f00 	teq	r2, #0
   b4a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b4a84:	bf06      	itte	eq
   b4a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b4a8a:	3201      	addeq	r2, #1
   b4a8c:	3b01      	subne	r3, #1
   b4a8e:	e7b5      	b.n	b49fc <__addsf3+0x58>
   b4a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b4a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b4a98:	bf18      	it	ne
   b4a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4a9e:	d021      	beq.n	b4ae4 <__addsf3+0x140>
   b4aa0:	ea92 0f03 	teq	r2, r3
   b4aa4:	d004      	beq.n	b4ab0 <__addsf3+0x10c>
   b4aa6:	f092 0f00 	teq	r2, #0
   b4aaa:	bf08      	it	eq
   b4aac:	4608      	moveq	r0, r1
   b4aae:	4770      	bx	lr
   b4ab0:	ea90 0f01 	teq	r0, r1
   b4ab4:	bf1c      	itt	ne
   b4ab6:	2000      	movne	r0, #0
   b4ab8:	4770      	bxne	lr
   b4aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b4abe:	d104      	bne.n	b4aca <__addsf3+0x126>
   b4ac0:	0040      	lsls	r0, r0, #1
   b4ac2:	bf28      	it	cs
   b4ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b4ac8:	4770      	bx	lr
   b4aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b4ace:	bf3c      	itt	cc
   b4ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b4ad4:	4770      	bxcc	lr
   b4ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b4ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4ae2:	4770      	bx	lr
   b4ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b4ae8:	bf16      	itet	ne
   b4aea:	4608      	movne	r0, r1
   b4aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b4af0:	4601      	movne	r1, r0
   b4af2:	0242      	lsls	r2, r0, #9
   b4af4:	bf06      	itte	eq
   b4af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b4afa:	ea90 0f01 	teqeq	r0, r1
   b4afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b4b02:	4770      	bx	lr

000b4b04 <__aeabi_ui2f>:
   b4b04:	f04f 0300 	mov.w	r3, #0
   b4b08:	e004      	b.n	b4b14 <__aeabi_i2f+0x8>
   b4b0a:	bf00      	nop

000b4b0c <__aeabi_i2f>:
   b4b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b4b10:	bf48      	it	mi
   b4b12:	4240      	negmi	r0, r0
   b4b14:	ea5f 0c00 	movs.w	ip, r0
   b4b18:	bf08      	it	eq
   b4b1a:	4770      	bxeq	lr
   b4b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b4b20:	4601      	mov	r1, r0
   b4b22:	f04f 0000 	mov.w	r0, #0
   b4b26:	e01c      	b.n	b4b62 <__aeabi_l2f+0x2a>

000b4b28 <__aeabi_ul2f>:
   b4b28:	ea50 0201 	orrs.w	r2, r0, r1
   b4b2c:	bf08      	it	eq
   b4b2e:	4770      	bxeq	lr
   b4b30:	f04f 0300 	mov.w	r3, #0
   b4b34:	e00a      	b.n	b4b4c <__aeabi_l2f+0x14>
   b4b36:	bf00      	nop

000b4b38 <__aeabi_l2f>:
   b4b38:	ea50 0201 	orrs.w	r2, r0, r1
   b4b3c:	bf08      	it	eq
   b4b3e:	4770      	bxeq	lr
   b4b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b4b44:	d502      	bpl.n	b4b4c <__aeabi_l2f+0x14>
   b4b46:	4240      	negs	r0, r0
   b4b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b4c:	ea5f 0c01 	movs.w	ip, r1
   b4b50:	bf02      	ittt	eq
   b4b52:	4684      	moveq	ip, r0
   b4b54:	4601      	moveq	r1, r0
   b4b56:	2000      	moveq	r0, #0
   b4b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b4b5c:	bf08      	it	eq
   b4b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b4b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b4b66:	fabc f28c 	clz	r2, ip
   b4b6a:	3a08      	subs	r2, #8
   b4b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b4b70:	db10      	blt.n	b4b94 <__aeabi_l2f+0x5c>
   b4b72:	fa01 fc02 	lsl.w	ip, r1, r2
   b4b76:	4463      	add	r3, ip
   b4b78:	fa00 fc02 	lsl.w	ip, r0, r2
   b4b7c:	f1c2 0220 	rsb	r2, r2, #32
   b4b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4b84:	fa20 f202 	lsr.w	r2, r0, r2
   b4b88:	eb43 0002 	adc.w	r0, r3, r2
   b4b8c:	bf08      	it	eq
   b4b8e:	f020 0001 	biceq.w	r0, r0, #1
   b4b92:	4770      	bx	lr
   b4b94:	f102 0220 	add.w	r2, r2, #32
   b4b98:	fa01 fc02 	lsl.w	ip, r1, r2
   b4b9c:	f1c2 0220 	rsb	r2, r2, #32
   b4ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b4ba4:	fa21 f202 	lsr.w	r2, r1, r2
   b4ba8:	eb43 0002 	adc.w	r0, r3, r2
   b4bac:	bf08      	it	eq
   b4bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b4bb2:	4770      	bx	lr

000b4bb4 <__aeabi_ldivmod>:
   b4bb4:	b97b      	cbnz	r3, b4bd6 <__aeabi_ldivmod+0x22>
   b4bb6:	b972      	cbnz	r2, b4bd6 <__aeabi_ldivmod+0x22>
   b4bb8:	2900      	cmp	r1, #0
   b4bba:	bfbe      	ittt	lt
   b4bbc:	2000      	movlt	r0, #0
   b4bbe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b4bc2:	e006      	blt.n	b4bd2 <__aeabi_ldivmod+0x1e>
   b4bc4:	bf08      	it	eq
   b4bc6:	2800      	cmpeq	r0, #0
   b4bc8:	bf1c      	itt	ne
   b4bca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b4bce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4bd2:	f000 b9a7 	b.w	b4f24 <__aeabi_idiv0>
   b4bd6:	f1ad 0c08 	sub.w	ip, sp, #8
   b4bda:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4bde:	2900      	cmp	r1, #0
   b4be0:	db09      	blt.n	b4bf6 <__aeabi_ldivmod+0x42>
   b4be2:	2b00      	cmp	r3, #0
   b4be4:	db1a      	blt.n	b4c1c <__aeabi_ldivmod+0x68>
   b4be6:	f000 f835 	bl	b4c54 <__udivmoddi4>
   b4bea:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4bf2:	b004      	add	sp, #16
   b4bf4:	4770      	bx	lr
   b4bf6:	4240      	negs	r0, r0
   b4bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4bfc:	2b00      	cmp	r3, #0
   b4bfe:	db1b      	blt.n	b4c38 <__aeabi_ldivmod+0x84>
   b4c00:	f000 f828 	bl	b4c54 <__udivmoddi4>
   b4c04:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c0c:	b004      	add	sp, #16
   b4c0e:	4240      	negs	r0, r0
   b4c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c14:	4252      	negs	r2, r2
   b4c16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c1a:	4770      	bx	lr
   b4c1c:	4252      	negs	r2, r2
   b4c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c22:	f000 f817 	bl	b4c54 <__udivmoddi4>
   b4c26:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c2e:	b004      	add	sp, #16
   b4c30:	4240      	negs	r0, r0
   b4c32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c36:	4770      	bx	lr
   b4c38:	4252      	negs	r2, r2
   b4c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c3e:	f000 f809 	bl	b4c54 <__udivmoddi4>
   b4c42:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c4a:	b004      	add	sp, #16
   b4c4c:	4252      	negs	r2, r2
   b4c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c52:	4770      	bx	lr

000b4c54 <__udivmoddi4>:
   b4c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4c58:	9d08      	ldr	r5, [sp, #32]
   b4c5a:	4604      	mov	r4, r0
   b4c5c:	468e      	mov	lr, r1
   b4c5e:	2b00      	cmp	r3, #0
   b4c60:	d14d      	bne.n	b4cfe <__udivmoddi4+0xaa>
   b4c62:	428a      	cmp	r2, r1
   b4c64:	4694      	mov	ip, r2
   b4c66:	d969      	bls.n	b4d3c <__udivmoddi4+0xe8>
   b4c68:	fab2 f282 	clz	r2, r2
   b4c6c:	b152      	cbz	r2, b4c84 <__udivmoddi4+0x30>
   b4c6e:	fa01 f302 	lsl.w	r3, r1, r2
   b4c72:	f1c2 0120 	rsb	r1, r2, #32
   b4c76:	fa20 f101 	lsr.w	r1, r0, r1
   b4c7a:	fa0c fc02 	lsl.w	ip, ip, r2
   b4c7e:	ea41 0e03 	orr.w	lr, r1, r3
   b4c82:	4094      	lsls	r4, r2
   b4c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4c88:	0c21      	lsrs	r1, r4, #16
   b4c8a:	fbbe f6f8 	udiv	r6, lr, r8
   b4c8e:	fa1f f78c 	uxth.w	r7, ip
   b4c92:	fb08 e316 	mls	r3, r8, r6, lr
   b4c96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4c9a:	fb06 f107 	mul.w	r1, r6, r7
   b4c9e:	4299      	cmp	r1, r3
   b4ca0:	d90a      	bls.n	b4cb8 <__udivmoddi4+0x64>
   b4ca2:	eb1c 0303 	adds.w	r3, ip, r3
   b4ca6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b4caa:	f080 811f 	bcs.w	b4eec <__udivmoddi4+0x298>
   b4cae:	4299      	cmp	r1, r3
   b4cb0:	f240 811c 	bls.w	b4eec <__udivmoddi4+0x298>
   b4cb4:	3e02      	subs	r6, #2
   b4cb6:	4463      	add	r3, ip
   b4cb8:	1a5b      	subs	r3, r3, r1
   b4cba:	b2a4      	uxth	r4, r4
   b4cbc:	fbb3 f0f8 	udiv	r0, r3, r8
   b4cc0:	fb08 3310 	mls	r3, r8, r0, r3
   b4cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4cc8:	fb00 f707 	mul.w	r7, r0, r7
   b4ccc:	42a7      	cmp	r7, r4
   b4cce:	d90a      	bls.n	b4ce6 <__udivmoddi4+0x92>
   b4cd0:	eb1c 0404 	adds.w	r4, ip, r4
   b4cd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4cd8:	f080 810a 	bcs.w	b4ef0 <__udivmoddi4+0x29c>
   b4cdc:	42a7      	cmp	r7, r4
   b4cde:	f240 8107 	bls.w	b4ef0 <__udivmoddi4+0x29c>
   b4ce2:	4464      	add	r4, ip
   b4ce4:	3802      	subs	r0, #2
   b4ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4cea:	1be4      	subs	r4, r4, r7
   b4cec:	2600      	movs	r6, #0
   b4cee:	b11d      	cbz	r5, b4cf8 <__udivmoddi4+0xa4>
   b4cf0:	40d4      	lsrs	r4, r2
   b4cf2:	2300      	movs	r3, #0
   b4cf4:	e9c5 4300 	strd	r4, r3, [r5]
   b4cf8:	4631      	mov	r1, r6
   b4cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4cfe:	428b      	cmp	r3, r1
   b4d00:	d909      	bls.n	b4d16 <__udivmoddi4+0xc2>
   b4d02:	2d00      	cmp	r5, #0
   b4d04:	f000 80ef 	beq.w	b4ee6 <__udivmoddi4+0x292>
   b4d08:	2600      	movs	r6, #0
   b4d0a:	e9c5 0100 	strd	r0, r1, [r5]
   b4d0e:	4630      	mov	r0, r6
   b4d10:	4631      	mov	r1, r6
   b4d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d16:	fab3 f683 	clz	r6, r3
   b4d1a:	2e00      	cmp	r6, #0
   b4d1c:	d14a      	bne.n	b4db4 <__udivmoddi4+0x160>
   b4d1e:	428b      	cmp	r3, r1
   b4d20:	d302      	bcc.n	b4d28 <__udivmoddi4+0xd4>
   b4d22:	4282      	cmp	r2, r0
   b4d24:	f200 80f9 	bhi.w	b4f1a <__udivmoddi4+0x2c6>
   b4d28:	1a84      	subs	r4, r0, r2
   b4d2a:	eb61 0303 	sbc.w	r3, r1, r3
   b4d2e:	2001      	movs	r0, #1
   b4d30:	469e      	mov	lr, r3
   b4d32:	2d00      	cmp	r5, #0
   b4d34:	d0e0      	beq.n	b4cf8 <__udivmoddi4+0xa4>
   b4d36:	e9c5 4e00 	strd	r4, lr, [r5]
   b4d3a:	e7dd      	b.n	b4cf8 <__udivmoddi4+0xa4>
   b4d3c:	b902      	cbnz	r2, b4d40 <__udivmoddi4+0xec>
   b4d3e:	deff      	udf	#255	; 0xff
   b4d40:	fab2 f282 	clz	r2, r2
   b4d44:	2a00      	cmp	r2, #0
   b4d46:	f040 8092 	bne.w	b4e6e <__udivmoddi4+0x21a>
   b4d4a:	eba1 010c 	sub.w	r1, r1, ip
   b4d4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4d52:	fa1f fe8c 	uxth.w	lr, ip
   b4d56:	2601      	movs	r6, #1
   b4d58:	0c20      	lsrs	r0, r4, #16
   b4d5a:	fbb1 f3f7 	udiv	r3, r1, r7
   b4d5e:	fb07 1113 	mls	r1, r7, r3, r1
   b4d62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4d66:	fb0e f003 	mul.w	r0, lr, r3
   b4d6a:	4288      	cmp	r0, r1
   b4d6c:	d908      	bls.n	b4d80 <__udivmoddi4+0x12c>
   b4d6e:	eb1c 0101 	adds.w	r1, ip, r1
   b4d72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4d76:	d202      	bcs.n	b4d7e <__udivmoddi4+0x12a>
   b4d78:	4288      	cmp	r0, r1
   b4d7a:	f200 80cb 	bhi.w	b4f14 <__udivmoddi4+0x2c0>
   b4d7e:	4643      	mov	r3, r8
   b4d80:	1a09      	subs	r1, r1, r0
   b4d82:	b2a4      	uxth	r4, r4
   b4d84:	fbb1 f0f7 	udiv	r0, r1, r7
   b4d88:	fb07 1110 	mls	r1, r7, r0, r1
   b4d8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4d90:	fb0e fe00 	mul.w	lr, lr, r0
   b4d94:	45a6      	cmp	lr, r4
   b4d96:	d908      	bls.n	b4daa <__udivmoddi4+0x156>
   b4d98:	eb1c 0404 	adds.w	r4, ip, r4
   b4d9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4da0:	d202      	bcs.n	b4da8 <__udivmoddi4+0x154>
   b4da2:	45a6      	cmp	lr, r4
   b4da4:	f200 80bb 	bhi.w	b4f1e <__udivmoddi4+0x2ca>
   b4da8:	4608      	mov	r0, r1
   b4daa:	eba4 040e 	sub.w	r4, r4, lr
   b4dae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4db2:	e79c      	b.n	b4cee <__udivmoddi4+0x9a>
   b4db4:	f1c6 0720 	rsb	r7, r6, #32
   b4db8:	40b3      	lsls	r3, r6
   b4dba:	fa22 fc07 	lsr.w	ip, r2, r7
   b4dbe:	ea4c 0c03 	orr.w	ip, ip, r3
   b4dc2:	fa20 f407 	lsr.w	r4, r0, r7
   b4dc6:	fa01 f306 	lsl.w	r3, r1, r6
   b4dca:	431c      	orrs	r4, r3
   b4dcc:	40f9      	lsrs	r1, r7
   b4dce:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4dd2:	fa00 f306 	lsl.w	r3, r0, r6
   b4dd6:	fbb1 f8f9 	udiv	r8, r1, r9
   b4dda:	0c20      	lsrs	r0, r4, #16
   b4ddc:	fa1f fe8c 	uxth.w	lr, ip
   b4de0:	fb09 1118 	mls	r1, r9, r8, r1
   b4de4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4de8:	fb08 f00e 	mul.w	r0, r8, lr
   b4dec:	4288      	cmp	r0, r1
   b4dee:	fa02 f206 	lsl.w	r2, r2, r6
   b4df2:	d90b      	bls.n	b4e0c <__udivmoddi4+0x1b8>
   b4df4:	eb1c 0101 	adds.w	r1, ip, r1
   b4df8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4dfc:	f080 8088 	bcs.w	b4f10 <__udivmoddi4+0x2bc>
   b4e00:	4288      	cmp	r0, r1
   b4e02:	f240 8085 	bls.w	b4f10 <__udivmoddi4+0x2bc>
   b4e06:	f1a8 0802 	sub.w	r8, r8, #2
   b4e0a:	4461      	add	r1, ip
   b4e0c:	1a09      	subs	r1, r1, r0
   b4e0e:	b2a4      	uxth	r4, r4
   b4e10:	fbb1 f0f9 	udiv	r0, r1, r9
   b4e14:	fb09 1110 	mls	r1, r9, r0, r1
   b4e18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4e1c:	fb00 fe0e 	mul.w	lr, r0, lr
   b4e20:	458e      	cmp	lr, r1
   b4e22:	d908      	bls.n	b4e36 <__udivmoddi4+0x1e2>
   b4e24:	eb1c 0101 	adds.w	r1, ip, r1
   b4e28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4e2c:	d26c      	bcs.n	b4f08 <__udivmoddi4+0x2b4>
   b4e2e:	458e      	cmp	lr, r1
   b4e30:	d96a      	bls.n	b4f08 <__udivmoddi4+0x2b4>
   b4e32:	3802      	subs	r0, #2
   b4e34:	4461      	add	r1, ip
   b4e36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4e3a:	fba0 9402 	umull	r9, r4, r0, r2
   b4e3e:	eba1 010e 	sub.w	r1, r1, lr
   b4e42:	42a1      	cmp	r1, r4
   b4e44:	46c8      	mov	r8, r9
   b4e46:	46a6      	mov	lr, r4
   b4e48:	d356      	bcc.n	b4ef8 <__udivmoddi4+0x2a4>
   b4e4a:	d053      	beq.n	b4ef4 <__udivmoddi4+0x2a0>
   b4e4c:	b15d      	cbz	r5, b4e66 <__udivmoddi4+0x212>
   b4e4e:	ebb3 0208 	subs.w	r2, r3, r8
   b4e52:	eb61 010e 	sbc.w	r1, r1, lr
   b4e56:	fa01 f707 	lsl.w	r7, r1, r7
   b4e5a:	fa22 f306 	lsr.w	r3, r2, r6
   b4e5e:	40f1      	lsrs	r1, r6
   b4e60:	431f      	orrs	r7, r3
   b4e62:	e9c5 7100 	strd	r7, r1, [r5]
   b4e66:	2600      	movs	r6, #0
   b4e68:	4631      	mov	r1, r6
   b4e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4e6e:	f1c2 0320 	rsb	r3, r2, #32
   b4e72:	40d8      	lsrs	r0, r3
   b4e74:	fa0c fc02 	lsl.w	ip, ip, r2
   b4e78:	fa21 f303 	lsr.w	r3, r1, r3
   b4e7c:	4091      	lsls	r1, r2
   b4e7e:	4301      	orrs	r1, r0
   b4e80:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4e84:	fa1f fe8c 	uxth.w	lr, ip
   b4e88:	fbb3 f0f7 	udiv	r0, r3, r7
   b4e8c:	fb07 3610 	mls	r6, r7, r0, r3
   b4e90:	0c0b      	lsrs	r3, r1, #16
   b4e92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4e96:	fb00 f60e 	mul.w	r6, r0, lr
   b4e9a:	429e      	cmp	r6, r3
   b4e9c:	fa04 f402 	lsl.w	r4, r4, r2
   b4ea0:	d908      	bls.n	b4eb4 <__udivmoddi4+0x260>
   b4ea2:	eb1c 0303 	adds.w	r3, ip, r3
   b4ea6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4eaa:	d22f      	bcs.n	b4f0c <__udivmoddi4+0x2b8>
   b4eac:	429e      	cmp	r6, r3
   b4eae:	d92d      	bls.n	b4f0c <__udivmoddi4+0x2b8>
   b4eb0:	3802      	subs	r0, #2
   b4eb2:	4463      	add	r3, ip
   b4eb4:	1b9b      	subs	r3, r3, r6
   b4eb6:	b289      	uxth	r1, r1
   b4eb8:	fbb3 f6f7 	udiv	r6, r3, r7
   b4ebc:	fb07 3316 	mls	r3, r7, r6, r3
   b4ec0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4ec4:	fb06 f30e 	mul.w	r3, r6, lr
   b4ec8:	428b      	cmp	r3, r1
   b4eca:	d908      	bls.n	b4ede <__udivmoddi4+0x28a>
   b4ecc:	eb1c 0101 	adds.w	r1, ip, r1
   b4ed0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4ed4:	d216      	bcs.n	b4f04 <__udivmoddi4+0x2b0>
   b4ed6:	428b      	cmp	r3, r1
   b4ed8:	d914      	bls.n	b4f04 <__udivmoddi4+0x2b0>
   b4eda:	3e02      	subs	r6, #2
   b4edc:	4461      	add	r1, ip
   b4ede:	1ac9      	subs	r1, r1, r3
   b4ee0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4ee4:	e738      	b.n	b4d58 <__udivmoddi4+0x104>
   b4ee6:	462e      	mov	r6, r5
   b4ee8:	4628      	mov	r0, r5
   b4eea:	e705      	b.n	b4cf8 <__udivmoddi4+0xa4>
   b4eec:	4606      	mov	r6, r0
   b4eee:	e6e3      	b.n	b4cb8 <__udivmoddi4+0x64>
   b4ef0:	4618      	mov	r0, r3
   b4ef2:	e6f8      	b.n	b4ce6 <__udivmoddi4+0x92>
   b4ef4:	454b      	cmp	r3, r9
   b4ef6:	d2a9      	bcs.n	b4e4c <__udivmoddi4+0x1f8>
   b4ef8:	ebb9 0802 	subs.w	r8, r9, r2
   b4efc:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4f00:	3801      	subs	r0, #1
   b4f02:	e7a3      	b.n	b4e4c <__udivmoddi4+0x1f8>
   b4f04:	4646      	mov	r6, r8
   b4f06:	e7ea      	b.n	b4ede <__udivmoddi4+0x28a>
   b4f08:	4620      	mov	r0, r4
   b4f0a:	e794      	b.n	b4e36 <__udivmoddi4+0x1e2>
   b4f0c:	4640      	mov	r0, r8
   b4f0e:	e7d1      	b.n	b4eb4 <__udivmoddi4+0x260>
   b4f10:	46d0      	mov	r8, sl
   b4f12:	e77b      	b.n	b4e0c <__udivmoddi4+0x1b8>
   b4f14:	3b02      	subs	r3, #2
   b4f16:	4461      	add	r1, ip
   b4f18:	e732      	b.n	b4d80 <__udivmoddi4+0x12c>
   b4f1a:	4630      	mov	r0, r6
   b4f1c:	e709      	b.n	b4d32 <__udivmoddi4+0xde>
   b4f1e:	4464      	add	r4, ip
   b4f20:	3802      	subs	r0, #2
   b4f22:	e742      	b.n	b4daa <__udivmoddi4+0x156>

000b4f24 <__aeabi_idiv0>:
   b4f24:	4770      	bx	lr
   b4f26:	bf00      	nop

000b4f28 <strlen>:
   b4f28:	4603      	mov	r3, r0
   b4f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4f2e:	2a00      	cmp	r2, #0
   b4f30:	d1fb      	bne.n	b4f2a <strlen+0x2>
   b4f32:	1a18      	subs	r0, r3, r0
   b4f34:	3801      	subs	r0, #1
   b4f36:	4770      	bx	lr

000b4f38 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4f38:	4809      	ldr	r0, [pc, #36]	; (b4f60 <module_user_pre_init+0x28>)
   b4f3a:	490a      	ldr	r1, [pc, #40]	; (b4f64 <module_user_pre_init+0x2c>)
   b4f3c:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4f3e:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4f40:	d005      	beq.n	b4f4e <module_user_pre_init+0x16>
   b4f42:	4a09      	ldr	r2, [pc, #36]	; (b4f68 <module_user_pre_init+0x30>)
   b4f44:	4282      	cmp	r2, r0
   b4f46:	d002      	beq.n	b4f4e <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4f48:	1a12      	subs	r2, r2, r0
   b4f4a:	f003 ff8d 	bl	b8e68 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4f4e:	4807      	ldr	r0, [pc, #28]	; (b4f6c <module_user_pre_init+0x34>)
   b4f50:	4a07      	ldr	r2, [pc, #28]	; (b4f70 <module_user_pre_init+0x38>)
   b4f52:	2100      	movs	r1, #0
   b4f54:	1a12      	subs	r2, r2, r0
   b4f56:	f003 ff95 	bl	b8e84 <memset>
    return &link_global_data_start;
}
   b4f5a:	4801      	ldr	r0, [pc, #4]	; (b4f60 <module_user_pre_init+0x28>)
   b4f5c:	bd08      	pop	{r3, pc}
   b4f5e:	bf00      	nop
   b4f60:	2003e5c4 	.word	0x2003e5c4
   b4f64:	000b97b0 	.word	0x000b97b0
   b4f68:	2003e638 	.word	0x2003e638
   b4f6c:	2003e638 	.word	0x2003e638
   b4f70:	2003e7f0 	.word	0x2003e7f0

000b4f74 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4f74:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4f76:	4e07      	ldr	r6, [pc, #28]	; (b4f94 <module_user_init+0x20>)
   b4f78:	4c07      	ldr	r4, [pc, #28]	; (b4f98 <module_user_init+0x24>)
    module_user_init_hook();
   b4f7a:	f002 fda1 	bl	b7ac0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4f7e:	1ba4      	subs	r4, r4, r6
   b4f80:	08a4      	lsrs	r4, r4, #2
   b4f82:	2500      	movs	r5, #0
   b4f84:	42ac      	cmp	r4, r5
   b4f86:	d100      	bne.n	b4f8a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4f88:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4f8a:	f856 3b04 	ldr.w	r3, [r6], #4
   b4f8e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4f90:	3501      	adds	r5, #1
   b4f92:	e7f7      	b.n	b4f84 <module_user_init+0x10>
   b4f94:	000b9760 	.word	0x000b9760
   b4f98:	000b9784 	.word	0x000b9784

000b4f9c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4f9c:	f000 b9b2 	b.w	b5304 <setup>

000b4fa0 <module_user_loop>:
}

void module_user_loop() {
   b4fa0:	b508      	push	{r3, lr}
    loop();
   b4fa2:	f000 faf3 	bl	b558c <loop>
    _post_loop();
}
   b4fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4faa:	f002 bd41 	b.w	b7a30 <_post_loop>

000b4fae <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4fae:	f001 bcf1 	b.w	b6994 <malloc>

000b4fb2 <_Znaj>:
   b4fb2:	f001 bcef 	b.w	b6994 <malloc>

000b4fb6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4fb6:	f001 bcf5 	b.w	b69a4 <free>

000b4fba <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4fba:	7800      	ldrb	r0, [r0, #0]
   b4fbc:	fab0 f080 	clz	r0, r0
   b4fc0:	0940      	lsrs	r0, r0, #5
   b4fc2:	4770      	bx	lr

000b4fc4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4fc4:	2301      	movs	r3, #1
   b4fc6:	7003      	strb	r3, [r0, #0]
   b4fc8:	4770      	bx	lr
	...

000b4fcc <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   b4fcc:	b510      	push	{r4, lr}
   b4fce:	4b03      	ldr	r3, [pc, #12]	; (b4fdc <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   b4fd0:	6003      	str	r3, [r0, #0]
   b4fd2:	4604      	mov	r4, r0
   b4fd4:	f001 f96a 	bl	b62ac <_ZN10JsonWriterD1Ev>
   b4fd8:	4620      	mov	r0, r4
   b4fda:	bd10      	pop	{r4, pc}
   b4fdc:	000b91a0 	.word	0x000b91a0

000b4fe0 <_ZN16JsonWriterStaticILj256EED0Ev>:
   b4fe0:	b510      	push	{r4, lr}
   b4fe2:	4604      	mov	r4, r0
   b4fe4:	f7ff fff2 	bl	b4fcc <_ZN16JsonWriterStaticILj256EED1Ev>
   b4fe8:	4620      	mov	r0, r4
   b4fea:	f44f 7198 	mov.w	r1, #304	; 0x130
   b4fee:	f7ff ffe2 	bl	b4fb6 <_ZdlPvj>
   b4ff2:	4620      	mov	r0, r4
   b4ff4:	bd10      	pop	{r4, pc}

000b4ff6 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ff6:	b40e      	push	{r1, r2, r3}
   b4ff8:	b503      	push	{r0, r1, lr}
   b4ffa:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4ffc:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ffe:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5002:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b5004:	f002 fa4d 	bl	b74a2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b5008:	b002      	add	sp, #8
   b500a:	f85d eb04 	ldr.w	lr, [sp], #4
   b500e:	b003      	add	sp, #12
   b5010:	4770      	bx	lr
   b5012:	0000      	movs	r0, r0
   b5014:	0000      	movs	r0, r0
	...

000b5018 <_Z21getDustSensorReadingsv>:
float concentration = 0;

Adafruit_BME280 bme;

void getDustSensorReadings()
{
   b5018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b501c:	ed2d 8b02 	vpush	{d8}
  if (lowpulseoccupancy == 0){
   b5020:	4c49      	ldr	r4, [pc, #292]	; (b5148 <_Z21getDustSensorReadingsv+0x130>)
   b5022:	4b4a      	ldr	r3, [pc, #296]	; (b514c <_Z21getDustSensorReadingsv+0x134>)
   b5024:	6822      	ldr	r2, [r4, #0]
   b5026:	2a00      	cmp	r2, #0
   b5028:	d177      	bne.n	b511a <_Z21getDustSensorReadingsv+0x102>
 lowpulseoccupancy = last_lpo;
   b502a:	681b      	ldr	r3, [r3, #0]
   b502c:	6023      	str	r3, [r4, #0]
}
else{
 last_lpo = lowpulseoccupancy;
}

ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
   b502e:	6820      	ldr	r0, [r4, #0]
   b5030:	4d47      	ldr	r5, [pc, #284]	; (b5150 <_Z21getDustSensorReadingsv+0x138>)
concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62;
   b5032:	f8df a130 	ldr.w	sl, [pc, #304]	; b5164 <_Z21getDustSensorReadingsv+0x14c>
ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
   b5036:	f7ff f935 	bl	b42a4 <__aeabi_ui2d>
   b503a:	a339      	add	r3, pc, #228	; (adr r3, b5120 <_Z21getDustSensorReadingsv+0x108>)
   b503c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5040:	f7ff fad4 	bl	b45ec <__aeabi_ddiv>
   b5044:	f7ff fc58 	bl	b48f8 <__aeabi_d2f>
   b5048:	6028      	str	r0, [r5, #0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b504a:	f7ff f94d 	bl	b42e8 <__aeabi_f2d>
   b504e:	ed9f 1b36 	vldr	d1, [pc, #216]	; b5128 <_Z21getDustSensorReadingsv+0x110>
   b5052:	ec41 0b10 	vmov	d0, r0, r1
   b5056:	f002 fe7b 	bl	b7d50 <pow>
concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62;
   b505a:	ed95 8a00 	vldr	s16, [r5]
   b505e:	ee18 0a10 	vmov	r0, s16
   b5062:	ec57 6b10 	vmov	r6, r7, d0
   b5066:	f7ff f93f 	bl	b42e8 <__aeabi_f2d>
   b506a:	a331      	add	r3, pc, #196	; (adr r3, b5130 <_Z21getDustSensorReadingsv+0x118>)
   b506c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5070:	4680      	mov	r8, r0
   b5072:	4689      	mov	r9, r1
   b5074:	4630      	mov	r0, r6
   b5076:	4639      	mov	r1, r7
   b5078:	f7ff f98e 	bl	b4398 <__aeabi_dmul>
   b507c:	4642      	mov	r2, r8
   b507e:	4606      	mov	r6, r0
   b5080:	460f      	mov	r7, r1
   b5082:	464b      	mov	r3, r9
   b5084:	4640      	mov	r0, r8
   b5086:	4649      	mov	r1, r9
   b5088:	f7ff f986 	bl	b4398 <__aeabi_dmul>
   b508c:	a32a      	add	r3, pc, #168	; (adr r3, b5138 <_Z21getDustSensorReadingsv+0x120>)
   b508e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5092:	f7ff f981 	bl	b4398 <__aeabi_dmul>
   b5096:	4602      	mov	r2, r0
   b5098:	460b      	mov	r3, r1
   b509a:	4630      	mov	r0, r6
   b509c:	4639      	mov	r1, r7
   b509e:	f7fe ffc3 	bl	b4028 <__aeabi_dsub>
   b50a2:	eddf 7a2c 	vldr	s15, [pc, #176]	; b5154 <_Z21getDustSensorReadingsv+0x13c>
   b50a6:	ee68 7a27 	vmul.f32	s15, s16, s15
   b50aa:	4606      	mov	r6, r0
   b50ac:	ee17 0a90 	vmov	r0, s15
   b50b0:	460f      	mov	r7, r1
   b50b2:	f7ff f919 	bl	b42e8 <__aeabi_f2d>
   b50b6:	4602      	mov	r2, r0
   b50b8:	460b      	mov	r3, r1
   b50ba:	4630      	mov	r0, r6
   b50bc:	4639      	mov	r1, r7
   b50be:	f7fe ffb5 	bl	b402c <__adddf3>
   b50c2:	a31f      	add	r3, pc, #124	; (adr r3, b5140 <_Z21getDustSensorReadingsv+0x128>)
   b50c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b50c8:	f7fe ffb0 	bl	b402c <__adddf3>
   b50cc:	f7ff fc14 	bl	b48f8 <__aeabi_d2f>
   b50d0:	f8ca 0000 	str.w	r0, [sl]



Serial.printlnf("LPO: %lu", lowpulseoccupancy);
   b50d4:	f002 fc26 	bl	b7924 <_Z16_fetch_usbserialv>
   b50d8:	6822      	ldr	r2, [r4, #0]
   b50da:	491f      	ldr	r1, [pc, #124]	; (b5158 <_Z21getDustSensorReadingsv+0x140>)
   b50dc:	f7ff ff8b 	bl	b4ff6 <_ZN5Print8printlnfEPKcz>
Serial.printlnf("Ratio: %f%%", ratio);
   b50e0:	f002 fc20 	bl	b7924 <_Z16_fetch_usbserialv>
   b50e4:	4604      	mov	r4, r0
   b50e6:	6828      	ldr	r0, [r5, #0]
   b50e8:	f7ff f8fe 	bl	b42e8 <__aeabi_f2d>
   b50ec:	4602      	mov	r2, r0
   b50ee:	460b      	mov	r3, r1
   b50f0:	4620      	mov	r0, r4
   b50f2:	491a      	ldr	r1, [pc, #104]	; (b515c <_Z21getDustSensorReadingsv+0x144>)
   b50f4:	f7ff ff7f 	bl	b4ff6 <_ZN5Print8printlnfEPKcz>
Serial.printlnf("Concentration: %f pcs/L", concentration);
   b50f8:	f002 fc14 	bl	b7924 <_Z16_fetch_usbserialv>
   b50fc:	4604      	mov	r4, r0
   b50fe:	f8da 0000 	ldr.w	r0, [sl]
   b5102:	f7ff f8f1 	bl	b42e8 <__aeabi_f2d>
   b5106:	4602      	mov	r2, r0
   b5108:	460b      	mov	r3, r1
   b510a:	4620      	mov	r0, r4
   b510c:	4914      	ldr	r1, [pc, #80]	; (b5160 <_Z21getDustSensorReadingsv+0x148>)
   b510e:	f7ff ff72 	bl	b4ff6 <_ZN5Print8printlnfEPKcz>
}
   b5112:	ecbd 8b02 	vpop	{d8}
   b5116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 last_lpo = lowpulseoccupancy;
   b511a:	601a      	str	r2, [r3, #0]
   b511c:	e787      	b.n	b502e <_Z21getDustSensorReadingsv+0x16>
   b511e:	bf00      	nop
   b5120:	00000000 	.word	0x00000000
   b5124:	41124f80 	.word	0x41124f80
   b5128:	00000000 	.word	0x00000000
   b512c:	40080000 	.word	0x40080000
   b5130:	9999999a 	.word	0x9999999a
   b5134:	3ff19999 	.word	0x3ff19999
   b5138:	66666666 	.word	0x66666666
   b513c:	400e6666 	.word	0x400e6666
   b5140:	3d70a3d7 	.word	0x3d70a3d7
   b5144:	3fe3d70a 	.word	0x3fe3d70a
   b5148:	2003e6ac 	.word	0x2003e6ac
   b514c:	2003e6a8 	.word	0x2003e6a8
   b5150:	2003e6b0 	.word	0x2003e6b0
   b5154:	44020000 	.word	0x44020000
   b5158:	000b900c 	.word	0x000b900c
   b515c:	000b9015 	.word	0x000b9015
   b5160:	000b9021 	.word	0x000b9021
   b5164:	2003e69c 	.word	0x2003e69c

000b5168 <_Z13getAirQualityv>:




String getAirQuality()
{
   b5168:	b538      	push	{r3, r4, r5, lr}
   b516a:	4604      	mov	r4, r0
 int quality = aqSensor.slope();
   b516c:	4811      	ldr	r0, [pc, #68]	; (b51b4 <_Z13getAirQualityv+0x4c>)
   b516e:	f000 fad7 	bl	b5720 <_ZN16AirQualitySensor5slopeEv>
 String qual = "None";
   b5172:	4911      	ldr	r1, [pc, #68]	; (b51b8 <_Z13getAirQualityv+0x50>)
 int quality = aqSensor.slope();
   b5174:	4605      	mov	r5, r0
 String qual = "None";
   b5176:	4620      	mov	r0, r4
   b5178:	f002 fac7 	bl	b770a <_ZN6StringC1EPK19__FlashStringHelper>

 if (quality == AirQualitySensor::FORCE_SIGNAL)
   b517c:	4b0f      	ldr	r3, [pc, #60]	; (b51bc <_Z13getAirQualityv+0x54>)
   b517e:	681b      	ldr	r3, [r3, #0]
   b5180:	42ab      	cmp	r3, r5
   b5182:	d105      	bne.n	b5190 <_Z13getAirQualityv+0x28>
 {
   qual = "Danger";
   b5184:	490e      	ldr	r1, [pc, #56]	; (b51c0 <_Z13getAirQualityv+0x58>)
 {
   qual = "Low Pollution";
 }
 else if (quality == AirQualitySensor::FRESH_AIR)
 {
   qual = "Fresh Air";
   b5186:	4620      	mov	r0, r4
   b5188:	f002 faed 	bl	b7766 <_ZN6StringaSEPKc>
 }

 return qual;
}
   b518c:	4620      	mov	r0, r4
   b518e:	bd38      	pop	{r3, r4, r5, pc}
 else if (quality == AirQualitySensor::HIGH_POLLUTION)
   b5190:	4b0c      	ldr	r3, [pc, #48]	; (b51c4 <_Z13getAirQualityv+0x5c>)
   b5192:	681b      	ldr	r3, [r3, #0]
   b5194:	42ab      	cmp	r3, r5
   b5196:	d101      	bne.n	b519c <_Z13getAirQualityv+0x34>
   qual = "High Pollution";
   b5198:	490b      	ldr	r1, [pc, #44]	; (b51c8 <_Z13getAirQualityv+0x60>)
   b519a:	e7f4      	b.n	b5186 <_Z13getAirQualityv+0x1e>
 else if (quality == AirQualitySensor::LOW_POLLUTION)
   b519c:	4b0b      	ldr	r3, [pc, #44]	; (b51cc <_Z13getAirQualityv+0x64>)
   b519e:	681b      	ldr	r3, [r3, #0]
   b51a0:	42ab      	cmp	r3, r5
   b51a2:	d101      	bne.n	b51a8 <_Z13getAirQualityv+0x40>
   qual = "Low Pollution";
   b51a4:	490a      	ldr	r1, [pc, #40]	; (b51d0 <_Z13getAirQualityv+0x68>)
   b51a6:	e7ee      	b.n	b5186 <_Z13getAirQualityv+0x1e>
 else if (quality == AirQualitySensor::FRESH_AIR)
   b51a8:	4b0a      	ldr	r3, [pc, #40]	; (b51d4 <_Z13getAirQualityv+0x6c>)
   b51aa:	681b      	ldr	r3, [r3, #0]
   b51ac:	42ab      	cmp	r3, r5
   b51ae:	d1ed      	bne.n	b518c <_Z13getAirQualityv+0x24>
   qual = "Fresh Air";
   b51b0:	4909      	ldr	r1, [pc, #36]	; (b51d8 <_Z13getAirQualityv+0x70>)
   b51b2:	e7e8      	b.n	b5186 <_Z13getAirQualityv+0x1e>
   b51b4:	2003e63c 	.word	0x2003e63c
   b51b8:	000b9039 	.word	0x000b9039
   b51bc:	000b91a8 	.word	0x000b91a8
   b51c0:	000b903e 	.word	0x000b903e
   b51c4:	000b91b0 	.word	0x000b91b0
   b51c8:	000b9045 	.word	0x000b9045
   b51cc:	000b91ac 	.word	0x000b91ac
   b51d0:	000b9054 	.word	0x000b9054
   b51d4:	000b91b4 	.word	0x000b91b4
   b51d8:	000b9062 	.word	0x000b9062

000b51dc <_Z12getBMEValuesRiS_S_>:




int getBMEValues(int &temp, int &pressure, int &humidity)
{
   b51dc:	b570      	push	{r4, r5, r6, lr}
   b51de:	4606      	mov	r6, r0
 temp = (int)bme.readTemperature();
   b51e0:	480e      	ldr	r0, [pc, #56]	; (b521c <_Z12getBMEValuesRiS_S_+0x40>)
{
   b51e2:	460d      	mov	r5, r1
   b51e4:	4614      	mov	r4, r2
 temp = (int)bme.readTemperature();
   b51e6:	f000 fdad 	bl	b5d44 <_ZN15Adafruit_BME28015readTemperatureEv>
   b51ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 pressure = (int)(bme.readPressure() / 100.0F);
   b51ee:	480b      	ldr	r0, [pc, #44]	; (b521c <_Z12getBMEValuesRiS_S_+0x40>)
 temp = (int)bme.readTemperature();
   b51f0:	ed86 0a00 	vstr	s0, [r6]
 pressure = (int)(bme.readPressure() / 100.0F);
   b51f4:	f000 fe20 	bl	b5e38 <_ZN15Adafruit_BME28012readPressureEv>
   b51f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5220 <_Z12getBMEValuesRiS_S_+0x44>
 humidity = (int)bme.readHumidity();
   b51fc:	4807      	ldr	r0, [pc, #28]	; (b521c <_Z12getBMEValuesRiS_S_+0x40>)
 pressure = (int)(bme.readPressure() / 100.0F);
   b51fe:	eec0 7a07 	vdiv.f32	s15, s0, s14
   b5202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5206:	edc5 7a00 	vstr	s15, [r5]
 humidity = (int)bme.readHumidity();
   b520a:	f000 fdcb 	bl	b5da4 <_ZN15Adafruit_BME28012readHumidityEv>
   b520e:	eebd 0ac0 	vcvt.s32.f32	s0, s0

 return 1;
}
   b5212:	2001      	movs	r0, #1
 humidity = (int)bme.readHumidity();
   b5214:	ed84 0a00 	vstr	s0, [r4]
}
   b5218:	bd70      	pop	{r4, r5, r6, pc}
   b521a:	bf00      	nop
   b521c:	2003e658 	.word	0x2003e658
   b5220:	42c80000 	.word	0x42c80000

000b5224 <_Z13updateDisplayiii6String>:

void updateDisplay(int temp, int humidity, int pressure, String airQuality)
{
   b5224:	b570      	push	{r4, r5, r6, lr}
   b5226:	461e      	mov	r6, r3
   b5228:	4605      	mov	r5, r0
 SeeedOled.clearDisplay();
   b522a:	482d      	ldr	r0, [pc, #180]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
{
   b522c:	460c      	mov	r4, r1
 SeeedOled.clearDisplay();
   b522e:	f000 ffbd 	bl	b61ac <_ZN9SeeedOLED12clearDisplayEv>

 SeeedOled.setTextXY(0, 3);
   b5232:	2203      	movs	r2, #3
   b5234:	482a      	ldr	r0, [pc, #168]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b5236:	2100      	movs	r1, #0
   b5238:	f000 ff73 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
 SeeedOled.putString(airQuality);
   b523c:	6831      	ldr	r1, [r6, #0]
   b523e:	4828      	ldr	r0, [pc, #160]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b5240:	f000 ffd5 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>

 SeeedOled.setTextXY(2, 0);
   b5244:	2200      	movs	r2, #0
   b5246:	4826      	ldr	r0, [pc, #152]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b5248:	2102      	movs	r1, #2
   b524a:	f000 ff6a 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
 SeeedOled.putString("Temp: ");
   b524e:	4925      	ldr	r1, [pc, #148]	; (b52e4 <_Z13updateDisplayiii6String+0xc0>)
   b5250:	4823      	ldr	r0, [pc, #140]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b5252:	f000 ffcc 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>
 SeeedOled.putNumber(temp);
   b5256:	4629      	mov	r1, r5
   b5258:	4821      	ldr	r0, [pc, #132]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b525a:	f000 ffd5 	bl	b6208 <_ZN9SeeedOLED9putNumberEl>
 SeeedOled.putString("C");
   b525e:	4922      	ldr	r1, [pc, #136]	; (b52e8 <_Z13updateDisplayiii6String+0xc4>)
   b5260:	481f      	ldr	r0, [pc, #124]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b5262:	f000 ffc4 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>

 SeeedOled.setTextXY(3, 0);
   b5266:	2200      	movs	r2, #0
   b5268:	481d      	ldr	r0, [pc, #116]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b526a:	2103      	movs	r1, #3
   b526c:	f000 ff59 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
 SeeedOled.putString("Humidity: ");
   b5270:	491e      	ldr	r1, [pc, #120]	; (b52ec <_Z13updateDisplayiii6String+0xc8>)
   b5272:	481b      	ldr	r0, [pc, #108]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b5274:	f000 ffbb 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>
 SeeedOled.putNumber(humidity);
   b5278:	4621      	mov	r1, r4
   b527a:	4819      	ldr	r0, [pc, #100]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
 SeeedOled.putString("Hello Thomas");
 //SeeedOled.putString("Press: ");
 //SeeedOled.putNumber(pressure);
 //SeeedOled.putString(" hPa");

 if (concentration > 1)
   b527c:	4c1c      	ldr	r4, [pc, #112]	; (b52f0 <_Z13updateDisplayiii6String+0xcc>)
 SeeedOled.putNumber(humidity);
   b527e:	f000 ffc3 	bl	b6208 <_ZN9SeeedOLED9putNumberEl>
 SeeedOled.putString("%");
   b5282:	491c      	ldr	r1, [pc, #112]	; (b52f4 <_Z13updateDisplayiii6String+0xd0>)
   b5284:	4816      	ldr	r0, [pc, #88]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b5286:	f000 ffb2 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>
 SeeedOled.setTextXY(4, 0);
   b528a:	4815      	ldr	r0, [pc, #84]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b528c:	2200      	movs	r2, #0
   b528e:	2104      	movs	r1, #4
   b5290:	f000 ff47 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
 SeeedOled.putString("Hello Thomas");
   b5294:	4918      	ldr	r1, [pc, #96]	; (b52f8 <_Z13updateDisplayiii6String+0xd4>)
   b5296:	4812      	ldr	r0, [pc, #72]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b5298:	f000 ffa9 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>
 if (concentration > 1)
   b529c:	ed94 7a00 	vldr	s14, [r4]
   b52a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b52a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b52a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b52ac:	dd17      	ble.n	b52de <_Z13updateDisplayiii6String+0xba>
 {
   SeeedOled.setTextXY(5, 0);
   b52ae:	2200      	movs	r2, #0
   b52b0:	480b      	ldr	r0, [pc, #44]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b52b2:	2105      	movs	r1, #5
   b52b4:	f000 ff35 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
   SeeedOled.putString("Dust: ");
   b52b8:	4910      	ldr	r1, [pc, #64]	; (b52fc <_Z13updateDisplayiii6String+0xd8>)
   b52ba:	4809      	ldr	r0, [pc, #36]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b52bc:	f000 ff97 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>
   SeeedOled.putNumber(concentration); // Cast our float to an int to make it more compact
   b52c0:	edd4 7a00 	vldr	s15, [r4]
   b52c4:	4806      	ldr	r0, [pc, #24]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b52c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b52ca:	ee17 1a90 	vmov	r1, s15
   b52ce:	f000 ff9b 	bl	b6208 <_ZN9SeeedOLED9putNumberEl>
   SeeedOled.putString(" pcs/L");
 }
}
   b52d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   SeeedOled.putString(" pcs/L");
   b52d6:	490a      	ldr	r1, [pc, #40]	; (b5300 <_Z13updateDisplayiii6String+0xdc>)
   b52d8:	4801      	ldr	r0, [pc, #4]	; (b52e0 <_Z13updateDisplayiii6String+0xbc>)
   b52da:	f000 bf88 	b.w	b61ee <_ZN9SeeedOLED9putStringEPKc>
}
   b52de:	bd70      	pop	{r4, r5, r6, pc}
   b52e0:	2003e6c0 	.word	0x2003e6c0
   b52e4:	000b906c 	.word	0x000b906c
   b52e8:	000b9073 	.word	0x000b9073
   b52ec:	000b9075 	.word	0x000b9075
   b52f0:	2003e69c 	.word	0x2003e69c
   b52f4:	000b901f 	.word	0x000b901f
   b52f8:	000b9080 	.word	0x000b9080
   b52fc:	000b908d 	.word	0x000b908d
   b5300:	000b9032 	.word	0x000b9032

000b5304 <setup>:



// setup() runs once, when the device is first turned on.
void setup() {
   b5304:	b508      	push	{r3, lr}

  //Dust detector setup
  Serial.begin(9600);
   b5306:	f002 fb0d 	bl	b7924 <_Z16_fetch_usbserialv>
   b530a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b530e:	f002 fafd 	bl	b790c <_ZN9USBSerial5beginEl>

  pinMode(DUST_SENSOR_PIN, INPUT);
   b5312:	2100      	movs	r1, #0
   b5314:	2004      	movs	r0, #4
   b5316:	f002 fc43 	bl	b7ba0 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b531a:	f001 f927 	bl	b656c <HAL_Timer_Get_Milli_Seconds>
  lastInterval = millis();  
   b531e:	4b28      	ldr	r3, [pc, #160]	; (b53c0 <setup+0xbc>)
   b5320:	6018      	str	r0, [r3, #0]
  
  pinMode(led, OUTPUT);
   b5322:	4b28      	ldr	r3, [pc, #160]	; (b53c4 <setup+0xc0>)
   b5324:	2101      	movs	r1, #1
   b5326:	8818      	ldrh	r0, [r3, #0]
   b5328:	f002 fc3a 	bl	b7ba0 <pinMode>

  //Air Quality Sensor setup
  if (aqSensor.init())
   b532c:	4826      	ldr	r0, [pc, #152]	; (b53c8 <setup+0xc4>)
   b532e:	f000 f9ca 	bl	b56c6 <_ZN16AirQualitySensor4initEv>
   b5332:	2800      	cmp	r0, #0
   b5334:	d03b      	beq.n	b53ae <setup+0xaa>
 {
   Serial.println("Air Quality Sensor ready.");
   b5336:	f002 faf5 	bl	b7924 <_Z16_fetch_usbserialv>
   b533a:	4924      	ldr	r1, [pc, #144]	; (b53cc <setup+0xc8>)
 }
 else
 {
   Serial.println("Air Quality Sensor ERROR!");
   b533c:	f002 f889 	bl	b7452 <_ZN5Print7printlnEPKc>
 }


  //Measuring temperature, humidity and pressure
  if (bme.begin()){
   b5340:	4823      	ldr	r0, [pc, #140]	; (b53d0 <setup+0xcc>)
   b5342:	f000 fea2 	bl	b608a <_ZN15Adafruit_BME2805beginEv>
   b5346:	2800      	cmp	r0, #0
   b5348:	d035      	beq.n	b53b6 <setup+0xb2>
    Serial.println("BME280 Sensor ready.");
   b534a:	f002 faeb 	bl	b7924 <_Z16_fetch_usbserialv>
   b534e:	4921      	ldr	r1, [pc, #132]	; (b53d4 <setup+0xd0>)
  }
  else{
    Serial.println("BME280 Sensor ERROR!");
   b5350:	f002 f87f 	bl	b7452 <_ZN5Print7printlnEPKc>
  }


  //Grove OLED device setup
  Wire.begin();
   b5354:	f002 fc92 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b5358:	f001 fece 	bl	b70f8 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   b535c:	481e      	ldr	r0, [pc, #120]	; (b53d8 <setup+0xd4>)
   b535e:	f000 fec3 	bl	b60e8 <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
   b5362:	481d      	ldr	r0, [pc, #116]	; (b53d8 <setup+0xd4>)
   b5364:	f000 ff22 	bl	b61ac <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   b5368:	481b      	ldr	r0, [pc, #108]	; (b53d8 <setup+0xd4>)
   b536a:	f000 ff84 	bl	b6276 <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   b536e:	481a      	ldr	r0, [pc, #104]	; (b53d8 <setup+0xd4>)
   b5370:	f000 fecc 	bl	b610c <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
   b5374:	2200      	movs	r2, #0
   b5376:	4818      	ldr	r0, [pc, #96]	; (b53d8 <setup+0xd4>)
   b5378:	2102      	movs	r1, #2
   b537a:	f000 fed2 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
   b537e:	4917      	ldr	r1, [pc, #92]	; (b53dc <setup+0xd8>)
   b5380:	4815      	ldr	r0, [pc, #84]	; (b53d8 <setup+0xd4>)
   b5382:	f000 ff34 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   b5386:	2200      	movs	r2, #0
   b5388:	4813      	ldr	r0, [pc, #76]	; (b53d8 <setup+0xd4>)
   b538a:	2103      	movs	r1, #3
   b538c:	f000 fec9 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Air Quality");
   b5390:	4913      	ldr	r1, [pc, #76]	; (b53e0 <setup+0xdc>)
   b5392:	4811      	ldr	r0, [pc, #68]	; (b53d8 <setup+0xd4>)
   b5394:	f000 ff2b 	bl	b61ee <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   b5398:	480f      	ldr	r0, [pc, #60]	; (b53d8 <setup+0xd4>)
   b539a:	2104      	movs	r1, #4
   b539c:	2200      	movs	r2, #0
   b539e:	f000 fec0 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Monitor");

}
   b53a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SeeedOled.putString("Monitor");
   b53a6:	490f      	ldr	r1, [pc, #60]	; (b53e4 <setup+0xe0>)
   b53a8:	480b      	ldr	r0, [pc, #44]	; (b53d8 <setup+0xd4>)
   b53aa:	f000 bf20 	b.w	b61ee <_ZN9SeeedOLED9putStringEPKc>
   Serial.println("Air Quality Sensor ERROR!");
   b53ae:	f002 fab9 	bl	b7924 <_Z16_fetch_usbserialv>
   b53b2:	490d      	ldr	r1, [pc, #52]	; (b53e8 <setup+0xe4>)
   b53b4:	e7c2      	b.n	b533c <setup+0x38>
    Serial.println("BME280 Sensor ERROR!");
   b53b6:	f002 fab5 	bl	b7924 <_Z16_fetch_usbserialv>
   b53ba:	490c      	ldr	r1, [pc, #48]	; (b53ec <setup+0xe8>)
   b53bc:	e7c8      	b.n	b5350 <setup+0x4c>
   b53be:	bf00      	nop
   b53c0:	2003e6a4 	.word	0x2003e6a4
   b53c4:	2003e5c4 	.word	0x2003e5c4
   b53c8:	2003e63c 	.word	0x2003e63c
   b53cc:	000b9094 	.word	0x000b9094
   b53d0:	2003e658 	.word	0x2003e658
   b53d4:	000b90c8 	.word	0x000b90c8
   b53d8:	2003e6c0 	.word	0x2003e6c0
   b53dc:	000b90f2 	.word	0x000b90f2
   b53e0:	000b90fb 	.word	0x000b90fb
   b53e4:	000b9107 	.word	0x000b9107
   b53e8:	000b90ae 	.word	0x000b90ae
   b53ec:	000b90dd 	.word	0x000b90dd

000b53f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b53f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b53f2:	4604      	mov	r4, r0
   b53f4:	4615      	mov	r5, r2
   b53f6:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b53f8:	f001 f864 	bl	b64c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b53fc:	9901      	ldr	r1, [sp, #4]
   b53fe:	2201      	movs	r2, #1
   b5400:	4620      	mov	r0, r4
   b5402:	f000 ffcd 	bl	b63a0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b5406:	4620      	mov	r0, r4
   b5408:	213a      	movs	r1, #58	; 0x3a
   b540a:	f000 ff7d 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b540e:	4904      	ldr	r1, [pc, #16]	; (b5420 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b5410:	462a      	mov	r2, r5
   b5412:	4620      	mov	r0, r4
	}
   b5414:	b003      	add	sp, #12
   b5416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b541a:	f000 bfb4 	b.w	b6386 <_ZN10JsonWriter13insertsprintfEPKcz>
   b541e:	bf00      	nop
   b5420:	000b9185 	.word	0x000b9185

000b5424 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b5424:	b513      	push	{r0, r1, r4, lr}
   b5426:	4604      	mov	r4, r0
   b5428:	ed8d 0a00 	vstr	s0, [sp]
   b542c:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b542e:	f001 f849 	bl	b64c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b5432:	9901      	ldr	r1, [sp, #4]
   b5434:	2201      	movs	r2, #1
   b5436:	4620      	mov	r0, r4
   b5438:	f000 ffb2 	bl	b63a0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b543c:	4620      	mov	r0, r4
   b543e:	213a      	movs	r1, #58	; 0x3a
   b5440:	f000 ff62 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b5444:	ed9d 0a00 	vldr	s0, [sp]
   b5448:	4620      	mov	r0, r4
	}
   b544a:	b002      	add	sp, #8
   b544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		insertValue(value);
   b5450:	f001 b85c 	b.w	b650c <_ZN10JsonWriter11insertValueEf>

000b5454 <_Z18createEventPayloadiii6String>:
{
   b5454:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5456:	b0d3      	sub	sp, #332	; 0x14c
   b5458:	4607      	mov	r7, r0
   b545a:	460e      	mov	r6, r1
   b545c:	4615      	mov	r5, r2
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   b545e:	a912      	add	r1, sp, #72	; 0x48
   b5460:	f44f 7280 	mov.w	r2, #256	; 0x100
   b5464:	a806      	add	r0, sp, #24
   b5466:	461c      	mov	r4, r3
   b5468:	f000 ff3c 	bl	b62e4 <_ZN10JsonWriterC1EPcj>
   b546c:	4b39      	ldr	r3, [pc, #228]	; (b5554 <_Z18createEventPayloadiii6String+0x100>)
   b546e:	9306      	str	r3, [sp, #24]
	bool startObject() { return startObjectOrArray('{', '}'); };
   b5470:	227d      	movs	r2, #125	; 0x7d
   b5472:	217b      	movs	r1, #123	; 0x7b
   b5474:	a806      	add	r0, sp, #24
   b5476:	f001 f830 	bl	b64da <_ZN10JsonWriter18startObjectOrArrayEcc>
    jw.insertKeyValue("temp", temp);
   b547a:	4937      	ldr	r1, [pc, #220]	; (b5558 <_Z18createEventPayloadiii6String+0x104>)
   b547c:	463a      	mov	r2, r7
   b547e:	a806      	add	r0, sp, #24
   b5480:	f7ff ffb6 	bl	b53f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   b5484:	4935      	ldr	r1, [pc, #212]	; (b555c <_Z18createEventPayloadiii6String+0x108>)
   b5486:	4632      	mov	r2, r6
   b5488:	a806      	add	r0, sp, #24
   b548a:	f7ff ffb1 	bl	b53f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("pressure", pressure);
   b548e:	462a      	mov	r2, r5
   b5490:	4933      	ldr	r1, [pc, #204]	; (b5560 <_Z18createEventPayloadiii6String+0x10c>)
   b5492:	a806      	add	r0, sp, #24
   b5494:	f7ff ffac 	bl	b53f0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("air-quality", airQuality);
   b5498:	4621      	mov	r1, r4
   b549a:	a802      	add	r0, sp, #8
   b549c:	f002 f958 	bl	b7750 <_ZN6StringC1ERKS_>
		insertCheckSeparator();
   b54a0:	a806      	add	r0, sp, #24
   b54a2:	f001 f80f 	bl	b64c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b54a6:	2201      	movs	r2, #1
   b54a8:	492e      	ldr	r1, [pc, #184]	; (b5564 <_Z18createEventPayloadiii6String+0x110>)
   b54aa:	a806      	add	r0, sp, #24
   b54ac:	f000 ff78 	bl	b63a0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b54b0:	213a      	movs	r1, #58	; 0x3a
   b54b2:	a806      	add	r0, sp, #24
   b54b4:	f000 ff28 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
   b54b8:	9902      	ldr	r1, [sp, #8]
   b54ba:	2201      	movs	r2, #1
   b54bc:	a806      	add	r0, sp, #24
   b54be:	f000 ff6f 	bl	b63a0 <_ZN10JsonWriter12insertStringEPKcb>
   b54c2:	a802      	add	r0, sp, #8
   b54c4:	f002 f8d6 	bl	b7674 <_ZN6StringD1Ev>
    if (lowpulseoccupancy > 0)
   b54c8:	4b27      	ldr	r3, [pc, #156]	; (b5568 <_Z18createEventPayloadiii6String+0x114>)
   b54ca:	681c      	ldr	r4, [r3, #0]
   b54cc:	b1f4      	cbz	r4, b550c <_Z18createEventPayloadiii6String+0xb8>
		insertCheckSeparator();
   b54ce:	a806      	add	r0, sp, #24
   b54d0:	f000 fff8 	bl	b64c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b54d4:	2201      	movs	r2, #1
   b54d6:	4925      	ldr	r1, [pc, #148]	; (b556c <_Z18createEventPayloadiii6String+0x118>)
   b54d8:	a806      	add	r0, sp, #24
   b54da:	f000 ff61 	bl	b63a0 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b54de:	213a      	movs	r1, #58	; 0x3a
   b54e0:	a806      	add	r0, sp, #24
   b54e2:	f000 ff11 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b54e6:	4922      	ldr	r1, [pc, #136]	; (b5570 <_Z18createEventPayloadiii6String+0x11c>)
   b54e8:	4622      	mov	r2, r4
   b54ea:	a806      	add	r0, sp, #24
   b54ec:	f000 ff4b 	bl	b6386 <_ZN10JsonWriter13insertsprintfEPKcz>
      jw.insertKeyValue("dust-ratio", ratio);
   b54f0:	4b20      	ldr	r3, [pc, #128]	; (b5574 <_Z18createEventPayloadiii6String+0x120>)
   b54f2:	4921      	ldr	r1, [pc, #132]	; (b5578 <_Z18createEventPayloadiii6String+0x124>)
   b54f4:	ed93 0a00 	vldr	s0, [r3]
   b54f8:	a806      	add	r0, sp, #24
   b54fa:	f7ff ff93 	bl	b5424 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
      jw.insertKeyValue("dust-concentration", concentration);
   b54fe:	4b1f      	ldr	r3, [pc, #124]	; (b557c <_Z18createEventPayloadiii6String+0x128>)
   b5500:	491f      	ldr	r1, [pc, #124]	; (b5580 <_Z18createEventPayloadiii6String+0x12c>)
   b5502:	ed93 0a00 	vldr	s0, [r3]
   b5506:	a806      	add	r0, sp, #24
   b5508:	f7ff ff8c 	bl	b5424 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   b550c:	a806      	add	r0, sp, #24
   b550e:	f000 ff09 	bl	b6324 <_ZN10JsonWriter19finishObjectOrArrayEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5512:	4b1c      	ldr	r3, [pc, #112]	; (b5584 <_Z18createEventPayloadiii6String+0x130>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5514:	9a07      	ldr	r2, [sp, #28]
   b5516:	781b      	ldrb	r3, [r3, #0]
   b5518:	f88d 3000 	strb.w	r3, [sp]
   b551c:	491a      	ldr	r1, [pc, #104]	; (b5588 <_Z18createEventPayloadiii6String+0x134>)
   b551e:	233c      	movs	r3, #60	; 0x3c
   b5520:	a802      	add	r0, sp, #8
   b5522:	f001 fc01 	bl	b6d28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5526:	9c03      	ldr	r4, [sp, #12]
   b5528:	b17c      	cbz	r4, b554a <_Z18createEventPayloadiii6String+0xf6>
      if (--_M_use_count == 0)
   b552a:	6863      	ldr	r3, [r4, #4]
   b552c:	3b01      	subs	r3, #1
   b552e:	6063      	str	r3, [r4, #4]
   b5530:	b95b      	cbnz	r3, b554a <_Z18createEventPayloadiii6String+0xf6>
          _M_dispose();
   b5532:	6823      	ldr	r3, [r4, #0]
   b5534:	4620      	mov	r0, r4
   b5536:	689b      	ldr	r3, [r3, #8]
   b5538:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b553a:	68a3      	ldr	r3, [r4, #8]
   b553c:	3b01      	subs	r3, #1
   b553e:	60a3      	str	r3, [r4, #8]
   b5540:	b91b      	cbnz	r3, b554a <_Z18createEventPayloadiii6String+0xf6>
            _M_destroy();
   b5542:	6823      	ldr	r3, [r4, #0]
   b5544:	4620      	mov	r0, r4
   b5546:	68db      	ldr	r3, [r3, #12]
   b5548:	4798      	blx	r3
  JsonWriterStatic<256> jw;
   b554a:	a806      	add	r0, sp, #24
   b554c:	f7ff fd3e 	bl	b4fcc <_ZN16JsonWriterStaticILj256EED1Ev>
}
   b5550:	b053      	add	sp, #332	; 0x14c
   b5552:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5554:	000b91a0 	.word	0x000b91a0
   b5558:	000b910f 	.word	0x000b910f
   b555c:	000b9114 	.word	0x000b9114
   b5560:	000b911d 	.word	0x000b911d
   b5564:	000b9126 	.word	0x000b9126
   b5568:	2003e6ac 	.word	0x2003e6ac
   b556c:	000b9132 	.word	0x000b9132
   b5570:	000b9011 	.word	0x000b9011
   b5574:	2003e6b0 	.word	0x2003e6b0
   b5578:	000b913b 	.word	0x000b913b
   b557c:	2003e69c 	.word	0x2003e69c
   b5580:	000b9146 	.word	0x000b9146
   b5584:	2003e638 	.word	0x2003e638
   b5588:	000b9159 	.word	0x000b9159

000b558c <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b558c:	b530      	push	{r4, r5, lr}
  // The core of your code will likely live here.
  

  //flashing light
  digitalWrite(led, HIGH);
   b558e:	4c39      	ldr	r4, [pc, #228]	; (b5674 <loop+0xe8>)

  //Dust detector loop
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   b5590:	4d39      	ldr	r5, [pc, #228]	; (b5678 <loop+0xec>)
  digitalWrite(led, HIGH);
   b5592:	8820      	ldrh	r0, [r4, #0]
void loop() {
   b5594:	b08f      	sub	sp, #60	; 0x3c
  digitalWrite(led, HIGH);
   b5596:	2101      	movs	r1, #1
   b5598:	f002 fb13 	bl	b7bc2 <digitalWrite>
  delay(1000);
   b559c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b55a0:	f001 fa40 	bl	b6a24 <delay>
  digitalWrite(led, LOW);
   b55a4:	8820      	ldrh	r0, [r4, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b55a6:	4c35      	ldr	r4, [pc, #212]	; (b567c <loop+0xf0>)
  digitalWrite(led, LOW);
   b55a8:	2100      	movs	r1, #0
   b55aa:	f002 fb0a 	bl	b7bc2 <digitalWrite>
  delay(1000);
   b55ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b55b2:	f001 fa37 	bl	b6a24 <delay>
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b55b6:	2100      	movs	r1, #0
   b55b8:	2004      	movs	r0, #4
   b55ba:	f002 fb45 	bl	b7c48 <pulseIn>
   b55be:	4b30      	ldr	r3, [pc, #192]	; (b5680 <loop+0xf4>)
   b55c0:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b55c2:	6823      	ldr	r3, [r4, #0]
   b55c4:	4418      	add	r0, r3
   b55c6:	6020      	str	r0, [r4, #0]
   b55c8:	f000 ffd0 	bl	b656c <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   b55cc:	682b      	ldr	r3, [r5, #0]
   b55ce:	1ac0      	subs	r0, r0, r3
   b55d0:	f247 5330 	movw	r3, #30000	; 0x7530
   b55d4:	4298      	cmp	r0, r3
   b55d6:	d906      	bls.n	b55e6 <loop+0x5a>
  {
    getDustSensorReadings();
   b55d8:	f7ff fd1e 	bl	b5018 <_Z21getDustSensorReadingsv>

    lowpulseoccupancy = 0;
   b55dc:	2300      	movs	r3, #0
   b55de:	6023      	str	r3, [r4, #0]
   b55e0:	f000 ffc4 	bl	b656c <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   b55e4:	6028      	str	r0, [r5, #0]
  }

  //Air quality sensor loop
  String quality = getAirQuality();
   b55e6:	a806      	add	r0, sp, #24
   b55e8:	f7ff fdbe 	bl	b5168 <_Z13getAirQualityv>
  Serial.printlnf("Air Quality: %s", quality.c_str());
   b55ec:	f002 f99a 	bl	b7924 <_Z16_fetch_usbserialv>
   b55f0:	9a06      	ldr	r2, [sp, #24]
   b55f2:	4924      	ldr	r1, [pc, #144]	; (b5684 <loop+0xf8>)
   b55f4:	f7ff fcff 	bl	b4ff6 <_ZN5Print8printlnfEPKcz>

  //Measuring temperature, humidity and pressure loop

  int temp, pressure, humidity;

  getBMEValues(temp, pressure, humidity);
   b55f8:	aa05      	add	r2, sp, #20
   b55fa:	a904      	add	r1, sp, #16
   b55fc:	a803      	add	r0, sp, #12
   b55fe:	f7ff fded 	bl	b51dc <_Z12getBMEValuesRiS_S_>
  Serial.printlnf("Temp: %d", temp);
   b5602:	f002 f98f 	bl	b7924 <_Z16_fetch_usbserialv>
   b5606:	9a03      	ldr	r2, [sp, #12]
   b5608:	491f      	ldr	r1, [pc, #124]	; (b5688 <loop+0xfc>)
   b560a:	f7ff fcf4 	bl	b4ff6 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Pressure: %d", pressure);
   b560e:	f002 f989 	bl	b7924 <_Z16_fetch_usbserialv>
   b5612:	9a04      	ldr	r2, [sp, #16]
   b5614:	491d      	ldr	r1, [pc, #116]	; (b568c <loop+0x100>)
   b5616:	f7ff fcee 	bl	b4ff6 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Humidity: %d", humidity);
   b561a:	f002 f983 	bl	b7924 <_Z16_fetch_usbserialv>
   b561e:	9a05      	ldr	r2, [sp, #20]
   b5620:	491b      	ldr	r1, [pc, #108]	; (b5690 <loop+0x104>)
   b5622:	f7ff fce8 	bl	b4ff6 <_ZN5Print8printlnfEPKcz>


  //Display loop
  updateDisplay(temp, humidity, pressure, quality);
   b5626:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
   b562a:	9c03      	ldr	r4, [sp, #12]
   b562c:	9201      	str	r2, [sp, #4]
   b562e:	a906      	add	r1, sp, #24
   b5630:	a80a      	add	r0, sp, #40	; 0x28
   b5632:	f002 f88d 	bl	b7750 <_ZN6StringC1ERKS_>
   b5636:	ab0a      	add	r3, sp, #40	; 0x28
   b5638:	9a01      	ldr	r2, [sp, #4]
   b563a:	4629      	mov	r1, r5
   b563c:	4620      	mov	r0, r4
   b563e:	f7ff fdf1 	bl	b5224 <_Z13updateDisplayiii6String>
   b5642:	a80a      	add	r0, sp, #40	; 0x28
   b5644:	f002 f816 	bl	b7674 <_ZN6StringD1Ev>

  //Publish data
  createEventPayload(temp, humidity, pressure, quality);
   b5648:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
   b564c:	9c03      	ldr	r4, [sp, #12]
   b564e:	9201      	str	r2, [sp, #4]
   b5650:	a906      	add	r1, sp, #24
   b5652:	a80a      	add	r0, sp, #40	; 0x28
   b5654:	f002 f87c 	bl	b7750 <_ZN6StringC1ERKS_>
   b5658:	9a01      	ldr	r2, [sp, #4]
   b565a:	ab0a      	add	r3, sp, #40	; 0x28
   b565c:	4629      	mov	r1, r5
   b565e:	4620      	mov	r0, r4
   b5660:	f7ff fef8 	bl	b5454 <_Z18createEventPayloadiii6String>
   b5664:	a80a      	add	r0, sp, #40	; 0x28
   b5666:	f002 f805 	bl	b7674 <_ZN6StringD1Ev>
  String quality = getAirQuality();
   b566a:	a806      	add	r0, sp, #24
   b566c:	f002 f802 	bl	b7674 <_ZN6StringD1Ev>
   b5670:	b00f      	add	sp, #60	; 0x3c
   b5672:	bd30      	pop	{r4, r5, pc}
   b5674:	2003e5c4 	.word	0x2003e5c4
   b5678:	2003e6a4 	.word	0x2003e6a4
   b567c:	2003e6ac 	.word	0x2003e6ac
   b5680:	2003e6a0 	.word	0x2003e6a0
   b5684:	000b9162 	.word	0x000b9162
   b5688:	000b9172 	.word	0x000b9172
   b568c:	000b917b 	.word	0x000b917b
   b5690:	000b9188 	.word	0x000b9188

000b5694 <_GLOBAL__sub_I_aqSensor>:
   b5694:	b508      	push	{r3, lr}
        val_(val) {
   b5696:	4b06      	ldr	r3, [pc, #24]	; (b56b0 <_GLOBAL__sub_I_aqSensor+0x1c>)
AirQualitySensor aqSensor(AQS_PIN);
   b5698:	4806      	ldr	r0, [pc, #24]	; (b56b4 <_GLOBAL__sub_I_aqSensor+0x20>)
   b569a:	2201      	movs	r2, #1
   b569c:	701a      	strb	r2, [r3, #0]
   b569e:	2111      	movs	r1, #17
   b56a0:	f000 f80c 	bl	b56bc <_ZN16AirQualitySensorC1Ei>
   b56a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_BME280 bme;
   b56a8:	4803      	ldr	r0, [pc, #12]	; (b56b8 <_GLOBAL__sub_I_aqSensor+0x24>)
   b56aa:	f000 b8a7 	b.w	b57fc <_ZN15Adafruit_BME280C1Ev>
   b56ae:	bf00      	nop
   b56b0:	2003e638 	.word	0x2003e638
   b56b4:	2003e63c 	.word	0x2003e63c
   b56b8:	2003e658 	.word	0x2003e658

000b56bc <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   b56bc:	2200      	movs	r2, #0
   b56be:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b56c2:	6001      	str	r1, [r0, #0]
    // do nothing
}
   b56c4:	4770      	bx	lr

000b56c6 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   b56c6:	b510      	push	{r4, lr}
   b56c8:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   b56ca:	8800      	ldrh	r0, [r0, #0]
   b56cc:	f002 faa5 	bl	b7c1a <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   b56d0:	f240 3312 	movw	r3, #786	; 0x312
   b56d4:	f1a0 020b 	sub.w	r2, r0, #11
   b56d8:	429a      	cmp	r2, r3
   b56da:	d807      	bhi.n	b56ec <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
        _lastVoltage = _currentVoltage;
   b56dc:	e9c4 0001 	strd	r0, r0, [r4, #4]

        _standardVoltage = initVoltage;
   b56e0:	60e0      	str	r0, [r4, #12]
   b56e2:	f000 ff43 	bl	b656c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   b56e6:	61a0      	str	r0, [r4, #24]

        return true;
   b56e8:	2001      	movs	r0, #1
    }
    else {
        return false;
    }
}
   b56ea:	bd10      	pop	{r4, pc}
        return false;
   b56ec:	2000      	movs	r0, #0
   b56ee:	e7fc      	b.n	b56ea <_ZN16AirQualitySensor4initEv+0x24>

000b56f0 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   b56f0:	b510      	push	{r4, lr}
   b56f2:	4604      	mov	r4, r0
   b56f4:	f000 ff3a 	bl	b656c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   b56f8:	69a3      	ldr	r3, [r4, #24]
   b56fa:	1ac0      	subs	r0, r0, r3
   b56fc:	4b07      	ldr	r3, [pc, #28]	; (b571c <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   b56fe:	4298      	cmp	r0, r3
   b5700:	d90a      	bls.n	b5718 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   b5702:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b5706:	fb93 f3f2 	sdiv	r3, r3, r2
   b570a:	60e3      	str	r3, [r4, #12]
   b570c:	f000 ff2e 	bl	b656c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   b5710:	2300      	movs	r3, #0
        _volSumCount = 0;
   b5712:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   b5716:	61a0      	str	r0, [r4, #24]
    }
}
   b5718:	bd10      	pop	{r4, pc}
   b571a:	bf00      	nop
   b571c:	0007a120 	.word	0x0007a120

000b5720 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   b5720:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   b5722:	6883      	ldr	r3, [r0, #8]
   b5724:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   b5726:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   b5728:	8800      	ldrh	r0, [r0, #0]
   b572a:	f002 fa76 	bl	b7c1a <analogRead>
    _voltageSum += _currentVoltage;
   b572e:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   b5730:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   b5732:	4418      	add	r0, r3
    _volSumCount += 1;
   b5734:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   b5736:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   b5738:	3301      	adds	r3, #1
   b573a:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   b573c:	4620      	mov	r0, r4
   b573e:	f7ff ffd7 	bl	b56f0 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   b5742:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   b5746:	1a51      	subs	r1, r2, r1
   b5748:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   b574c:	dc10      	bgt.n	b5770 <_ZN16AirQualitySensor5slopeEv+0x50>
   b574e:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b5752:	dc0d      	bgt.n	b5770 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   b5754:	68e3      	ldr	r3, [r4, #12]
   b5756:	1ad3      	subs	r3, r2, r3
   b5758:	2b96      	cmp	r3, #150	; 0x96
   b575a:	dc0b      	bgt.n	b5774 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   b575c:	29c8      	cmp	r1, #200	; 0xc8
   b575e:	dd02      	ble.n	b5766 <_ZN16AirQualitySensor5slopeEv+0x46>
   b5760:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b5764:	d108      	bne.n	b5778 <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   b5766:	2b32      	cmp	r3, #50	; 0x32
   b5768:	bfcc      	ite	gt
   b576a:	2002      	movgt	r0, #2
   b576c:	2003      	movle	r0, #3
}
   b576e:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   b5770:	2000      	movs	r0, #0
   b5772:	e7fc      	b.n	b576e <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   b5774:	2001      	movs	r0, #1
   b5776:	e7fa      	b.n	b576e <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   b5778:	2002      	movs	r0, #2
   b577a:	e7f8      	b.n	b576e <_ZN16AirQualitySensor5slopeEv+0x4e>

000b577c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b577c:	4770      	bx	lr

000b577e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b577e:	b510      	push	{r4, lr}
  }
   b5780:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5782:	4604      	mov	r4, r0
  }
   b5784:	f7ff fc17 	bl	b4fb6 <_ZdlPvj>
   b5788:	4620      	mov	r0, r4
   b578a:	bd10      	pop	{r4, pc}

000b578c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b578c:	b40e      	push	{r1, r2, r3}
   b578e:	b503      	push	{r0, r1, lr}
   b5790:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b5792:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5794:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5798:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b579a:	f001 fe82 	bl	b74a2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b579e:	b002      	add	sp, #8
   b57a0:	f85d eb04 	ldr.w	lr, [sp], #4
   b57a4:	b003      	add	sp, #12
   b57a6:	4770      	bx	lr

000b57a8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b57a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b57aa:	4604      	mov	r4, r0
   b57ac:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b57ae:	7922      	ldrb	r2, [r4, #4]
   b57b0:	68a3      	ldr	r3, [r4, #8]
   b57b2:	b132      	cbz	r2, b57c2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b57b4:	b9a3      	cbnz	r3, b57e0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b57b6:	490b      	ldr	r1, [pc, #44]	; (b57e4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b57b8:	b002      	add	sp, #8
   b57ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b57be:	f001 be35 	b.w	b742c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b57c2:	4a09      	ldr	r2, [pc, #36]	; (b57e8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b57c4:	7b26      	ldrb	r6, [r4, #12]
   b57c6:	4d09      	ldr	r5, [pc, #36]	; (b57ec <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b57c8:	4909      	ldr	r1, [pc, #36]	; (b57f0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b57ca:	7b64      	ldrb	r4, [r4, #13]
   b57cc:	2e01      	cmp	r6, #1
   b57ce:	bf18      	it	ne
   b57d0:	4629      	movne	r1, r5
   b57d2:	e9cd 1400 	strd	r1, r4, [sp]
   b57d6:	4907      	ldr	r1, [pc, #28]	; (b57f4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b57d8:	f7ff ffd8 	bl	b578c <_ZN5Print6printfEPKcz>
  }
   b57dc:	b002      	add	sp, #8
   b57de:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b57e0:	4a05      	ldr	r2, [pc, #20]	; (b57f8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b57e2:	e7ef      	b.n	b57c4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b57e4:	000b91c9 	.word	0x000b91c9
   b57e8:	000b9072 	.word	0x000b9072
   b57ec:	000b91c5 	.word	0x000b91c5
   b57f0:	000b91c1 	.word	0x000b91c1
   b57f4:	000b91df 	.word	0x000b91df
   b57f8:	000b91b8 	.word	0x000b91b8

000b57fc <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b57fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5800:	6103      	str	r3, [r0, #16]
{ }
   b5802:	4770      	bx	lr

000b5804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5804:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5806:	4c0b      	ldr	r4, [pc, #44]	; (b5834 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5808:	7821      	ldrb	r1, [r4, #0]
   b580a:	f3bf 8f5b 	dmb	ish
   b580e:	f011 0101 	ands.w	r1, r1, #1
   b5812:	d10b      	bne.n	b582c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5814:	4620      	mov	r0, r4
   b5816:	9101      	str	r1, [sp, #4]
   b5818:	f7ff fbcf 	bl	b4fba <__cxa_guard_acquire>
   b581c:	9901      	ldr	r1, [sp, #4]
   b581e:	b128      	cbz	r0, b582c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5820:	4805      	ldr	r0, [pc, #20]	; (b5838 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5822:	f001 fe7b 	bl	b751c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5826:	4620      	mov	r0, r4
   b5828:	f7ff fbcc 	bl	b4fc4 <__cxa_guard_release>
        return instance;
    }
   b582c:	4802      	ldr	r0, [pc, #8]	; (b5838 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b582e:	b002      	add	sp, #8
   b5830:	bd10      	pop	{r4, pc}
   b5832:	bf00      	nop
   b5834:	2003e6b4 	.word	0x2003e6b4
   b5838:	2003e6b8 	.word	0x2003e6b8

000b583c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b583c:	b508      	push	{r3, lr}
        instance().endTransaction();
   b583e:	f7ff ffe1 	bl	b5804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b5842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b5846:	f001 be87 	b.w	b7558 <_ZN8SPIClass14endTransactionEv>

000b584a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b584a:	b507      	push	{r0, r1, r2, lr}
   b584c:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b584e:	f7ff ffd9 	bl	b5804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5852:	9901      	ldr	r1, [sp, #4]
    }
   b5854:	b003      	add	sp, #12
   b5856:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b585a:	f001 be97 	b.w	b758c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b585e <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b585e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b5862:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5866:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b5868:	4605      	mov	r5, r0
   b586a:	460f      	mov	r7, r1
    if (_sck == -1)
   b586c:	d106      	bne.n	b587c <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b586e:	f7ff ffc9 	bl	b5804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5872:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b5874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5878:	f001 bef6 	b.w	b7668 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b587c:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b587e:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b5880:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b5884:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b5888:	2100      	movs	r1, #0
   b588a:	b280      	uxth	r0, r0
   b588c:	f002 f999 	bl	b7bc2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b5890:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b5894:	fa08 f106 	lsl.w	r1, r8, r6
   b5898:	4039      	ands	r1, r7
   b589a:	b280      	uxth	r0, r0
   b589c:	f002 f991 	bl	b7bc2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b58a0:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b58a4:	2101      	movs	r1, #1
   b58a6:	b280      	uxth	r0, r0
   b58a8:	f002 f98b 	bl	b7bc2 <digitalWrite>
        if (digitalRead(_miso))
   b58ac:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b58b0:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b58b2:	b280      	uxth	r0, r0
        reply <<= 1;
   b58b4:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b58b6:	f002 f99d 	bl	b7bf4 <digitalRead>
   b58ba:	b108      	cbz	r0, b58c0 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b58bc:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b58c0:	3e01      	subs	r6, #1
   b58c2:	d2df      	bcs.n	b5884 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b58c4:	4620      	mov	r0, r4
   b58c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b58cc <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b58cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b58ce:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b58d2:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b58d4:	4604      	mov	r4, r0
   b58d6:	460e      	mov	r6, r1
   b58d8:	4615      	mov	r5, r2
    if (_cs == -1) {
   b58da:	d113      	bne.n	b5904 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b58dc:	7901      	ldrb	r1, [r0, #4]
   b58de:	6800      	ldr	r0, [r0, #0]
   b58e0:	f001 fc3c 	bl	b715c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b58e4:	6820      	ldr	r0, [r4, #0]
   b58e6:	6803      	ldr	r3, [r0, #0]
   b58e8:	4631      	mov	r1, r6
   b58ea:	689b      	ldr	r3, [r3, #8]
   b58ec:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b58ee:	6820      	ldr	r0, [r4, #0]
   b58f0:	6803      	ldr	r3, [r0, #0]
   b58f2:	4629      	mov	r1, r5
   b58f4:	689b      	ldr	r3, [r3, #8]
   b58f6:	4798      	blx	r3
        _wire -> endTransmission();
   b58f8:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b58fa:	b004      	add	sp, #16
   b58fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b5900:	f001 bc37 	b.w	b7172 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b5904:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5908:	3301      	adds	r3, #1
   b590a:	d10c      	bne.n	b5926 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b590c:	4b16      	ldr	r3, [pc, #88]	; (b5968 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b590e:	9300      	str	r3, [sp, #0]
   b5910:	2300      	movs	r3, #0
   b5912:	f88d 3004 	strb.w	r3, [sp, #4]
   b5916:	4b15      	ldr	r3, [pc, #84]	; (b596c <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b5918:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b591a:	4668      	mov	r0, sp
   b591c:	2301      	movs	r3, #1
   b591e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5922:	f7ff ff92 	bl	b584a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5926:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b592a:	2100      	movs	r1, #0
   b592c:	b280      	uxth	r0, r0
   b592e:	f002 f948 	bl	b7bc2 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b5932:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5936:	4620      	mov	r0, r4
   b5938:	f7ff ff91 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b593c:	4629      	mov	r1, r5
   b593e:	4620      	mov	r0, r4
   b5940:	f7ff ff8d 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b5944:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5948:	2101      	movs	r1, #1
   b594a:	b280      	uxth	r0, r0
   b594c:	f002 f939 	bl	b7bc2 <digitalWrite>
    if (_sck == -1)
   b5950:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5954:	3301      	adds	r3, #1
   b5956:	d104      	bne.n	b5962 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b5958:	b004      	add	sp, #16
   b595a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b595e:	f7ff bf6d 	b.w	b583c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b5962:	b004      	add	sp, #16
   b5964:	bd70      	pop	{r4, r5, r6, pc}
   b5966:	bf00      	nop
   b5968:	000b9204 	.word	0x000b9204
   b596c:	0007a120 	.word	0x0007a120

000b5970 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b5970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b5972:	00db      	lsls	r3, r3, #3
   b5974:	f002 0207 	and.w	r2, r2, #7
   b5978:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b597c:	4313      	orrs	r3, r2
   b597e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b5982:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b5986:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b598a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b598e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b5992:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b5996:	f366 1347 	bfi	r3, r6, #5, #3
   b599a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b599e:	00ed      	lsls	r5, r5, #3
   b59a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b59a4:	f007 0707 	and.w	r7, r7, #7
   b59a8:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b59ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b59b0:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b59b2:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b59b4:	431d      	orrs	r5, r3
   b59b6:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b59ba:	f006 0207 	and.w	r2, r6, #7
   b59be:	21f2      	movs	r1, #242	; 0xf2
   b59c0:	f7ff ff84 	bl	b58cc <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b59c4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b59c8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b59cc:	f002 0107 	and.w	r1, r2, #7
   b59d0:	009b      	lsls	r3, r3, #2
   b59d2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b59d6:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b59da:	4620      	mov	r0, r4
   b59dc:	21f5      	movs	r1, #245	; 0xf5
   b59de:	f7ff ff75 	bl	b58cc <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b59e2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b59e6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b59ea:	f002 0107 	and.w	r1, r2, #7
   b59ee:	009b      	lsls	r3, r3, #2
   b59f0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b59f4:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b59f8:	4620      	mov	r0, r4
   b59fa:	21f4      	movs	r1, #244	; 0xf4
}
   b59fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b5a00:	f7ff bf64 	b.w	b58cc <_ZN15Adafruit_BME2806write8Ehh>

000b5a04 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b5a04:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b5a06:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5a0a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b5a0c:	b085      	sub	sp, #20
   b5a0e:	4604      	mov	r4, r0
   b5a10:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5a12:	d118      	bne.n	b5a46 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5a14:	7901      	ldrb	r1, [r0, #4]
   b5a16:	6800      	ldr	r0, [r0, #0]
   b5a18:	f001 fba0 	bl	b715c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5a1c:	6820      	ldr	r0, [r4, #0]
   b5a1e:	6803      	ldr	r3, [r0, #0]
   b5a20:	4629      	mov	r1, r5
   b5a22:	689b      	ldr	r3, [r3, #8]
   b5a24:	4798      	blx	r3
        _wire -> endTransmission();
   b5a26:	6820      	ldr	r0, [r4, #0]
   b5a28:	f001 fba3 	bl	b7172 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b5a2c:	7921      	ldrb	r1, [r4, #4]
   b5a2e:	6820      	ldr	r0, [r4, #0]
   b5a30:	2201      	movs	r2, #1
   b5a32:	f001 fb90 	bl	b7156 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b5a36:	6820      	ldr	r0, [r4, #0]
   b5a38:	6803      	ldr	r3, [r0, #0]
   b5a3a:	695b      	ldr	r3, [r3, #20]
   b5a3c:	4798      	blx	r3
   b5a3e:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b5a40:	4628      	mov	r0, r5
   b5a42:	b005      	add	sp, #20
   b5a44:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5a46:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5a4a:	3301      	adds	r3, #1
   b5a4c:	d10c      	bne.n	b5a68 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b5a4e:	4b15      	ldr	r3, [pc, #84]	; (b5aa4 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b5a50:	9300      	str	r3, [sp, #0]
   b5a52:	2300      	movs	r3, #0
   b5a54:	f88d 3004 	strb.w	r3, [sp, #4]
   b5a58:	4b13      	ldr	r3, [pc, #76]	; (b5aa8 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b5a5a:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5a5c:	4668      	mov	r0, sp
   b5a5e:	2301      	movs	r3, #1
   b5a60:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5a64:	f7ff fef1 	bl	b584a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5a68:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5a6c:	2100      	movs	r1, #0
   b5a6e:	b280      	uxth	r0, r0
   b5a70:	f002 f8a7 	bl	b7bc2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5a74:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff fef0 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b5a7e:	2100      	movs	r1, #0
   b5a80:	4620      	mov	r0, r4
   b5a82:	f7ff feec 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
   b5a86:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b5a88:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5a8c:	2101      	movs	r1, #1
   b5a8e:	b280      	uxth	r0, r0
   b5a90:	f002 f897 	bl	b7bc2 <digitalWrite>
        if (_sck == -1)
   b5a94:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5a98:	3301      	adds	r3, #1
   b5a9a:	d1d1      	bne.n	b5a40 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b5a9c:	f7ff fece 	bl	b583c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5aa0:	e7ce      	b.n	b5a40 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b5aa2:	bf00      	nop
   b5aa4:	000b9204 	.word	0x000b9204
   b5aa8:	0007a120 	.word	0x0007a120

000b5aac <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b5aac:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b5aae:	21f3      	movs	r1, #243	; 0xf3
   b5ab0:	f7ff ffa8 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b5ab4:	f000 0001 	and.w	r0, r0, #1
   b5ab8:	bd08      	pop	{r3, pc}
	...

000b5abc <_ZN15Adafruit_BME2806read16Eh>:
{
   b5abc:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b5abe:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5ac2:	3301      	adds	r3, #1
{
   b5ac4:	b085      	sub	sp, #20
   b5ac6:	4604      	mov	r4, r0
   b5ac8:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5aca:	d11f      	bne.n	b5b0c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5acc:	7901      	ldrb	r1, [r0, #4]
   b5ace:	6800      	ldr	r0, [r0, #0]
   b5ad0:	f001 fb44 	bl	b715c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5ad4:	6820      	ldr	r0, [r4, #0]
   b5ad6:	6803      	ldr	r3, [r0, #0]
   b5ad8:	4629      	mov	r1, r5
   b5ada:	689b      	ldr	r3, [r3, #8]
   b5adc:	4798      	blx	r3
        _wire -> endTransmission();
   b5ade:	6820      	ldr	r0, [r4, #0]
   b5ae0:	f001 fb47 	bl	b7172 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b5ae4:	7921      	ldrb	r1, [r4, #4]
   b5ae6:	6820      	ldr	r0, [r4, #0]
   b5ae8:	2202      	movs	r2, #2
   b5aea:	f001 fb34 	bl	b7156 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b5aee:	6820      	ldr	r0, [r4, #0]
   b5af0:	6803      	ldr	r3, [r0, #0]
   b5af2:	695b      	ldr	r3, [r3, #20]
   b5af4:	4798      	blx	r3
   b5af6:	4605      	mov	r5, r0
   b5af8:	6820      	ldr	r0, [r4, #0]
   b5afa:	6803      	ldr	r3, [r0, #0]
   b5afc:	695b      	ldr	r3, [r3, #20]
   b5afe:	4798      	blx	r3
   b5b00:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b5b04:	b285      	uxth	r5, r0
}
   b5b06:	4628      	mov	r0, r5
   b5b08:	b005      	add	sp, #20
   b5b0a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5b0c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5b10:	3301      	adds	r3, #1
   b5b12:	d10c      	bne.n	b5b2e <_ZN15Adafruit_BME2806read16Eh+0x72>
   b5b14:	4b18      	ldr	r3, [pc, #96]	; (b5b78 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b5b16:	9300      	str	r3, [sp, #0]
   b5b18:	2300      	movs	r3, #0
   b5b1a:	f88d 3004 	strb.w	r3, [sp, #4]
   b5b1e:	4b17      	ldr	r3, [pc, #92]	; (b5b7c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b5b20:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5b22:	4668      	mov	r0, sp
   b5b24:	2301      	movs	r3, #1
   b5b26:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5b2a:	f7ff fe8e 	bl	b584a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5b2e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5b32:	2100      	movs	r1, #0
   b5b34:	b280      	uxth	r0, r0
   b5b36:	f002 f844 	bl	b7bc2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5b3a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5b3e:	4620      	mov	r0, r4
   b5b40:	f7ff fe8d 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b5b44:	2100      	movs	r1, #0
   b5b46:	4620      	mov	r0, r4
   b5b48:	f7ff fe89 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
   b5b4c:	2100      	movs	r1, #0
   b5b4e:	4605      	mov	r5, r0
   b5b50:	4620      	mov	r0, r4
   b5b52:	f7ff fe84 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
   b5b56:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b5b5a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b5b5c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5b60:	2101      	movs	r1, #1
   b5b62:	b280      	uxth	r0, r0
   b5b64:	f002 f82d 	bl	b7bc2 <digitalWrite>
        if (_sck == -1)
   b5b68:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5b6c:	3301      	adds	r3, #1
   b5b6e:	d1ca      	bne.n	b5b06 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b5b70:	f7ff fe64 	bl	b583c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5b74:	e7c7      	b.n	b5b06 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b5b76:	bf00      	nop
   b5b78:	000b9204 	.word	0x000b9204
   b5b7c:	0007a120 	.word	0x0007a120

000b5b80 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b5b80:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b5b82:	f7ff ff9b 	bl	b5abc <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b5b86:	ba40      	rev16	r0, r0
}
   b5b88:	b280      	uxth	r0, r0
   b5b8a:	bd08      	pop	{r3, pc}

000b5b8c <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b5b8c:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5b8e:	2188      	movs	r1, #136	; 0x88
{
   b5b90:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5b92:	f7ff fff5 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b5b96:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5b98:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b5b9a:	4620      	mov	r0, r4
   b5b9c:	f7ff fff0 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
   b5ba0:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b5ba2:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b5ba4:	4620      	mov	r0, r4
   b5ba6:	f7ff ffeb 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5baa:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b5bac:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5bae:	4620      	mov	r0, r4
   b5bb0:	f7ff ffe6 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b5bb4:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5bb6:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b5bb8:	4620      	mov	r0, r4
   b5bba:	f7ff ffe1 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
   b5bbe:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b5bc0:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b5bc2:	4620      	mov	r0, r4
   b5bc4:	f7ff ffdc 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
   b5bc8:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b5bca:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b5bcc:	4620      	mov	r0, r4
   b5bce:	f7ff ffd7 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
   b5bd2:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b5bd4:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	f7ff ffd2 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
   b5bdc:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b5bde:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b5be0:	4620      	mov	r0, r4
   b5be2:	f7ff ffcd 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
   b5be6:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b5be8:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b5bea:	4620      	mov	r0, r4
   b5bec:	f7ff ffc8 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
   b5bf0:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b5bf2:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b5bf4:	4620      	mov	r0, r4
   b5bf6:	f7ff ffc3 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
   b5bfa:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b5bfc:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b5bfe:	4620      	mov	r0, r4
   b5c00:	f7ff ffbe 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5c04:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b5c06:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5c08:	4620      	mov	r0, r4
   b5c0a:	f7ff fefb 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b5c0e:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b5c10:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b5c14:	4620      	mov	r0, r4
   b5c16:	f7ff ffb3 	bl	b5b80 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5c1a:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b5c1c:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5c1e:	4620      	mov	r0, r4
   b5c20:	f7ff fef0 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b5c24:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5c26:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b5c2a:	4620      	mov	r0, r4
   b5c2c:	f7ff feea 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>
   b5c30:	21e5      	movs	r1, #229	; 0xe5
   b5c32:	4605      	mov	r5, r0
   b5c34:	4620      	mov	r0, r4
   b5c36:	f7ff fee5 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>
   b5c3a:	f000 030f 	and.w	r3, r0, #15
   b5c3e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b5c42:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b5c44:	21e6      	movs	r1, #230	; 0xe6
   b5c46:	4620      	mov	r0, r4
   b5c48:	f7ff fedc 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>
   b5c4c:	21e5      	movs	r1, #229	; 0xe5
   b5c4e:	4605      	mov	r5, r0
   b5c50:	4620      	mov	r0, r4
   b5c52:	f7ff fed7 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>
   b5c56:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b5c5a:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b5c5e:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b5c60:	21e7      	movs	r1, #231	; 0xe7
   b5c62:	4620      	mov	r0, r4
   b5c64:	f7ff fece 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>
   b5c68:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b5c6c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c70 <_ZN15Adafruit_BME2806read24Eh>:
{
   b5c70:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b5c72:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5c76:	3301      	adds	r3, #1
{
   b5c78:	b085      	sub	sp, #20
   b5c7a:	4604      	mov	r4, r0
   b5c7c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5c7e:	d123      	bne.n	b5cc8 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5c80:	7901      	ldrb	r1, [r0, #4]
   b5c82:	6800      	ldr	r0, [r0, #0]
   b5c84:	f001 fa6a 	bl	b715c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5c88:	6820      	ldr	r0, [r4, #0]
   b5c8a:	6803      	ldr	r3, [r0, #0]
   b5c8c:	4629      	mov	r1, r5
   b5c8e:	689b      	ldr	r3, [r3, #8]
   b5c90:	4798      	blx	r3
        _wire -> endTransmission();
   b5c92:	6820      	ldr	r0, [r4, #0]
   b5c94:	f001 fa6d 	bl	b7172 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b5c98:	7921      	ldrb	r1, [r4, #4]
   b5c9a:	6820      	ldr	r0, [r4, #0]
   b5c9c:	2203      	movs	r2, #3
   b5c9e:	f001 fa5a 	bl	b7156 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b5ca2:	6820      	ldr	r0, [r4, #0]
   b5ca4:	6803      	ldr	r3, [r0, #0]
   b5ca6:	695b      	ldr	r3, [r3, #20]
   b5ca8:	4798      	blx	r3
        value <<= 8;
   b5caa:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5cac:	6820      	ldr	r0, [r4, #0]
   b5cae:	6803      	ldr	r3, [r0, #0]
   b5cb0:	695b      	ldr	r3, [r3, #20]
   b5cb2:	4798      	blx	r3
   b5cb4:	4328      	orrs	r0, r5
        value <<= 8;
   b5cb6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5cb8:	6820      	ldr	r0, [r4, #0]
   b5cba:	6803      	ldr	r3, [r0, #0]
   b5cbc:	695b      	ldr	r3, [r3, #20]
   b5cbe:	4798      	blx	r3
   b5cc0:	4305      	orrs	r5, r0
}
   b5cc2:	4628      	mov	r0, r5
   b5cc4:	b005      	add	sp, #20
   b5cc6:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5cc8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5ccc:	3301      	adds	r3, #1
   b5cce:	d10c      	bne.n	b5cea <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b5cd0:	4b1a      	ldr	r3, [pc, #104]	; (b5d3c <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b5cd2:	9300      	str	r3, [sp, #0]
   b5cd4:	2300      	movs	r3, #0
   b5cd6:	f88d 3004 	strb.w	r3, [sp, #4]
   b5cda:	4b19      	ldr	r3, [pc, #100]	; (b5d40 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b5cdc:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5cde:	4668      	mov	r0, sp
   b5ce0:	2301      	movs	r3, #1
   b5ce2:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5ce6:	f7ff fdb0 	bl	b584a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5cea:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5cee:	2100      	movs	r1, #0
   b5cf0:	b280      	uxth	r0, r0
   b5cf2:	f001 ff66 	bl	b7bc2 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5cf6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5cfa:	4620      	mov	r0, r4
   b5cfc:	f7ff fdaf 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b5d00:	2100      	movs	r1, #0
   b5d02:	4620      	mov	r0, r4
   b5d04:	f7ff fdab 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b5d08:	2100      	movs	r1, #0
        value <<= 8;
   b5d0a:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	f7ff fda6 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
   b5d12:	4328      	orrs	r0, r5
        value <<= 8;
   b5d14:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b5d16:	2100      	movs	r1, #0
   b5d18:	4620      	mov	r0, r4
   b5d1a:	f7ff fda0 	bl	b585e <_ZN15Adafruit_BME2807spixferEh>
   b5d1e:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b5d20:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5d24:	2101      	movs	r1, #1
   b5d26:	b280      	uxth	r0, r0
   b5d28:	f001 ff4b 	bl	b7bc2 <digitalWrite>
        if (_sck == -1)
   b5d2c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5d30:	3301      	adds	r3, #1
   b5d32:	d1c6      	bne.n	b5cc2 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b5d34:	f7ff fd82 	bl	b583c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b5d38:	e7c3      	b.n	b5cc2 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b5d3a:	bf00      	nop
   b5d3c:	000b9204 	.word	0x000b9204
   b5d40:	0007a120 	.word	0x0007a120

000b5d44 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b5d44:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b5d46:	21fa      	movs	r1, #250	; 0xfa
{
   b5d48:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b5d4a:	f7ff ff91 	bl	b5c70 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b5d4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b5d52:	d01f      	beq.n	b5d94 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5d54:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b5d56:	ed9f 7a11 	vldr	s14, [pc, #68]	; b5d9c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5d5a:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5d5c:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5d60:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b5d64:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5d68:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5d6a:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b5d6e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b5d72:	131b      	asrs	r3, r3, #12
   b5d74:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5d76:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b5d78:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b5d7c:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b5d7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5d82:	3380      	adds	r3, #128	; 0x80
   b5d84:	121b      	asrs	r3, r3, #8
   b5d86:	ee07 3a90 	vmov	s15, r3
   b5d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b5d8e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b5d92:	bd10      	pop	{r4, pc}
        return NAN;
   b5d94:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5da0 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b5d98:	e7fb      	b.n	b5d92 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b5d9a:	bf00      	nop
   b5d9c:	42c80000 	.word	0x42c80000
   b5da0:	7fc00000 	.word	0x7fc00000

000b5da4 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b5da4:	b538      	push	{r3, r4, r5, lr}
   b5da6:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b5da8:	f7ff ffcc 	bl	b5d44 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b5dac:	21fd      	movs	r1, #253	; 0xfd
   b5dae:	4620      	mov	r0, r4
   b5db0:	f7ff fe84 	bl	b5abc <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b5db4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b5db8:	d038      	beq.n	b5e2c <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b5dba:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b5dbc:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b5dc0:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b5dc4:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b5dc8:	0509      	lsls	r1, r1, #20
   b5dca:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b5dce:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b5dd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b5dd6:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5dd8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5ddc:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5de0:	436b      	muls	r3, r5
   b5de2:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5de4:	4369      	muls	r1, r5
   b5de6:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5de8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5dec:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5dee:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b5df0:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5df4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b5df8:	434b      	muls	r3, r1
   b5dfa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b5dfe:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b5e00:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b5e02:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b5e04:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b5e08:	4352      	muls	r2, r2
   b5e0a:	11d2      	asrs	r2, r2, #7
   b5e0c:	434a      	muls	r2, r1
   b5e0e:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b5e12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b5e16:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b5e1a:	bfa8      	it	ge
   b5e1c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b5e20:	131b      	asrs	r3, r3, #12
   b5e22:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b5e26:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b5e2a:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b5e2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b5e34 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b5e30:	e7fb      	b.n	b5e2a <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b5e32:	bf00      	nop
   b5e34:	7fc00000 	.word	0x7fc00000

000b5e38 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b5e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5e3c:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b5e3e:	f7ff ff81 	bl	b5d44 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b5e42:	21f7      	movs	r1, #247	; 0xf7
   b5e44:	4628      	mov	r0, r5
   b5e46:	f7ff ff13 	bl	b5c70 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b5e4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b5e4e:	f000 80b6 	beq.w	b5fbe <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b5e52:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5e54:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b5e58:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b5e5c:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b5e60:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5e64:	17dc      	asrs	r4, r3, #31
   b5e66:	fb03 f20e 	mul.w	r2, r3, lr
   b5e6a:	fb01 2204 	mla	r2, r1, r4, r2
   b5e6e:	fba3 3401 	umull	r3, r4, r3, r1
   b5e72:	4422      	add	r2, r4
   b5e74:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5e76:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5e7a:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5e7c:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5e80:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5e84:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5e88:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5e8c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b5e90:	fb03 f608 	mul.w	r6, r3, r8
   b5e94:	fb07 660c 	mla	r6, r7, ip, r6
   b5e98:	fba3 3c07 	umull	r3, ip, r3, r7
   b5e9c:	4466      	add	r6, ip
   b5e9e:	0a1b      	lsrs	r3, r3, #8
   b5ea0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b5ea4:	191b      	adds	r3, r3, r4
   b5ea6:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b5eaa:	8b6e      	ldrh	r6, [r5, #26]
   b5eac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b5eb0:	fba3 3406 	umull	r3, r4, r3, r6
   b5eb4:	fb06 4402 	mla	r4, r6, r2, r4
   b5eb8:	17e3      	asrs	r3, r4, #31
   b5eba:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b5ebc:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b5ec0:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b5ec4:	d07e      	beq.n	b5fc4 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5ec6:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b5eca:	fb04 f608 	mul.w	r6, r4, r8
   b5ece:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b5ed2:	fb07 6609 	mla	r6, r7, r9, r6
   b5ed6:	fba4 4707 	umull	r4, r7, r4, r7
   b5eda:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b5edc:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b5ee0:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b5ee4:	fb07 fe0e 	mul.w	lr, r7, lr
   b5ee8:	fb01 ee08 	mla	lr, r1, r8, lr
   b5eec:	fba7 7101 	umull	r7, r1, r7, r1
   b5ef0:	4471      	add	r1, lr
   b5ef2:	0449      	lsls	r1, r1, #17
   b5ef4:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b5ef8:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b5efa:	047f      	lsls	r7, r7, #17
   b5efc:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b5efe:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b5f02:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b5f06:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b5f0a:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b5f0e:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b5f12:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b5f16:	07e4      	lsls	r4, r4, #31
   b5f18:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b5f1a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b5f1e:	f640 4135 	movw	r1, #3125	; 0xc35
   b5f22:	eb60 0606 	sbc.w	r6, r0, r6
   b5f26:	fba4 0401 	umull	r0, r4, r4, r1
   b5f2a:	fb01 4106 	mla	r1, r1, r6, r4
   b5f2e:	f7fe fe41 	bl	b4bb4 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b5f32:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5f36:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b5f3a:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b5f3e:	0b43      	lsrs	r3, r0, #13
   b5f40:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b5f44:	fb02 f70c 	mul.w	r7, r2, ip
   b5f48:	17d4      	asrs	r4, r2, #31
   b5f4a:	fb03 7704 	mla	r7, r3, r4, r7
   b5f4e:	fba2 2403 	umull	r2, r4, r2, r3
   b5f52:	443c      	add	r4, r7
   b5f54:	fb02 f70c 	mul.w	r7, r2, ip
   b5f58:	fb03 7704 	mla	r7, r3, r4, r7
   b5f5c:	fba2 2303 	umull	r2, r3, r2, r3
   b5f60:	441f      	add	r7, r3
   b5f62:	0e53      	lsrs	r3, r2, #25
   b5f64:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5f68:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5f6a:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b5f6e:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b5f72:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5f74:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5f78:	fb02 4100 	mla	r1, r2, r0, r4
   b5f7c:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5f80:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5f84:	4431      	add	r1, r6
   b5f86:	0cc0      	lsrs	r0, r0, #19
   b5f88:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5f8c:	1818      	adds	r0, r3, r0
   b5f8e:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b5f92:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b5f96:	0a00      	lsrs	r0, r0, #8
   b5f98:	012d      	lsls	r5, r5, #4
   b5f9a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b5f9e:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b5fa2:	0124      	lsls	r4, r4, #4
   b5fa4:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b5fa6:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b5faa:	f7fe fdc5 	bl	b4b38 <__aeabi_l2f>
   b5fae:	ed9f 0a07 	vldr	s0, [pc, #28]	; b5fcc <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b5fb2:	ee07 0a90 	vmov	s15, r0
   b5fb6:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b5fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b5fbe:	ed9f 0a04 	vldr	s0, [pc, #16]	; b5fd0 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b5fc2:	e7fa      	b.n	b5fba <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b5fc4:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5fd4 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b5fc8:	e7f7      	b.n	b5fba <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b5fca:	bf00      	nop
   b5fcc:	3b800000 	.word	0x3b800000
   b5fd0:	7fc00000 	.word	0x7fc00000
   b5fd4:	00000000 	.word	0x00000000

000b5fd8 <_ZN15Adafruit_BME2804initEv>:
{
   b5fd8:	b530      	push	{r4, r5, lr}
   b5fda:	4604      	mov	r4, r0
    if (_cs == -1) {
   b5fdc:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b5fe0:	1c42      	adds	r2, r0, #1
{
   b5fe2:	b085      	sub	sp, #20
    if (_cs == -1) {
   b5fe4:	d119      	bne.n	b601a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b5fe6:	6820      	ldr	r0, [r4, #0]
   b5fe8:	f001 f886 	bl	b70f8 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b5fec:	21d0      	movs	r1, #208	; 0xd0
   b5fee:	4620      	mov	r0, r4
   b5ff0:	f7ff fd08 	bl	b5a04 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b5ff4:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b5ff6:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b5ff8:	d145      	bne.n	b6086 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	22b6      	movs	r2, #182	; 0xb6
   b5ffe:	21e0      	movs	r1, #224	; 0xe0
   b6000:	f7ff fc64 	bl	b58cc <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b6004:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b6008:	f000 fd0c 	bl	b6a24 <delay>
    while (isReadingCalibration())
   b600c:	4620      	mov	r0, r4
   b600e:	f7ff fd4d 	bl	b5aac <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b6012:	4605      	mov	r5, r0
   b6014:	b328      	cbz	r0, b6062 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b6016:	2064      	movs	r0, #100	; 0x64
   b6018:	e7f6      	b.n	b6008 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b601a:	2101      	movs	r1, #1
   b601c:	b280      	uxth	r0, r0
   b601e:	f001 fdd0 	bl	b7bc2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b6022:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b6026:	2101      	movs	r1, #1
   b6028:	b280      	uxth	r0, r0
   b602a:	f001 fdb9 	bl	b7ba0 <pinMode>
        if (_sck == -1) {
   b602e:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b6032:	1c43      	adds	r3, r0, #1
   b6034:	d104      	bne.n	b6040 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b6036:	f7ff fbe5 	bl	b5804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b603a:	f001 fa79 	bl	b7530 <_ZN8SPIClass5beginEv>
    }
   b603e:	e7d5      	b.n	b5fec <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b6040:	2101      	movs	r1, #1
   b6042:	b280      	uxth	r0, r0
   b6044:	f001 fdac 	bl	b7ba0 <pinMode>
            pinMode(_mosi, OUTPUT);
   b6048:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b604c:	2101      	movs	r1, #1
   b604e:	b280      	uxth	r0, r0
   b6050:	f001 fda6 	bl	b7ba0 <pinMode>
            pinMode(_miso, INPUT);
   b6054:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b6058:	2100      	movs	r1, #0
   b605a:	b280      	uxth	r0, r0
   b605c:	f001 fda0 	bl	b7ba0 <pinMode>
   b6060:	e7c4      	b.n	b5fec <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b6062:	4620      	mov	r0, r4
   b6064:	f7ff fd92 	bl	b5b8c <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b6068:	2305      	movs	r3, #5
   b606a:	9300      	str	r3, [sp, #0]
   b606c:	461a      	mov	r2, r3
   b606e:	2103      	movs	r1, #3
   b6070:	4620      	mov	r0, r4
   b6072:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6076:	f7ff fc7b 	bl	b5970 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b607a:	2064      	movs	r0, #100	; 0x64
   b607c:	f000 fcd2 	bl	b6a24 <delay>
    return true;
   b6080:	2001      	movs	r0, #1
}
   b6082:	b005      	add	sp, #20
   b6084:	bd30      	pop	{r4, r5, pc}
        return false;
   b6086:	2000      	movs	r0, #0
   b6088:	e7fb      	b.n	b6082 <_ZN15Adafruit_BME2804initEv+0xaa>

000b608a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b608a:	2377      	movs	r3, #119	; 0x77
{
   b608c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b608e:	7103      	strb	r3, [r0, #4]
{
   b6090:	4604      	mov	r4, r0
	_wire = &Wire;
   b6092:	f001 fdf3 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b6096:	6020      	str	r0, [r4, #0]
	status = init();
   b6098:	4620      	mov	r0, r4
   b609a:	f7ff ff9d 	bl	b5fd8 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b609e:	b930      	cbnz	r0, b60ae <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b60a0:	2376      	movs	r3, #118	; 0x76
   b60a2:	7123      	strb	r3, [r4, #4]
 		status = init();
   b60a4:	4620      	mov	r0, r4
}
   b60a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b60aa:	f7ff bf95 	b.w	b5fd8 <_ZN15Adafruit_BME2804initEv>
}
   b60ae:	bd10      	pop	{r4, pc}

000b60b0 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b60b0:	6803      	ldr	r3, [r0, #0]
   b60b2:	b2c9      	uxtb	r1, r1
   b60b4:	689b      	ldr	r3, [r3, #8]
   b60b6:	4718      	bx	r3

000b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   b60b8:	b510      	push	{r4, lr}
   b60ba:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   b60bc:	f001 fdde 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b60c0:	213c      	movs	r1, #60	; 0x3c
   b60c2:	f001 f84f 	bl	b7164 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   b60c6:	f001 fdd9 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b60ca:	2180      	movs	r1, #128	; 0x80
   b60cc:	f7ff fff0 	bl	b60b0 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(command);
   b60d0:	f001 fdd4 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b60d4:	6803      	ldr	r3, [r0, #0]
   b60d6:	4621      	mov	r1, r4
   b60d8:	689b      	ldr	r3, [r3, #8]
   b60da:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   b60dc:	f001 fdce 	bl	b7c7c <_Z19__fetch_global_Wirev>
}
   b60e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // End I2C communication
   b60e4:	f001 b845 	b.w	b7172 <_ZN7TwoWire15endTransmissionEv>

000b60e8 <_ZN9SeeedOLED4initEv>:
{
   b60e8:	b508      	push	{r3, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   b60ea:	20ae      	movs	r0, #174	; 0xae
   b60ec:	f7ff ffe4 	bl	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  delay(5);
   b60f0:	2005      	movs	r0, #5
   b60f2:	f000 fc97 	bl	b6a24 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   b60f6:	20af      	movs	r0, #175	; 0xaf
   b60f8:	f7ff ffde 	bl	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  delay(5);
   b60fc:	2005      	movs	r0, #5
   b60fe:	f000 fc91 	bl	b6a24 <delay>
}
   b6102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   b6106:	20a6      	movs	r0, #166	; 0xa6
   b6108:	f7ff bfd6 	b.w	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000b610c <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   b610c:	b508      	push	{r3, lr}
  addressingMode = PAGE_MODE;
   b610e:	2301      	movs	r3, #1
   b6110:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   b6112:	2020      	movs	r0, #32
   b6114:	f7ff ffd0 	bl	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x02); //set page addressing mode
}
   b6118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendCommand(0x02); //set page addressing mode
   b611c:	2002      	movs	r0, #2
   b611e:	f7ff bfcb 	b.w	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000b6122 <_ZN9SeeedOLED9setTextXYEhh>:

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   b6122:	b510      	push	{r4, lr}
  sendCommand(0xB0 + Row);                        //set page address
   b6124:	3950      	subs	r1, #80	; 0x50
{
   b6126:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   b6128:	b2c8      	uxtb	r0, r1
   b612a:	f7ff ffc5 	bl	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   b612e:	00e0      	lsls	r0, r4, #3
   b6130:	f000 0008 	and.w	r0, r0, #8
   b6134:	f7ff ffc0 	bl	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   b6138:	f3c4 0043 	ubfx	r0, r4, #1, #4
   b613c:	3010      	adds	r0, #16
}
   b613e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   b6142:	f7ff bfb9 	b.w	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000b6146 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   b6146:	b510      	push	{r4, lr}
   b6148:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   b614a:	f001 fd97 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b614e:	213c      	movs	r1, #60	; 0x3c
   b6150:	f001 f808 	bl	b7164 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   b6154:	f001 fd92 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b6158:	2140      	movs	r1, #64	; 0x40
   b615a:	f7ff ffa9 	bl	b60b0 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(Data);
   b615e:	f001 fd8d 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b6162:	6803      	ldr	r3, [r0, #0]
   b6164:	4621      	mov	r1, r4
   b6166:	689b      	ldr	r3, [r3, #8]
   b6168:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   b616a:	f001 fd87 	bl	b7c7c <_Z19__fetch_global_Wirev>
}
   b616e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // stop I2C transmission
   b6172:	f000 bffe 	b.w	b7172 <_ZN7TwoWire15endTransmissionEv>
	...

000b6178 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   b6178:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   b617c:	2b5f      	cmp	r3, #95	; 0x5f
   b617e:	bf88      	it	hi
   b6180:	2120      	movhi	r1, #32
{
   b6182:	b570      	push	{r4, r5, r6, lr}
   b6184:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   b6188:	4d07      	ldr	r5, [pc, #28]	; (b61a8 <_ZN9SeeedOLED7putCharEh+0x30>)
   b618a:	3920      	subs	r1, #32
   b618c:	4606      	mov	r6, r0
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   b618e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C = ' '; //Space
   b6192:	2408      	movs	r4, #8
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   b6194:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6198:	4630      	mov	r0, r6
  for (i = 0; i < 8; i++)
   b619a:	3c01      	subs	r4, #1
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   b619c:	f7ff ffd3 	bl	b6146 <_ZN9SeeedOLED8sendDataEh>
  for (i = 0; i < 8; i++)
   b61a0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b61a4:	d1f6      	bne.n	b6194 <_ZN9SeeedOLED7putCharEh+0x1c>
  }
}
   b61a6:	bd70      	pop	{r4, r5, r6, pc}
   b61a8:	000b9210 	.word	0x000b9210

000b61ac <_ZN9SeeedOLED12clearDisplayEv>:
{
   b61ac:	b570      	push	{r4, r5, r6, lr}
   b61ae:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   b61b0:	20ae      	movs	r0, #174	; 0xae
   b61b2:	f7ff ff81 	bl	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   b61b6:	2600      	movs	r6, #0
    setTextXY(j, 0);
   b61b8:	2200      	movs	r2, #0
   b61ba:	b2f1      	uxtb	r1, r6
   b61bc:	4628      	mov	r0, r5
   b61be:	f7ff ffb0 	bl	b6122 <_ZN9SeeedOLED9setTextXYEhh>
   b61c2:	2410      	movs	r4, #16
        putChar(' ');
   b61c4:	2120      	movs	r1, #32
   b61c6:	4628      	mov	r0, r5
      for (i = 0; i < 16; i++) //clear all columns
   b61c8:	3c01      	subs	r4, #1
        putChar(' ');
   b61ca:	f7ff ffd5 	bl	b6178 <_ZN9SeeedOLED7putCharEh>
      for (i = 0; i < 16; i++) //clear all columns
   b61ce:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b61d2:	d1f7      	bne.n	b61c4 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for (j = 0; j < 8; j++)
   b61d4:	3601      	adds	r6, #1
   b61d6:	2e08      	cmp	r6, #8
   b61d8:	d1ee      	bne.n	b61b8 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   b61da:	20af      	movs	r0, #175	; 0xaf
   b61dc:	f7ff ff6c 	bl	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0, 0);
   b61e0:	4622      	mov	r2, r4
   b61e2:	4621      	mov	r1, r4
   b61e4:	4628      	mov	r0, r5
}
   b61e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0, 0);
   b61ea:	f7ff bf9a 	b.w	b6122 <_ZN9SeeedOLED9setTextXYEhh>

000b61ee <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   b61ee:	b570      	push	{r4, r5, r6, lr}
   b61f0:	4606      	mov	r6, r0
   b61f2:	460d      	mov	r5, r1
   b61f4:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   b61f6:	b2e3      	uxtb	r3, r4
   b61f8:	3401      	adds	r4, #1
   b61fa:	5ce9      	ldrb	r1, [r5, r3]
   b61fc:	b119      	cbz	r1, b6206 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   b61fe:	4630      	mov	r0, r6
   b6200:	f7ff ffba 	bl	b6178 <_ZN9SeeedOLED7putCharEh>
  while (String[i])
   b6204:	e7f7      	b.n	b61f6 <_ZN9SeeedOLED9putStringEPKc+0x8>
    i++;
  }
}
   b6206:	bd70      	pop	{r4, r5, r6, pc}

000b6208 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   b6208:	b5f0      	push	{r4, r5, r6, r7, lr}
   b620a:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   b620c:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   b620e:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10] = "";
   b6210:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   b6214:	4606      	mov	r6, r0
  unsigned char char_buffer[10] = "";
   b6216:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   b621a:	da24      	bge.n	b6266 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f = 1;
    putChar('-');
   b621c:	212d      	movs	r1, #45	; 0x2d
   b621e:	f7ff ffab 	bl	b6178 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   b6222:	4264      	negs	r4, r4
    f = 1;
   b6224:	2301      	movs	r3, #1
  unsigned char f = 0;
   b6226:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   b6228:	200a      	movs	r0, #10
   b622a:	462a      	mov	r2, r5
   b622c:	a904      	add	r1, sp, #16
   b622e:	440a      	add	r2, r1
   b6230:	3501      	adds	r5, #1
   b6232:	fbb4 f1f0 	udiv	r1, r4, r0
   b6236:	fb00 4411 	mls	r4, r0, r1, r4
   b623a:	f802 4c0c 	strb.w	r4, [r2, #-12]
   b623e:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   b6240:	460c      	mov	r4, r1
   b6242:	2900      	cmp	r1, #0
   b6244:	d1f1      	bne.n	b622a <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f = f + i;
   b6246:	442b      	add	r3, r5
   b6248:	b2dc      	uxtb	r4, r3
   b624a:	ab04      	add	r3, sp, #16
   b624c:	195f      	adds	r7, r3, r5
   b624e:	3f0d      	subs	r7, #13
  for (; i > 0; i--)
   b6250:	b175      	cbz	r5, b6270 <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0' + char_buffer[i - 1]);
   b6252:	f817 1901 	ldrb.w	r1, [r7], #-1
   b6256:	3130      	adds	r1, #48	; 0x30
   b6258:	b2c9      	uxtb	r1, r1
   b625a:	4630      	mov	r0, r6
  for (; i > 0; i--)
   b625c:	3d01      	subs	r5, #1
    putChar('0' + char_buffer[i - 1]);
   b625e:	f7ff ff8b 	bl	b6178 <_ZN9SeeedOLED7putCharEh>
  for (; i > 0; i--)
   b6262:	b2ed      	uxtb	r5, r5
   b6264:	e7f4      	b.n	b6250 <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   b6266:	d1de      	bne.n	b6226 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   b6268:	2130      	movs	r1, #48	; 0x30
   b626a:	f7ff ff85 	bl	b6178 <_ZN9SeeedOLED7putCharEh>
    return f;
   b626e:	2401      	movs	r4, #1
  }
  return f;
}
   b6270:	4620      	mov	r0, r4
   b6272:	b005      	add	sp, #20
   b6274:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6276 <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   b6276:	20a6      	movs	r0, #166	; 0xa6
   b6278:	f7ff bf1e 	b.w	b60b8 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000b627c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b627c:	b510      	push	{r4, lr}
   b627e:	4b05      	ldr	r3, [pc, #20]	; (b6294 <_ZN10JsonBufferD1Ev+0x18>)
   b6280:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b6282:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b6284:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b6286:	b91b      	cbnz	r3, b6290 <_ZN10JsonBufferD1Ev+0x14>
   b6288:	6840      	ldr	r0, [r0, #4]
   b628a:	b108      	cbz	r0, b6290 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b628c:	f000 fb8a 	bl	b69a4 <free>
	}
}
   b6290:	4620      	mov	r0, r4
   b6292:	bd10      	pop	{r4, pc}
   b6294:	000b9528 	.word	0x000b9528

000b6298 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b6298:	b510      	push	{r4, lr}
   b629a:	4604      	mov	r4, r0
}
   b629c:	f7ff ffee 	bl	b627c <_ZN10JsonBufferD1Ev>
   b62a0:	4620      	mov	r0, r4
   b62a2:	2114      	movs	r1, #20
   b62a4:	f7fe fe87 	bl	b4fb6 <_ZdlPvj>
   b62a8:	4620      	mov	r0, r4
   b62aa:	bd10      	pop	{r4, pc}

000b62ac <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b62ac:	b510      	push	{r4, lr}
   b62ae:	4b03      	ldr	r3, [pc, #12]	; (b62bc <_ZN10JsonWriterD1Ev+0x10>)
   b62b0:	6003      	str	r3, [r0, #0]
   b62b2:	4604      	mov	r4, r0
   b62b4:	f7ff ffe2 	bl	b627c <_ZN10JsonBufferD1Ev>

}
   b62b8:	4620      	mov	r0, r4
   b62ba:	bd10      	pop	{r4, pc}
   b62bc:	000b9538 	.word	0x000b9538

000b62c0 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b62c0:	b510      	push	{r4, lr}
   b62c2:	4604      	mov	r4, r0
}
   b62c4:	f7ff fff2 	bl	b62ac <_ZN10JsonWriterD1Ev>
   b62c8:	4620      	mov	r0, r4
   b62ca:	2130      	movs	r1, #48	; 0x30
   b62cc:	f7fe fe73 	bl	b4fb6 <_ZdlPvj>
   b62d0:	4620      	mov	r0, r4
   b62d2:	bd10      	pop	{r4, pc}

000b62d4 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   b62d4:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   b62d6:	2201      	movs	r2, #1
	offset = 0;
   b62d8:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b62da:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b62dc:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   b62de:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   b62e2:	4770      	bx	lr

000b62e4 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b62e4:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b62e8:	b508      	push	{r3, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b62ea:	2200      	movs	r2, #0
   b62ec:	60c2      	str	r2, [r0, #12]
   b62ee:	2201      	movs	r2, #1
   b62f0:	7402      	strb	r2, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b62f2:	4a04      	ldr	r2, [pc, #16]	; (b6304 <_ZN10JsonWriterC1EPcj+0x20>)
   b62f4:	6002      	str	r2, [r0, #0]
   b62f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b62fa:	62c2      	str	r2, [r0, #44]	; 0x2c
	init();
   b62fc:	f7ff ffea 	bl	b62d4 <_ZN10JsonWriter4initEv>
}
   b6300:	bd08      	pop	{r3, pc}
   b6302:	bf00      	nop
   b6304:	000b9538 	.word	0x000b9538

000b6308 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   b6308:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b630c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b630e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b6310:	bf3f      	itttt	cc
   b6312:	6842      	ldrcc	r2, [r0, #4]
   b6314:	1c5c      	addcc	r4, r3, #1
   b6316:	60c4      	strcc	r4, [r0, #12]
   b6318:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   b631a:	bf24      	itt	cs
   b631c:	2301      	movcs	r3, #1
   b631e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   b6322:	bd10      	pop	{r4, pc}

000b6324 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b6324:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b6326:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b6328:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b632a:	b143      	cbz	r3, b633e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b632c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b6330:	7e59      	ldrb	r1, [r3, #25]
   b6332:	b109      	cbz	r1, b6338 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b6334:	f7ff ffe8 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b6338:	6963      	ldr	r3, [r4, #20]
   b633a:	3b01      	subs	r3, #1
   b633c:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b633e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b6342:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b6344:	4288      	cmp	r0, r1
   b6346:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b634a:	bf2a      	itet	cs
   b634c:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b634e:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b6350:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b6354:	bd10      	pop	{r4, pc}

000b6356 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b6356:	b570      	push	{r4, r5, r6, lr}
   b6358:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b635a:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b635e:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b6360:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b6362:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b6364:	4430      	add	r0, r6
   b6366:	460a      	mov	r2, r1
   b6368:	4629      	mov	r1, r5
   b636a:	f000 fb2b 	bl	b69c4 <vsnprintf>
	if (count <= spaceAvailable) {
   b636e:	4285      	cmp	r5, r0
		offset += count;
   b6370:	bf2d      	iteet	cs
   b6372:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   b6374:	68a3      	ldrcc	r3, [r4, #8]
   b6376:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b6378:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b637a:	bf36      	itet	cc
   b637c:	2301      	movcc	r3, #1
		offset += count;
   b637e:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b6380:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   b6384:	bd70      	pop	{r4, r5, r6, pc}

000b6386 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b6386:	b40e      	push	{r1, r2, r3}
   b6388:	b503      	push	{r0, r1, lr}
   b638a:	aa03      	add	r2, sp, #12
   b638c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b6390:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b6392:	f7ff ffe0 	bl	b6356 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b6396:	b002      	add	sp, #8
   b6398:	f85d eb04 	ldr.w	lr, [sp], #4
   b639c:	b003      	add	sp, #12
   b639e:	4770      	bx	lr

000b63a0 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b63a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b63a4:	4604      	mov	r4, r0
   b63a6:	460e      	mov	r6, r1
	if (quoted) {
   b63a8:	4617      	mov	r7, r2
   b63aa:	b112      	cbz	r2, b63b2 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b63ac:	2122      	movs	r1, #34	; 0x22
   b63ae:	f7ff ffab 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b63b2:	f8df 810c 	ldr.w	r8, [pc, #268]	; b64c0 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b63b6:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b63b8:	5d71      	ldrb	r1, [r6, r5]
   b63ba:	eb06 0905 	add.w	r9, r6, r5
   b63be:	2900      	cmp	r1, #0
   b63c0:	d074      	beq.n	b64ac <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b63c2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b63c6:	429a      	cmp	r2, r3
   b63c8:	d270      	bcs.n	b64ac <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b63ca:	060b      	lsls	r3, r1, #24
   b63cc:	d534      	bpl.n	b6438 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b63ce:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b63d2:	2be0      	cmp	r3, #224	; 0xe0
   b63d4:	f105 0901 	add.w	r9, r5, #1
   b63d8:	d11d      	bne.n	b6416 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b63da:	f816 2009 	ldrb.w	r2, [r6, r9]
   b63de:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b63e2:	2b80      	cmp	r3, #128	; 0x80
   b63e4:	d139      	bne.n	b645a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b63e6:	f105 0902 	add.w	r9, r5, #2
   b63ea:	f816 3009 	ldrb.w	r3, [r6, r9]
   b63ee:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b63f2:	2880      	cmp	r0, #128	; 0x80
   b63f4:	d131      	bne.n	b645a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b63f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b63fa:	0192      	lsls	r2, r2, #6
   b63fc:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b6400:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b6404:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b6406:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b6408:	4641      	mov	r1, r8
   b640a:	4620      	mov	r0, r4
   b640c:	f7ff ffbb 	bl	b6386 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b6410:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b6412:	3501      	adds	r5, #1
   b6414:	e7d0      	b.n	b63b8 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b6416:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b641a:	2bc0      	cmp	r3, #192	; 0xc0
   b641c:	d11d      	bne.n	b645a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b641e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b6422:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b6426:	2a80      	cmp	r2, #128	; 0x80
   b6428:	d117      	bne.n	b645a <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b642a:	0189      	lsls	r1, r1, #6
   b642c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b6430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b6434:	431a      	orrs	r2, r3
   b6436:	e7e7      	b.n	b6408 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b6438:	290d      	cmp	r1, #13
   b643a:	d80a      	bhi.n	b6452 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b643c:	2907      	cmp	r1, #7
   b643e:	d90c      	bls.n	b645a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b6440:	f1a1 0308 	sub.w	r3, r1, #8
   b6444:	2b05      	cmp	r3, #5
   b6446:	d808      	bhi.n	b645a <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b6448:	e8df f003 	tbb	[pc, r3]
   b644c:	07172309 	.word	0x07172309
   b6450:	1d11      	.short	0x1d11
   b6452:	2922      	cmp	r1, #34	; 0x22
   b6454:	d023      	beq.n	b649e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b6456:	295c      	cmp	r1, #92	; 0x5c
   b6458:	d021      	beq.n	b649e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b645a:	4620      	mov	r0, r4
   b645c:	e004      	b.n	b6468 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b645e:	215c      	movs	r1, #92	; 0x5c
   b6460:	4620      	mov	r0, r4
   b6462:	f7ff ff51 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b6466:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b6468:	f7ff ff4e 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
				break;
   b646c:	e7d1      	b.n	b6412 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b646e:	215c      	movs	r1, #92	; 0x5c
   b6470:	4620      	mov	r0, r4
   b6472:	f7ff ff49 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b6476:	2166      	movs	r1, #102	; 0x66
   b6478:	e7f6      	b.n	b6468 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b647a:	215c      	movs	r1, #92	; 0x5c
   b647c:	4620      	mov	r0, r4
   b647e:	f7ff ff43 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b6482:	216e      	movs	r1, #110	; 0x6e
   b6484:	e7f0      	b.n	b6468 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b6486:	215c      	movs	r1, #92	; 0x5c
   b6488:	4620      	mov	r0, r4
   b648a:	f7ff ff3d 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b648e:	2172      	movs	r1, #114	; 0x72
   b6490:	e7ea      	b.n	b6468 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b6492:	215c      	movs	r1, #92	; 0x5c
   b6494:	4620      	mov	r0, r4
   b6496:	f7ff ff37 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b649a:	2174      	movs	r1, #116	; 0x74
   b649c:	e7e4      	b.n	b6468 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b649e:	215c      	movs	r1, #92	; 0x5c
   b64a0:	4620      	mov	r0, r4
   b64a2:	f7ff ff31 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b64a6:	f899 1000 	ldrb.w	r1, [r9]
   b64aa:	e7dd      	b.n	b6468 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b64ac:	b12f      	cbz	r7, b64ba <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b64ae:	4620      	mov	r0, r4
   b64b0:	2122      	movs	r1, #34	; 0x22
}
   b64b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b64b6:	f7ff bf27 	b.w	b6308 <_ZN10JsonWriter10insertCharEc>
}
   b64ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b64be:	bf00      	nop
   b64c0:	000b9510 	.word	0x000b9510

000b64c4 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   b64c4:	6942      	ldr	r2, [r0, #20]
   b64c6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b64ca:	7e1a      	ldrb	r2, [r3, #24]
   b64cc:	b112      	cbz	r2, b64d4 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b64ce:	2200      	movs	r2, #0
   b64d0:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   b64d2:	4770      	bx	lr
		insertChar(',');
   b64d4:	212c      	movs	r1, #44	; 0x2c
   b64d6:	f7ff bf17 	b.w	b6308 <_ZN10JsonWriter10insertCharEc>

000b64da <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b64da:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b64dc:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b64de:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b64e0:	3301      	adds	r3, #1
   b64e2:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b64e4:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b64e6:	d80f      	bhi.n	b6508 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b64e8:	f7ff ffec 	bl	b64c4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b64ec:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b64ee:	9901      	ldr	r1, [sp, #4]
   b64f0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b64f4:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b64f6:	2501      	movs	r5, #1
	contextIndex++;
   b64f8:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b64fa:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b64fc:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b64fe:	f7ff ff03 	bl	b6308 <_ZN10JsonWriter10insertCharEc>
   b6502:	4628      	mov	r0, r5
}
   b6504:	b002      	add	sp, #8
   b6506:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b6508:	2000      	movs	r0, #0
   b650a:	e7fb      	b.n	b6504 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b650c <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   b650c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b650e:	4604      	mov	r4, r0
   b6510:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
   b6514:	f7fd fee8 	bl	b42e8 <__aeabi_f2d>
	if (floatPlaces >= 0) {
   b6518:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   b651a:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
   b651c:	4602      	mov	r2, r0
   b651e:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
   b6520:	db08      	blt.n	b6534 <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
   b6522:	e9cd 2300 	strd	r2, r3, [sp]
   b6526:	4907      	ldr	r1, [pc, #28]	; (b6544 <_ZN10JsonWriter11insertValueEf+0x38>)
   b6528:	462a      	mov	r2, r5
   b652a:	4620      	mov	r0, r4
   b652c:	f7ff ff2b 	bl	b6386 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   b6530:	b003      	add	sp, #12
   b6532:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
   b6534:	4904      	ldr	r1, [pc, #16]	; (b6548 <_ZN10JsonWriter11insertValueEf+0x3c>)
   b6536:	4620      	mov	r0, r4
}
   b6538:	b003      	add	sp, #12
   b653a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
   b653e:	f7ff bf22 	b.w	b6386 <_ZN10JsonWriter13insertsprintfEPKcz>
   b6542:	bf00      	nop
   b6544:	000b9517 	.word	0x000b9517
   b6548:	000b951c 	.word	0x000b951c

000b654c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b654c:	b508      	push	{r3, lr}
   b654e:	4b02      	ldr	r3, [pc, #8]	; (b6558 <os_mutex_recursive_create+0xc>)
   b6550:	681b      	ldr	r3, [r3, #0]
   b6552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6554:	9301      	str	r3, [sp, #4]
   b6556:	bd08      	pop	{r3, pc}
   b6558:	00030248 	.word	0x00030248

000b655c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b655c:	b508      	push	{r3, lr}
   b655e:	4b02      	ldr	r3, [pc, #8]	; (b6568 <HAL_RNG_GetRandomNumber+0xc>)
   b6560:	681b      	ldr	r3, [r3, #0]
   b6562:	685b      	ldr	r3, [r3, #4]
   b6564:	9301      	str	r3, [sp, #4]
   b6566:	bd08      	pop	{r3, pc}
   b6568:	00030218 	.word	0x00030218

000b656c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b656c:	b508      	push	{r3, lr}
   b656e:	4b02      	ldr	r3, [pc, #8]	; (b6578 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6570:	681b      	ldr	r3, [r3, #0]
   b6572:	695b      	ldr	r3, [r3, #20]
   b6574:	9301      	str	r3, [sp, #4]
   b6576:	bd08      	pop	{r3, pc}
   b6578:	00030218 	.word	0x00030218

000b657c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b657c:	b508      	push	{r3, lr}
   b657e:	4b02      	ldr	r3, [pc, #8]	; (b6588 <hal_pin_validate_function+0xc>)
   b6580:	681b      	ldr	r3, [r3, #0]
   b6582:	685b      	ldr	r3, [r3, #4]
   b6584:	9301      	str	r3, [sp, #4]
   b6586:	bd08      	pop	{r3, pc}
   b6588:	0003022c 	.word	0x0003022c

000b658c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b658c:	b508      	push	{r3, lr}
   b658e:	4b02      	ldr	r3, [pc, #8]	; (b6598 <hal_gpio_mode+0xc>)
   b6590:	681b      	ldr	r3, [r3, #0]
   b6592:	689b      	ldr	r3, [r3, #8]
   b6594:	9301      	str	r3, [sp, #4]
   b6596:	bd08      	pop	{r3, pc}
   b6598:	0003022c 	.word	0x0003022c

000b659c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b659c:	b508      	push	{r3, lr}
   b659e:	4b02      	ldr	r3, [pc, #8]	; (b65a8 <hal_gpio_get_mode+0xc>)
   b65a0:	681b      	ldr	r3, [r3, #0]
   b65a2:	68db      	ldr	r3, [r3, #12]
   b65a4:	9301      	str	r3, [sp, #4]
   b65a6:	bd08      	pop	{r3, pc}
   b65a8:	0003022c 	.word	0x0003022c

000b65ac <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b65ac:	b508      	push	{r3, lr}
   b65ae:	4b02      	ldr	r3, [pc, #8]	; (b65b8 <hal_gpio_write+0xc>)
   b65b0:	681b      	ldr	r3, [r3, #0]
   b65b2:	691b      	ldr	r3, [r3, #16]
   b65b4:	9301      	str	r3, [sp, #4]
   b65b6:	bd08      	pop	{r3, pc}
   b65b8:	0003022c 	.word	0x0003022c

000b65bc <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b65bc:	b508      	push	{r3, lr}
   b65be:	4b02      	ldr	r3, [pc, #8]	; (b65c8 <hal_gpio_read+0xc>)
   b65c0:	681b      	ldr	r3, [r3, #0]
   b65c2:	695b      	ldr	r3, [r3, #20]
   b65c4:	9301      	str	r3, [sp, #4]
   b65c6:	bd08      	pop	{r3, pc}
   b65c8:	0003022c 	.word	0x0003022c

000b65cc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b65cc:	b508      	push	{r3, lr}
   b65ce:	4b02      	ldr	r3, [pc, #8]	; (b65d8 <hal_adc_read+0xc>)
   b65d0:	681b      	ldr	r3, [r3, #0]
   b65d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65d4:	9301      	str	r3, [sp, #4]
   b65d6:	bd08      	pop	{r3, pc}
   b65d8:	0003022c 	.word	0x0003022c

000b65dc <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
   b65dc:	b508      	push	{r3, lr}
   b65de:	4b02      	ldr	r3, [pc, #8]	; (b65e8 <hal_gpio_pulse_in+0xc>)
   b65e0:	681b      	ldr	r3, [r3, #0]
   b65e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b65e4:	9301      	str	r3, [sp, #4]
   b65e6:	bd08      	pop	{r3, pc}
   b65e8:	0003022c 	.word	0x0003022c

000b65ec <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b65ec:	b508      	push	{r3, lr}
   b65ee:	4b02      	ldr	r3, [pc, #8]	; (b65f8 <hal_i2c_begin+0xc>)
   b65f0:	681b      	ldr	r3, [r3, #0]
   b65f2:	68db      	ldr	r3, [r3, #12]
   b65f4:	9301      	str	r3, [sp, #4]
   b65f6:	bd08      	pop	{r3, pc}
   b65f8:	00030228 	.word	0x00030228

000b65fc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b65fc:	b508      	push	{r3, lr}
   b65fe:	4b02      	ldr	r3, [pc, #8]	; (b6608 <hal_i2c_begin_transmission+0xc>)
   b6600:	681b      	ldr	r3, [r3, #0]
   b6602:	699b      	ldr	r3, [r3, #24]
   b6604:	9301      	str	r3, [sp, #4]
   b6606:	bd08      	pop	{r3, pc}
   b6608:	00030228 	.word	0x00030228

000b660c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b660c:	b508      	push	{r3, lr}
   b660e:	4b02      	ldr	r3, [pc, #8]	; (b6618 <hal_i2c_end_transmission+0xc>)
   b6610:	681b      	ldr	r3, [r3, #0]
   b6612:	69db      	ldr	r3, [r3, #28]
   b6614:	9301      	str	r3, [sp, #4]
   b6616:	bd08      	pop	{r3, pc}
   b6618:	00030228 	.word	0x00030228

000b661c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b661c:	b508      	push	{r3, lr}
   b661e:	4b02      	ldr	r3, [pc, #8]	; (b6628 <hal_i2c_write+0xc>)
   b6620:	681b      	ldr	r3, [r3, #0]
   b6622:	6a1b      	ldr	r3, [r3, #32]
   b6624:	9301      	str	r3, [sp, #4]
   b6626:	bd08      	pop	{r3, pc}
   b6628:	00030228 	.word	0x00030228

000b662c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b662c:	b508      	push	{r3, lr}
   b662e:	4b02      	ldr	r3, [pc, #8]	; (b6638 <hal_i2c_available+0xc>)
   b6630:	681b      	ldr	r3, [r3, #0]
   b6632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6634:	9301      	str	r3, [sp, #4]
   b6636:	bd08      	pop	{r3, pc}
   b6638:	00030228 	.word	0x00030228

000b663c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b663c:	b508      	push	{r3, lr}
   b663e:	4b02      	ldr	r3, [pc, #8]	; (b6648 <hal_i2c_read+0xc>)
   b6640:	681b      	ldr	r3, [r3, #0]
   b6642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6644:	9301      	str	r3, [sp, #4]
   b6646:	bd08      	pop	{r3, pc}
   b6648:	00030228 	.word	0x00030228

000b664c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b664c:	b508      	push	{r3, lr}
   b664e:	4b02      	ldr	r3, [pc, #8]	; (b6658 <hal_i2c_peek+0xc>)
   b6650:	681b      	ldr	r3, [r3, #0]
   b6652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6654:	9301      	str	r3, [sp, #4]
   b6656:	bd08      	pop	{r3, pc}
   b6658:	00030228 	.word	0x00030228

000b665c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b665c:	b508      	push	{r3, lr}
   b665e:	4b02      	ldr	r3, [pc, #8]	; (b6668 <hal_i2c_flush+0xc>)
   b6660:	681b      	ldr	r3, [r3, #0]
   b6662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6664:	9301      	str	r3, [sp, #4]
   b6666:	bd08      	pop	{r3, pc}
   b6668:	00030228 	.word	0x00030228

000b666c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b666c:	b508      	push	{r3, lr}
   b666e:	4b02      	ldr	r3, [pc, #8]	; (b6678 <hal_i2c_is_enabled+0xc>)
   b6670:	681b      	ldr	r3, [r3, #0]
   b6672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6674:	9301      	str	r3, [sp, #4]
   b6676:	bd08      	pop	{r3, pc}
   b6678:	00030228 	.word	0x00030228

000b667c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b667c:	b508      	push	{r3, lr}
   b667e:	4b02      	ldr	r3, [pc, #8]	; (b6688 <hal_i2c_init+0xc>)
   b6680:	681b      	ldr	r3, [r3, #0]
   b6682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6684:	9301      	str	r3, [sp, #4]
   b6686:	bd08      	pop	{r3, pc}
   b6688:	00030228 	.word	0x00030228

000b668c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b668c:	b508      	push	{r3, lr}
   b668e:	4b02      	ldr	r3, [pc, #8]	; (b6698 <hal_i2c_request_ex+0xc>)
   b6690:	681b      	ldr	r3, [r3, #0]
   b6692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6694:	9301      	str	r3, [sp, #4]
   b6696:	bd08      	pop	{r3, pc}
   b6698:	00030228 	.word	0x00030228

000b669c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b669c:	b508      	push	{r3, lr}
   b669e:	4b02      	ldr	r3, [pc, #8]	; (b66a8 <inet_inet_ntop+0xc>)
   b66a0:	681b      	ldr	r3, [r3, #0]
   b66a2:	695b      	ldr	r3, [r3, #20]
   b66a4:	9301      	str	r3, [sp, #4]
   b66a6:	bd08      	pop	{r3, pc}
   b66a8:	00030264 	.word	0x00030264

000b66ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b66ac:	b508      	push	{r3, lr}
   b66ae:	4b02      	ldr	r3, [pc, #8]	; (b66b8 <netdb_freeaddrinfo+0xc>)
   b66b0:	681b      	ldr	r3, [r3, #0]
   b66b2:	689b      	ldr	r3, [r3, #8]
   b66b4:	9301      	str	r3, [sp, #4]
   b66b6:	bd08      	pop	{r3, pc}
   b66b8:	00030268 	.word	0x00030268

000b66bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b66bc:	b508      	push	{r3, lr}
   b66be:	4b02      	ldr	r3, [pc, #8]	; (b66c8 <netdb_getaddrinfo+0xc>)
   b66c0:	681b      	ldr	r3, [r3, #0]
   b66c2:	68db      	ldr	r3, [r3, #12]
   b66c4:	9301      	str	r3, [sp, #4]
   b66c6:	bd08      	pop	{r3, pc}
   b66c8:	00030268 	.word	0x00030268

000b66cc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b66cc:	b508      	push	{r3, lr}
   b66ce:	4b02      	ldr	r3, [pc, #8]	; (b66d8 <hal_spi_begin+0xc>)
   b66d0:	681b      	ldr	r3, [r3, #0]
   b66d2:	681b      	ldr	r3, [r3, #0]
   b66d4:	9301      	str	r3, [sp, #4]
   b66d6:	bd08      	pop	{r3, pc}
   b66d8:	00030230 	.word	0x00030230

000b66dc <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b66dc:	b508      	push	{r3, lr}
   b66de:	4b02      	ldr	r3, [pc, #8]	; (b66e8 <hal_spi_transfer+0xc>)
   b66e0:	681b      	ldr	r3, [r3, #0]
   b66e2:	695b      	ldr	r3, [r3, #20]
   b66e4:	9301      	str	r3, [sp, #4]
   b66e6:	bd08      	pop	{r3, pc}
   b66e8:	00030230 	.word	0x00030230

000b66ec <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b66ec:	b508      	push	{r3, lr}
   b66ee:	4b02      	ldr	r3, [pc, #8]	; (b66f8 <hal_spi_init+0xc>)
   b66f0:	681b      	ldr	r3, [r3, #0]
   b66f2:	69db      	ldr	r3, [r3, #28]
   b66f4:	9301      	str	r3, [sp, #4]
   b66f6:	bd08      	pop	{r3, pc}
   b66f8:	00030230 	.word	0x00030230

000b66fc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b66fc:	b508      	push	{r3, lr}
   b66fe:	4b02      	ldr	r3, [pc, #8]	; (b6708 <hal_spi_is_enabled+0xc>)
   b6700:	681b      	ldr	r3, [r3, #0]
   b6702:	6a1b      	ldr	r3, [r3, #32]
   b6704:	9301      	str	r3, [sp, #4]
   b6706:	bd08      	pop	{r3, pc}
   b6708:	00030230 	.word	0x00030230

000b670c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b670c:	b508      	push	{r3, lr}
   b670e:	4b02      	ldr	r3, [pc, #8]	; (b6718 <hal_spi_info+0xc>)
   b6710:	681b      	ldr	r3, [r3, #0]
   b6712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6714:	9301      	str	r3, [sp, #4]
   b6716:	bd08      	pop	{r3, pc}
   b6718:	00030230 	.word	0x00030230

000b671c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b671c:	b508      	push	{r3, lr}
   b671e:	4b02      	ldr	r3, [pc, #8]	; (b6728 <hal_spi_set_settings+0xc>)
   b6720:	681b      	ldr	r3, [r3, #0]
   b6722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6724:	9301      	str	r3, [sp, #4]
   b6726:	bd08      	pop	{r3, pc}
   b6728:	00030230 	.word	0x00030230

000b672c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b672c:	b508      	push	{r3, lr}
   b672e:	4b02      	ldr	r3, [pc, #8]	; (b6738 <hal_spi_acquire+0xc>)
   b6730:	681b      	ldr	r3, [r3, #0]
   b6732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6734:	9301      	str	r3, [sp, #4]
   b6736:	bd08      	pop	{r3, pc}
   b6738:	00030230 	.word	0x00030230

000b673c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b673c:	b508      	push	{r3, lr}
   b673e:	4b02      	ldr	r3, [pc, #8]	; (b6748 <hal_spi_release+0xc>)
   b6740:	681b      	ldr	r3, [r3, #0]
   b6742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6744:	9301      	str	r3, [sp, #4]
   b6746:	bd08      	pop	{r3, pc}
   b6748:	00030230 	.word	0x00030230

000b674c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b674c:	b508      	push	{r3, lr}
   b674e:	4b02      	ldr	r3, [pc, #8]	; (b6758 <hal_usart_write+0xc>)
   b6750:	681b      	ldr	r3, [r3, #0]
   b6752:	68db      	ldr	r3, [r3, #12]
   b6754:	9301      	str	r3, [sp, #4]
   b6756:	bd08      	pop	{r3, pc}
   b6758:	0003023c 	.word	0x0003023c

000b675c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b675c:	b508      	push	{r3, lr}
   b675e:	4b02      	ldr	r3, [pc, #8]	; (b6768 <hal_usart_available+0xc>)
   b6760:	681b      	ldr	r3, [r3, #0]
   b6762:	691b      	ldr	r3, [r3, #16]
   b6764:	9301      	str	r3, [sp, #4]
   b6766:	bd08      	pop	{r3, pc}
   b6768:	0003023c 	.word	0x0003023c

000b676c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b676c:	b508      	push	{r3, lr}
   b676e:	4b02      	ldr	r3, [pc, #8]	; (b6778 <hal_usart_read+0xc>)
   b6770:	681b      	ldr	r3, [r3, #0]
   b6772:	695b      	ldr	r3, [r3, #20]
   b6774:	9301      	str	r3, [sp, #4]
   b6776:	bd08      	pop	{r3, pc}
   b6778:	0003023c 	.word	0x0003023c

000b677c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b677c:	b508      	push	{r3, lr}
   b677e:	4b02      	ldr	r3, [pc, #8]	; (b6788 <hal_usart_peek+0xc>)
   b6780:	681b      	ldr	r3, [r3, #0]
   b6782:	699b      	ldr	r3, [r3, #24]
   b6784:	9301      	str	r3, [sp, #4]
   b6786:	bd08      	pop	{r3, pc}
   b6788:	0003023c 	.word	0x0003023c

000b678c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b678c:	b508      	push	{r3, lr}
   b678e:	4b02      	ldr	r3, [pc, #8]	; (b6798 <hal_usart_flush+0xc>)
   b6790:	681b      	ldr	r3, [r3, #0]
   b6792:	69db      	ldr	r3, [r3, #28]
   b6794:	9301      	str	r3, [sp, #4]
   b6796:	bd08      	pop	{r3, pc}
   b6798:	0003023c 	.word	0x0003023c

000b679c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b679c:	b508      	push	{r3, lr}
   b679e:	4b02      	ldr	r3, [pc, #8]	; (b67a8 <hal_usart_is_enabled+0xc>)
   b67a0:	681b      	ldr	r3, [r3, #0]
   b67a2:	6a1b      	ldr	r3, [r3, #32]
   b67a4:	9301      	str	r3, [sp, #4]
   b67a6:	bd08      	pop	{r3, pc}
   b67a8:	0003023c 	.word	0x0003023c

000b67ac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b67ac:	b508      	push	{r3, lr}
   b67ae:	4b02      	ldr	r3, [pc, #8]	; (b67b8 <hal_usart_available_data_for_write+0xc>)
   b67b0:	681b      	ldr	r3, [r3, #0]
   b67b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b67b4:	9301      	str	r3, [sp, #4]
   b67b6:	bd08      	pop	{r3, pc}
   b67b8:	0003023c 	.word	0x0003023c

000b67bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b67bc:	b508      	push	{r3, lr}
   b67be:	4b02      	ldr	r3, [pc, #8]	; (b67c8 <hal_usart_init_ex+0xc>)
   b67c0:	681b      	ldr	r3, [r3, #0]
   b67c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67c4:	9301      	str	r3, [sp, #4]
   b67c6:	bd08      	pop	{r3, pc}
   b67c8:	0003023c 	.word	0x0003023c

000b67cc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b67cc:	b508      	push	{r3, lr}
   b67ce:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <HAL_USB_USART_Init+0xc>)
   b67d0:	681b      	ldr	r3, [r3, #0]
   b67d2:	681b      	ldr	r3, [r3, #0]
   b67d4:	9301      	str	r3, [sp, #4]
   b67d6:	bd08      	pop	{r3, pc}
   b67d8:	0003024c 	.word	0x0003024c

000b67dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b67dc:	b508      	push	{r3, lr}
   b67de:	4b02      	ldr	r3, [pc, #8]	; (b67e8 <HAL_USB_USART_Begin+0xc>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	685b      	ldr	r3, [r3, #4]
   b67e4:	9301      	str	r3, [sp, #4]
   b67e6:	bd08      	pop	{r3, pc}
   b67e8:	0003024c 	.word	0x0003024c

000b67ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b02      	ldr	r3, [pc, #8]	; (b67f8 <HAL_USB_USART_Available_Data+0xc>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	691b      	ldr	r3, [r3, #16]
   b67f4:	9301      	str	r3, [sp, #4]
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	0003024c 	.word	0x0003024c

000b67fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b67fc:	b508      	push	{r3, lr}
   b67fe:	4b02      	ldr	r3, [pc, #8]	; (b6808 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	695b      	ldr	r3, [r3, #20]
   b6804:	9301      	str	r3, [sp, #4]
   b6806:	bd08      	pop	{r3, pc}
   b6808:	0003024c 	.word	0x0003024c

000b680c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <HAL_USB_USART_Receive_Data+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	699b      	ldr	r3, [r3, #24]
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	0003024c 	.word	0x0003024c

000b681c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <HAL_USB_USART_Send_Data+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	69db      	ldr	r3, [r3, #28]
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	0003024c 	.word	0x0003024c

000b682c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b682c:	b508      	push	{r3, lr}
   b682e:	4b02      	ldr	r3, [pc, #8]	; (b6838 <HAL_USB_USART_Flush_Data+0xc>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	6a1b      	ldr	r3, [r3, #32]
   b6834:	9301      	str	r3, [sp, #4]
   b6836:	bd08      	pop	{r3, pc}
   b6838:	0003024c 	.word	0x0003024c

000b683c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b683c:	b508      	push	{r3, lr}
   b683e:	4b02      	ldr	r3, [pc, #8]	; (b6848 <set_system_mode+0xc>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	685b      	ldr	r3, [r3, #4]
   b6844:	9301      	str	r3, [sp, #4]
   b6846:	bd08      	pop	{r3, pc}
   b6848:	00030220 	.word	0x00030220

000b684c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b684c:	b508      	push	{r3, lr}
   b684e:	4b02      	ldr	r3, [pc, #8]	; (b6858 <system_delay_ms+0xc>)
   b6850:	681b      	ldr	r3, [r3, #0]
   b6852:	695b      	ldr	r3, [r3, #20]
   b6854:	9301      	str	r3, [sp, #4]
   b6856:	bd08      	pop	{r3, pc}
   b6858:	00030220 	.word	0x00030220

000b685c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b685c:	b508      	push	{r3, lr}
   b685e:	4b02      	ldr	r3, [pc, #8]	; (b6868 <application_thread_current+0xc>)
   b6860:	681b      	ldr	r3, [r3, #0]
   b6862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6864:	9301      	str	r3, [sp, #4]
   b6866:	bd08      	pop	{r3, pc}
   b6868:	00030220 	.word	0x00030220

000b686c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b686c:	b508      	push	{r3, lr}
   b686e:	4b02      	ldr	r3, [pc, #8]	; (b6878 <application_thread_invoke+0xc>)
   b6870:	681b      	ldr	r3, [r3, #0]
   b6872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6874:	9301      	str	r3, [sp, #4]
   b6876:	bd08      	pop	{r3, pc}
   b6878:	00030220 	.word	0x00030220

000b687c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b687c:	b508      	push	{r3, lr}
   b687e:	4b03      	ldr	r3, [pc, #12]	; (b688c <system_ctrl_set_app_request_handler+0x10>)
   b6880:	681b      	ldr	r3, [r3, #0]
   b6882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6886:	9301      	str	r3, [sp, #4]
   b6888:	bd08      	pop	{r3, pc}
   b688a:	0000      	.short	0x0000
   b688c:	00030220 	.word	0x00030220

000b6890 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6890:	b508      	push	{r3, lr}
   b6892:	4b03      	ldr	r3, [pc, #12]	; (b68a0 <system_ctrl_set_result+0x10>)
   b6894:	681b      	ldr	r3, [r3, #0]
   b6896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b689a:	9301      	str	r3, [sp, #4]
   b689c:	bd08      	pop	{r3, pc}
   b689e:	0000      	.short	0x0000
   b68a0:	00030220 	.word	0x00030220

000b68a4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b68a4:	b508      	push	{r3, lr}
   b68a6:	4b02      	ldr	r3, [pc, #8]	; (b68b0 <spark_cloud_flag_connected+0xc>)
   b68a8:	681b      	ldr	r3, [r3, #0]
   b68aa:	695b      	ldr	r3, [r3, #20]
   b68ac:	9301      	str	r3, [sp, #4]
   b68ae:	bd08      	pop	{r3, pc}
   b68b0:	00030244 	.word	0x00030244

000b68b4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b68b4:	b508      	push	{r3, lr}
   b68b6:	4b02      	ldr	r3, [pc, #8]	; (b68c0 <spark_send_event+0xc>)
   b68b8:	681b      	ldr	r3, [r3, #0]
   b68ba:	6a1b      	ldr	r3, [r3, #32]
   b68bc:	9301      	str	r3, [sp, #4]
   b68be:	bd08      	pop	{r3, pc}
   b68c0:	00030244 	.word	0x00030244

000b68c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b68c4:	b508      	push	{r3, lr}
   b68c6:	4b02      	ldr	r3, [pc, #8]	; (b68d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b68c8:	681b      	ldr	r3, [r3, #0]
   b68ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b68cc:	9301      	str	r3, [sp, #4]
   b68ce:	bd08      	pop	{r3, pc}
   b68d0:	00030244 	.word	0x00030244

000b68d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b68d4:	b508      	push	{r3, lr}
   b68d6:	4b02      	ldr	r3, [pc, #8]	; (b68e0 <network_connect+0xc>)
   b68d8:	681b      	ldr	r3, [r3, #0]
   b68da:	685b      	ldr	r3, [r3, #4]
   b68dc:	9301      	str	r3, [sp, #4]
   b68de:	bd08      	pop	{r3, pc}
   b68e0:	00030240 	.word	0x00030240

000b68e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b68e4:	b508      	push	{r3, lr}
   b68e6:	4b02      	ldr	r3, [pc, #8]	; (b68f0 <network_connecting+0xc>)
   b68e8:	681b      	ldr	r3, [r3, #0]
   b68ea:	689b      	ldr	r3, [r3, #8]
   b68ec:	9301      	str	r3, [sp, #4]
   b68ee:	bd08      	pop	{r3, pc}
   b68f0:	00030240 	.word	0x00030240

000b68f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b68f4:	b508      	push	{r3, lr}
   b68f6:	4b02      	ldr	r3, [pc, #8]	; (b6900 <network_disconnect+0xc>)
   b68f8:	681b      	ldr	r3, [r3, #0]
   b68fa:	68db      	ldr	r3, [r3, #12]
   b68fc:	9301      	str	r3, [sp, #4]
   b68fe:	bd08      	pop	{r3, pc}
   b6900:	00030240 	.word	0x00030240

000b6904 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6904:	b508      	push	{r3, lr}
   b6906:	4b02      	ldr	r3, [pc, #8]	; (b6910 <network_ready+0xc>)
   b6908:	681b      	ldr	r3, [r3, #0]
   b690a:	691b      	ldr	r3, [r3, #16]
   b690c:	9301      	str	r3, [sp, #4]
   b690e:	bd08      	pop	{r3, pc}
   b6910:	00030240 	.word	0x00030240

000b6914 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6914:	b508      	push	{r3, lr}
   b6916:	4b02      	ldr	r3, [pc, #8]	; (b6920 <network_on+0xc>)
   b6918:	681b      	ldr	r3, [r3, #0]
   b691a:	695b      	ldr	r3, [r3, #20]
   b691c:	9301      	str	r3, [sp, #4]
   b691e:	bd08      	pop	{r3, pc}
   b6920:	00030240 	.word	0x00030240

000b6924 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6924:	b508      	push	{r3, lr}
   b6926:	4b02      	ldr	r3, [pc, #8]	; (b6930 <network_off+0xc>)
   b6928:	681b      	ldr	r3, [r3, #0]
   b692a:	699b      	ldr	r3, [r3, #24]
   b692c:	9301      	str	r3, [sp, #4]
   b692e:	bd08      	pop	{r3, pc}
   b6930:	00030240 	.word	0x00030240

000b6934 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6934:	b508      	push	{r3, lr}
   b6936:	4b02      	ldr	r3, [pc, #8]	; (b6940 <network_listen+0xc>)
   b6938:	681b      	ldr	r3, [r3, #0]
   b693a:	69db      	ldr	r3, [r3, #28]
   b693c:	9301      	str	r3, [sp, #4]
   b693e:	bd08      	pop	{r3, pc}
   b6940:	00030240 	.word	0x00030240

000b6944 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6944:	b508      	push	{r3, lr}
   b6946:	4b02      	ldr	r3, [pc, #8]	; (b6950 <network_listening+0xc>)
   b6948:	681b      	ldr	r3, [r3, #0]
   b694a:	6a1b      	ldr	r3, [r3, #32]
   b694c:	9301      	str	r3, [sp, #4]
   b694e:	bd08      	pop	{r3, pc}
   b6950:	00030240 	.word	0x00030240

000b6954 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6954:	b508      	push	{r3, lr}
   b6956:	4b02      	ldr	r3, [pc, #8]	; (b6960 <network_set_listen_timeout+0xc>)
   b6958:	681b      	ldr	r3, [r3, #0]
   b695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b695c:	9301      	str	r3, [sp, #4]
   b695e:	bd08      	pop	{r3, pc}
   b6960:	00030240 	.word	0x00030240

000b6964 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6964:	b508      	push	{r3, lr}
   b6966:	4b02      	ldr	r3, [pc, #8]	; (b6970 <network_get_listen_timeout+0xc>)
   b6968:	681b      	ldr	r3, [r3, #0]
   b696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b696c:	9301      	str	r3, [sp, #4]
   b696e:	bd08      	pop	{r3, pc}
   b6970:	00030240 	.word	0x00030240

000b6974 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6974:	b508      	push	{r3, lr}
   b6976:	4b02      	ldr	r3, [pc, #8]	; (b6980 <network_is_on+0xc>)
   b6978:	681b      	ldr	r3, [r3, #0]
   b697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b697c:	9301      	str	r3, [sp, #4]
   b697e:	bd08      	pop	{r3, pc}
   b6980:	00030240 	.word	0x00030240

000b6984 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6984:	b508      	push	{r3, lr}
   b6986:	4b02      	ldr	r3, [pc, #8]	; (b6990 <network_is_off+0xc>)
   b6988:	681b      	ldr	r3, [r3, #0]
   b698a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b698c:	9301      	str	r3, [sp, #4]
   b698e:	bd08      	pop	{r3, pc}
   b6990:	00030240 	.word	0x00030240

000b6994 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6994:	b508      	push	{r3, lr}
   b6996:	4b02      	ldr	r3, [pc, #8]	; (b69a0 <malloc+0xc>)
   b6998:	681b      	ldr	r3, [r3, #0]
   b699a:	681b      	ldr	r3, [r3, #0]
   b699c:	9301      	str	r3, [sp, #4]
   b699e:	bd08      	pop	{r3, pc}
   b69a0:	0003021c 	.word	0x0003021c

000b69a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b69a4:	b508      	push	{r3, lr}
   b69a6:	4b02      	ldr	r3, [pc, #8]	; (b69b0 <free+0xc>)
   b69a8:	681b      	ldr	r3, [r3, #0]
   b69aa:	685b      	ldr	r3, [r3, #4]
   b69ac:	9301      	str	r3, [sp, #4]
   b69ae:	bd08      	pop	{r3, pc}
   b69b0:	0003021c 	.word	0x0003021c

000b69b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b69b4:	b508      	push	{r3, lr}
   b69b6:	4b02      	ldr	r3, [pc, #8]	; (b69c0 <realloc+0xc>)
   b69b8:	681b      	ldr	r3, [r3, #0]
   b69ba:	689b      	ldr	r3, [r3, #8]
   b69bc:	9301      	str	r3, [sp, #4]
   b69be:	bd08      	pop	{r3, pc}
   b69c0:	0003021c 	.word	0x0003021c

000b69c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b69c4:	b508      	push	{r3, lr}
   b69c6:	4b02      	ldr	r3, [pc, #8]	; (b69d0 <vsnprintf+0xc>)
   b69c8:	681b      	ldr	r3, [r3, #0]
   b69ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b69cc:	9301      	str	r3, [sp, #4]
   b69ce:	bd08      	pop	{r3, pc}
   b69d0:	0003021c 	.word	0x0003021c

000b69d4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b69d4:	b508      	push	{r3, lr}
   b69d6:	4b02      	ldr	r3, [pc, #8]	; (b69e0 <abort+0xc>)
   b69d8:	681b      	ldr	r3, [r3, #0]
   b69da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b69dc:	9301      	str	r3, [sp, #4]
   b69de:	bd08      	pop	{r3, pc}
   b69e0:	0003021c 	.word	0x0003021c

000b69e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b69e4:	b508      	push	{r3, lr}
   b69e6:	4b02      	ldr	r3, [pc, #8]	; (b69f0 <_malloc_r+0xc>)
   b69e8:	681b      	ldr	r3, [r3, #0]
   b69ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69ec:	9301      	str	r3, [sp, #4]
   b69ee:	bd08      	pop	{r3, pc}
   b69f0:	0003021c 	.word	0x0003021c

000b69f4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b69f4:	b508      	push	{r3, lr}
   b69f6:	4b02      	ldr	r3, [pc, #8]	; (b6a00 <__errno+0xc>)
   b69f8:	681b      	ldr	r3, [r3, #0]
   b69fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b69fc:	9301      	str	r3, [sp, #4]
   b69fe:	bd08      	pop	{r3, pc}
   b6a00:	0003021c 	.word	0x0003021c

000b6a04 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6a04:	b508      	push	{r3, lr}
   b6a06:	4b02      	ldr	r3, [pc, #8]	; (b6a10 <__assert_func+0xc>)
   b6a08:	681b      	ldr	r3, [r3, #0]
   b6a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a0c:	9301      	str	r3, [sp, #4]
   b6a0e:	bd08      	pop	{r3, pc}
   b6a10:	0003021c 	.word	0x0003021c

000b6a14 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6a14:	b508      	push	{r3, lr}
   b6a16:	4b02      	ldr	r3, [pc, #8]	; (b6a20 <newlib_impure_ptr_callback+0xc>)
   b6a18:	681b      	ldr	r3, [r3, #0]
   b6a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a1c:	9301      	str	r3, [sp, #4]
   b6a1e:	bd08      	pop	{r3, pc}
   b6a20:	0003021c 	.word	0x0003021c

000b6a24 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6a24:	2100      	movs	r1, #0
   b6a26:	f7ff bf11 	b.w	b684c <system_delay_ms>

000b6a2a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6a2a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6a2c:	6883      	ldr	r3, [r0, #8]
   b6a2e:	4604      	mov	r4, r0
   b6a30:	b90b      	cbnz	r3, b6a36 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6a32:	f001 f989 	bl	b7d48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a36:	68c3      	ldr	r3, [r0, #12]
   b6a38:	4798      	blx	r3
      if (_M_manager)
   b6a3a:	68a3      	ldr	r3, [r4, #8]
   b6a3c:	b11b      	cbz	r3, b6a46 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6a3e:	2203      	movs	r2, #3
   b6a40:	4621      	mov	r1, r4
   b6a42:	4620      	mov	r0, r4
   b6a44:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6a46:	4620      	mov	r0, r4
   b6a48:	2110      	movs	r1, #16
}
   b6a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6a4e:	f7fe bab2 	b.w	b4fb6 <_ZdlPvj>

000b6a52 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6a52:	b510      	push	{r4, lr}
      if (_M_manager)
   b6a54:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6a56:	4604      	mov	r4, r0
      if (_M_manager)
   b6a58:	b113      	cbz	r3, b6a60 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6a5a:	2203      	movs	r2, #3
   b6a5c:	4601      	mov	r1, r0
   b6a5e:	4798      	blx	r3
    }
   b6a60:	4620      	mov	r0, r4
   b6a62:	bd10      	pop	{r4, pc}

000b6a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6a64:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6a66:	6843      	ldr	r3, [r0, #4]
   b6a68:	3b01      	subs	r3, #1
    {
   b6a6a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6a6c:	6043      	str	r3, [r0, #4]
   b6a6e:	b963      	cbnz	r3, b6a8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6a70:	6803      	ldr	r3, [r0, #0]
   b6a72:	689b      	ldr	r3, [r3, #8]
   b6a74:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6a76:	68a3      	ldr	r3, [r4, #8]
   b6a78:	3b01      	subs	r3, #1
   b6a7a:	60a3      	str	r3, [r4, #8]
   b6a7c:	b92b      	cbnz	r3, b6a8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6a7e:	6823      	ldr	r3, [r4, #0]
   b6a80:	4620      	mov	r0, r4
   b6a82:	68db      	ldr	r3, [r3, #12]
    }
   b6a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6a88:	4718      	bx	r3
    }
   b6a8a:	bd10      	pop	{r4, pc}

000b6a8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6a8c:	b510      	push	{r4, lr}
   b6a8e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6a90:	6800      	ldr	r0, [r0, #0]
   b6a92:	b108      	cbz	r0, b6a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6a94:	f7ff ffe6 	bl	b6a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6a98:	4620      	mov	r0, r4
   b6a9a:	bd10      	pop	{r4, pc}

000b6a9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6a9c:	b513      	push	{r0, r1, r4, lr}
   b6a9e:	460b      	mov	r3, r1
   b6aa0:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6aa2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6aa6:	466c      	mov	r4, sp
   b6aa8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6aac:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6ab0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6ab4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6ab8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6abc:	b002      	add	sp, #8
   b6abe:	bd10      	pop	{r4, pc}

000b6ac0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6ac0:	4802      	ldr	r0, [pc, #8]	; (b6acc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6ac2:	2300      	movs	r3, #0
   b6ac4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6ac6:	f7ff bd41 	b.w	b654c <os_mutex_recursive_create>
   b6aca:	bf00      	nop
   b6acc:	2003e6c4 	.word	0x2003e6c4

000b6ad0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6ad0:	4770      	bx	lr

000b6ad2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6ad2:	2000      	movs	r0, #0
   b6ad4:	4770      	bx	lr

000b6ad6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6ad6:	b510      	push	{r4, lr}
   b6ad8:	2110      	movs	r1, #16
   b6ada:	4604      	mov	r4, r0
   b6adc:	f7fe fa6b 	bl	b4fb6 <_ZdlPvj>
   b6ae0:	4620      	mov	r0, r4
   b6ae2:	bd10      	pop	{r4, pc}

000b6ae4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6ae4:	b508      	push	{r3, lr}
      { delete this; }
   b6ae6:	f7ff fff6 	bl	b6ad6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6aea:	bd08      	pop	{r3, pc}

000b6aec <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6aec:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6aee:	2200      	movs	r2, #0
   b6af0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6af4:	6002      	str	r2, [r0, #0]
   b6af6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6af8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6afa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6afc:	680c      	ldr	r4, [r1, #0]
   b6afe:	8085      	strh	r5, [r0, #4]
   b6b00:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b02:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6b04:	bd30      	pop	{r4, r5, pc}

000b6b06 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6b06:	b510      	push	{r4, lr}
   b6b08:	4604      	mov	r4, r0
    free((void*)msg_);
   b6b0a:	6800      	ldr	r0, [r0, #0]
   b6b0c:	f7ff ff4a 	bl	b69a4 <free>
}
   b6b10:	4620      	mov	r0, r4
   b6b12:	bd10      	pop	{r4, pc}

000b6b14 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6b14:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6b16:	68c4      	ldr	r4, [r0, #12]
   b6b18:	b1f4      	cbz	r4, b6b58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6b1a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6b1c:	2b02      	cmp	r3, #2
   b6b1e:	d103      	bne.n	b6b28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6b20:	f104 000c 	add.w	r0, r4, #12
   b6b24:	f7ff ffef 	bl	b6b06 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6b28:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6b2a:	b135      	cbz	r5, b6b3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6b2c:	4628      	mov	r0, r5
   b6b2e:	f7ff ff90 	bl	b6a52 <_ZNSt14_Function_baseD1Ev>
   b6b32:	2110      	movs	r1, #16
   b6b34:	4628      	mov	r0, r5
   b6b36:	f7fe fa3e 	bl	b4fb6 <_ZdlPvj>
   b6b3a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6b3c:	b135      	cbz	r5, b6b4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6b3e:	4628      	mov	r0, r5
   b6b40:	f7ff ff87 	bl	b6a52 <_ZNSt14_Function_baseD1Ev>
   b6b44:	2110      	movs	r1, #16
   b6b46:	4628      	mov	r0, r5
   b6b48:	f7fe fa35 	bl	b4fb6 <_ZdlPvj>
   b6b4c:	4620      	mov	r0, r4
   b6b4e:	2114      	movs	r1, #20
   b6b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6b54:	f7fe ba2f 	b.w	b4fb6 <_ZdlPvj>
   b6b58:	bd38      	pop	{r3, r4, r5, pc}

000b6b5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6b5a:	680b      	ldr	r3, [r1, #0]
   b6b5c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6b5e:	684b      	ldr	r3, [r1, #4]
   b6b60:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6b62:	b113      	cbz	r3, b6b6a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6b64:	685a      	ldr	r2, [r3, #4]
   b6b66:	3201      	adds	r2, #1
   b6b68:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6b6a:	4770      	bx	lr

000b6b6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b6e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6b70:	4668      	mov	r0, sp
   b6b72:	460d      	mov	r5, r1
   b6b74:	f7ff fff1 	bl	b6b5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6b78:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6b7a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6b7c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6b7e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6b80:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6b82:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6b84:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6b86:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6b88:	f7ff ff80 	bl	b6a8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6b8c:	b135      	cbz	r5, b6b9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6b8e:	1d28      	adds	r0, r5, #4
   b6b90:	f7ff ff7c 	bl	b6a8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b94:	2108      	movs	r1, #8
   b6b96:	4628      	mov	r0, r5
   b6b98:	f7fe fa0d 	bl	b4fb6 <_ZdlPvj>
        return p;
    }
   b6b9c:	4620      	mov	r0, r4
   b6b9e:	b003      	add	sp, #12
   b6ba0:	bd30      	pop	{r4, r5, pc}

000b6ba2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6ba2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6ba4:	b510      	push	{r4, lr}
      if (_M_empty())
   b6ba6:	b90a      	cbnz	r2, b6bac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6ba8:	f001 f8ce 	bl	b7d48 <_ZSt25__throw_bad_function_callv>
    }
   b6bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6bb0:	68c3      	ldr	r3, [r0, #12]
   b6bb2:	4718      	bx	r3

000b6bb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6bb4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6bb6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6bb8:	f100 0110 	add.w	r1, r0, #16
   b6bbc:	f7ff fff1 	bl	b6ba2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6bc0:	bd08      	pop	{r3, pc}

000b6bc2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6bc2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6bc4:	b510      	push	{r4, lr}
      if (_M_empty())
   b6bc6:	b90a      	cbnz	r2, b6bcc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6bc8:	f001 f8be 	bl	b7d48 <_ZSt25__throw_bad_function_callv>
    }
   b6bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6bd0:	68c3      	ldr	r3, [r0, #12]
   b6bd2:	4718      	bx	r3

000b6bd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6bd4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6bd6:	6800      	ldr	r0, [r0, #0]
   b6bd8:	f100 0110 	add.w	r1, r0, #16
   b6bdc:	f7ff fff1 	bl	b6bc2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6be0:	bd08      	pop	{r3, pc}
	...

000b6be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6be4:	b538      	push	{r3, r4, r5, lr}
   b6be6:	2300      	movs	r3, #0
   b6be8:	4604      	mov	r4, r0
   b6bea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6bec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6bee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6bf0:	f7fe f9dd 	bl	b4fae <_Znwj>
   b6bf4:	b128      	cbz	r0, b6c02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6bf6:	2301      	movs	r3, #1
   b6bf8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6bfc:	4b02      	ldr	r3, [pc, #8]	; (b6c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6bfe:	6003      	str	r3, [r0, #0]
   b6c00:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6c02:	6020      	str	r0, [r4, #0]
	}
   b6c04:	4620      	mov	r0, r4
   b6c06:	bd38      	pop	{r3, r4, r5, pc}
   b6c08:	000b9548 	.word	0x000b9548

000b6c0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6c0c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6c0e:	2300      	movs	r3, #0
   b6c10:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6c12:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6c14:	4604      	mov	r4, r0
   b6c16:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6c18:	b12b      	cbz	r3, b6c26 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6c1a:	2202      	movs	r2, #2
   b6c1c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6c1e:	68eb      	ldr	r3, [r5, #12]
   b6c20:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6c22:	68ab      	ldr	r3, [r5, #8]
   b6c24:	60a3      	str	r3, [r4, #8]
    }
   b6c26:	4620      	mov	r0, r4
   b6c28:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6c2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c2e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6c30:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6c32:	4668      	mov	r0, sp
   b6c34:	f7ff ff5a 	bl	b6aec <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6c38:	f04f 0302 	mov.w	r3, #2
   b6c3c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6c40:	2a00      	cmp	r2, #0
   b6c42:	d103      	bne.n	b6c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6c44:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6c48:	2900      	cmp	r1, #0
   b6c4a:	d1f7      	bne.n	b6c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6c4c:	d125      	bne.n	b6c9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6c4e:	f104 050c 	add.w	r5, r4, #12
   b6c52:	4669      	mov	r1, sp
   b6c54:	4628      	mov	r0, r5
   b6c56:	f7ff ff49 	bl	b6aec <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6c5a:	f3bf 8f5b 	dmb	ish
   b6c5e:	2301      	movs	r3, #1
   b6c60:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6c62:	2000      	movs	r0, #0
   b6c64:	f104 0308 	add.w	r3, r4, #8
   b6c68:	f3bf 8f5b 	dmb	ish
   b6c6c:	e853 6f00 	ldrex	r6, [r3]
   b6c70:	e843 0200 	strex	r2, r0, [r3]
   b6c74:	2a00      	cmp	r2, #0
   b6c76:	d1f9      	bne.n	b6c6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6c78:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6c7c:	b16e      	cbz	r6, b6c9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6c7e:	f7ff fded 	bl	b685c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6c82:	b178      	cbz	r0, b6ca4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6c84:	4629      	mov	r1, r5
   b6c86:	4630      	mov	r0, r6
   b6c88:	f7ff ff8b 	bl	b6ba2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6c8c:	4630      	mov	r0, r6
   b6c8e:	f7ff fee0 	bl	b6a52 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6c92:	2110      	movs	r1, #16
   b6c94:	4630      	mov	r0, r6
   b6c96:	f7fe f98e 	bl	b4fb6 <_ZdlPvj>
        p_->setError(std::move(error));
   b6c9a:	4668      	mov	r0, sp
   b6c9c:	f7ff ff33 	bl	b6b06 <_ZN8particle5ErrorD1Ev>
    }
   b6ca0:	b009      	add	sp, #36	; 0x24
   b6ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6ca4:	4631      	mov	r1, r6
   b6ca6:	a802      	add	r0, sp, #8
   b6ca8:	f7ff ffb0 	bl	b6c0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6cac:	68e0      	ldr	r0, [r4, #12]
   b6cae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6cb2:	b108      	cbz	r0, b6cb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6cb4:	f002 f91c 	bl	b8ef0 <strdup>
        type_(type) {
   b6cb8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6cba:	2010      	movs	r0, #16
   b6cbc:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6cc0:	f7fe f975 	bl	b4fae <_Znwj>
   b6cc4:	4605      	mov	r5, r0
   b6cc6:	b1e8      	cbz	r0, b6d04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6cc8:	2700      	movs	r7, #0
   b6cca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ccc:	2018      	movs	r0, #24
   b6cce:	f7fe f96e 	bl	b4fae <_Znwj>
   b6cd2:	4604      	mov	r4, r0
   b6cd4:	b188      	cbz	r0, b6cfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6cd6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6cd8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6cda:	a802      	add	r0, sp, #8
   b6cdc:	f7ff fede 	bl	b6a9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ce0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6ce2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6ce4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ce6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6ce8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6cea:	a906      	add	r1, sp, #24
   b6cec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6cee:	60e3      	str	r3, [r4, #12]
   b6cf0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6cf4:	9205      	str	r2, [sp, #20]
   b6cf6:	f7ff fef9 	bl	b6aec <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6cfa:	4b08      	ldr	r3, [pc, #32]	; (b6d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6cfc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6cfe:	4b08      	ldr	r3, [pc, #32]	; (b6d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d00:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6d02:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6d04:	a806      	add	r0, sp, #24
   b6d06:	f7ff fefe 	bl	b6b06 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6d0a:	a802      	add	r0, sp, #8
   b6d0c:	f7ff fea1 	bl	b6a52 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6d10:	2200      	movs	r2, #0
   b6d12:	4629      	mov	r1, r5
   b6d14:	4803      	ldr	r0, [pc, #12]	; (b6d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6d16:	f7ff fda9 	bl	b686c <application_thread_invoke>
   b6d1a:	e7b7      	b.n	b6c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6d1c:	000b6bb5 	.word	0x000b6bb5
   b6d20:	000b6e39 	.word	0x000b6e39
   b6d24:	000b6a2b 	.word	0x000b6a2b

000b6d28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d2c:	b08b      	sub	sp, #44	; 0x2c
   b6d2e:	4605      	mov	r5, r0
   b6d30:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6d34:	460f      	mov	r7, r1
   b6d36:	4690      	mov	r8, r2
   b6d38:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6d3a:	f7ff fdb3 	bl	b68a4 <spark_cloud_flag_connected>
   b6d3e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6d40:	4683      	mov	fp, r0
   b6d42:	bb38      	cbnz	r0, b6d94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6d44:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6d48:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6d4a:	a905      	add	r1, sp, #20
   b6d4c:	4630      	mov	r0, r6
   b6d4e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6d52:	f7ff fecb 	bl	b6aec <_ZN8particle5ErrorC1EOS0_>
   b6d56:	2014      	movs	r0, #20
   b6d58:	f7fe f929 	bl	b4fae <_Znwj>
   b6d5c:	4604      	mov	r4, r0
   b6d5e:	b148      	cbz	r0, b6d74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6d60:	2302      	movs	r3, #2
   b6d62:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6d64:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6d66:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6d6a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6d6c:	4631      	mov	r1, r6
   b6d6e:	300c      	adds	r0, #12
   b6d70:	f7ff febc 	bl	b6aec <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6d74:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6d76:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6d78:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6d7c:	f7ff ff32 	bl	b6be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6d80:	4630      	mov	r0, r6
   b6d82:	f7ff fec0 	bl	b6b06 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6d86:	a805      	add	r0, sp, #20
   b6d88:	f7ff febd 	bl	b6b06 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6d8c:	4628      	mov	r0, r5
   b6d8e:	b00b      	add	sp, #44	; 0x2c
   b6d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6d94:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6d96:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6d98:	2014      	movs	r0, #20
   b6d9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6d9e:	9307      	str	r3, [sp, #28]
   b6da0:	f7fe f905 	bl	b4fae <_Znwj>
   b6da4:	4601      	mov	r1, r0
   b6da6:	b118      	cbz	r0, b6db0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6dac:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6dae:	7044      	strb	r4, [r0, #1]
   b6db0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6db2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6db4:	f7ff ff16 	bl	b6be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6db8:	4b1e      	ldr	r3, [pc, #120]	; (b6e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6dba:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6dbc:	2008      	movs	r0, #8
   b6dbe:	f7fe f8f6 	bl	b4fae <_Znwj>
   b6dc2:	4604      	mov	r4, r0
   b6dc4:	b110      	cbz	r0, b6dcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6dc6:	a903      	add	r1, sp, #12
   b6dc8:	f7ff fec7 	bl	b6b5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6dcc:	9600      	str	r6, [sp, #0]
   b6dce:	fa5f f38a 	uxtb.w	r3, sl
   b6dd2:	464a      	mov	r2, r9
   b6dd4:	4641      	mov	r1, r8
   b6dd6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6dd8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6dda:	f7ff fd6b 	bl	b68b4 <spark_send_event>
   b6dde:	b9b8      	cbnz	r0, b6e10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6de0:	9b03      	ldr	r3, [sp, #12]
   b6de2:	785b      	ldrb	r3, [r3, #1]
   b6de4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6de8:	b993      	cbnz	r3, b6e10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6dea:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6dee:	a905      	add	r1, sp, #20
   b6df0:	a803      	add	r0, sp, #12
   b6df2:	9205      	str	r2, [sp, #20]
   b6df4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6df8:	f7ff ff18 	bl	b6c2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6dfc:	a805      	add	r0, sp, #20
   b6dfe:	f7ff fe82 	bl	b6b06 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6e02:	a805      	add	r0, sp, #20
   b6e04:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6e06:	f7ff feb1 	bl	b6b6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6e0a:	a806      	add	r0, sp, #24
   b6e0c:	f7ff fe3e 	bl	b6a8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e10:	a903      	add	r1, sp, #12
   b6e12:	a805      	add	r0, sp, #20
   b6e14:	f7ff fea1 	bl	b6b5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6e18:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e1a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6e1c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6e1e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6e20:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6e22:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6e24:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6e26:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6e28:	f7ff fe30 	bl	b6a8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e2c:	a804      	add	r0, sp, #16
   b6e2e:	f7ff fe2d 	bl	b6a8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6e32:	e7ab      	b.n	b6d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6e34:	000b6eb5 	.word	0x000b6eb5

000b6e38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6e38:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e3c:	4605      	mov	r5, r0
	switch (__op)
   b6e3e:	d103      	bne.n	b6e48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6e40:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6e42:	6003      	str	r3, [r0, #0]
      }
   b6e44:	2000      	movs	r0, #0
   b6e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6e48:	2a02      	cmp	r2, #2
   b6e4a:	d010      	beq.n	b6e6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6e4c:	2a03      	cmp	r2, #3
   b6e4e:	d1f9      	bne.n	b6e44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6e50:	6804      	ldr	r4, [r0, #0]
   b6e52:	2c00      	cmp	r4, #0
   b6e54:	d0f6      	beq.n	b6e44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6e56:	f104 0010 	add.w	r0, r4, #16
   b6e5a:	f7ff fe54 	bl	b6b06 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6e5e:	4620      	mov	r0, r4
   b6e60:	f7ff fdf7 	bl	b6a52 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6e64:	2118      	movs	r1, #24
   b6e66:	4620      	mov	r0, r4
   b6e68:	f7fe f8a5 	bl	b4fb6 <_ZdlPvj>
   b6e6c:	e7ea      	b.n	b6e44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e6e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6e70:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e72:	f7fe f89c 	bl	b4fae <_Znwj>
   b6e76:	4604      	mov	r4, r0
   b6e78:	b150      	cbz	r0, b6e90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6e7a:	4631      	mov	r1, r6
   b6e7c:	f7ff fec6 	bl	b6c0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6e80:	6930      	ldr	r0, [r6, #16]
   b6e82:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6e86:	b108      	cbz	r0, b6e8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6e88:	f002 f832 	bl	b8ef0 <strdup>
        type_(type) {
   b6e8c:	6120      	str	r0, [r4, #16]
   b6e8e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6e90:	602c      	str	r4, [r5, #0]
	}
   b6e92:	e7d7      	b.n	b6e44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6e94 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6e94:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6e96:	2300      	movs	r3, #0
   b6e98:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6e9a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6e9c:	4604      	mov	r4, r0
   b6e9e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6ea0:	b12b      	cbz	r3, b6eae <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6ea2:	2202      	movs	r2, #2
   b6ea4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6ea6:	68eb      	ldr	r3, [r5, #12]
   b6ea8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6eaa:	68ab      	ldr	r3, [r5, #8]
   b6eac:	60a3      	str	r3, [r4, #8]
    }
   b6eae:	4620      	mov	r0, r4
   b6eb0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6eb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6eb6:	b089      	sub	sp, #36	; 0x24
   b6eb8:	4604      	mov	r4, r0
   b6eba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6ebc:	a801      	add	r0, sp, #4
   b6ebe:	4611      	mov	r1, r2
   b6ec0:	f7ff fe54 	bl	b6b6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6ec4:	b1a4      	cbz	r4, b6ef0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6ec6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6ec8:	b11d      	cbz	r5, b6ed2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6eca:	4628      	mov	r0, r5
   b6ecc:	f002 f810 	bl	b8ef0 <strdup>
   b6ed0:	4605      	mov	r5, r0
   b6ed2:	a801      	add	r0, sp, #4
   b6ed4:	a903      	add	r1, sp, #12
        type_(type) {
   b6ed6:	9503      	str	r5, [sp, #12]
   b6ed8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6edc:	f7ff fea6 	bl	b6c2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6ee0:	a803      	add	r0, sp, #12
   b6ee2:	f7ff fe10 	bl	b6b06 <_ZN8particle5ErrorD1Ev>
   b6ee6:	a802      	add	r0, sp, #8
   b6ee8:	f7ff fdd0 	bl	b6a8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6eec:	b009      	add	sp, #36	; 0x24
   b6eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6ef0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6ef2:	2301      	movs	r3, #1
   b6ef4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6ef8:	2a00      	cmp	r2, #0
   b6efa:	d103      	bne.n	b6f04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6efc:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6f00:	2900      	cmp	r1, #0
   b6f02:	d1f7      	bne.n	b6ef4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6f04:	d1ef      	bne.n	b6ee6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6f06:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6f08:	f3bf 8f5b 	dmb	ish
   b6f0c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6f0e:	1d2b      	adds	r3, r5, #4
   b6f10:	f3bf 8f5b 	dmb	ish
   b6f14:	e853 6f00 	ldrex	r6, [r3]
   b6f18:	e843 4200 	strex	r2, r4, [r3]
   b6f1c:	2a00      	cmp	r2, #0
   b6f1e:	d1f9      	bne.n	b6f14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6f20:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6f24:	2e00      	cmp	r6, #0
   b6f26:	d0de      	beq.n	b6ee6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6f28:	4620      	mov	r0, r4
   b6f2a:	f7ff fc97 	bl	b685c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6f2e:	4607      	mov	r7, r0
   b6f30:	b160      	cbz	r0, b6f4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6f32:	f105 010c 	add.w	r1, r5, #12
   b6f36:	4630      	mov	r0, r6
   b6f38:	f7ff fe43 	bl	b6bc2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6f3c:	4630      	mov	r0, r6
   b6f3e:	f7ff fd88 	bl	b6a52 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6f42:	2110      	movs	r1, #16
   b6f44:	4630      	mov	r0, r6
   b6f46:	f7fe f836 	bl	b4fb6 <_ZdlPvj>
   b6f4a:	e7cc      	b.n	b6ee6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6f4c:	4631      	mov	r1, r6
   b6f4e:	a803      	add	r0, sp, #12
   b6f50:	f7ff ffa0 	bl	b6e94 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6f54:	7b2b      	ldrb	r3, [r5, #12]
   b6f56:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6f5a:	2010      	movs	r0, #16
   b6f5c:	f7fe f827 	bl	b4fae <_Znwj>
   b6f60:	4605      	mov	r5, r0
   b6f62:	b1d0      	cbz	r0, b6f9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6f64:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f66:	2014      	movs	r0, #20
   b6f68:	f7fe f821 	bl	b4fae <_Znwj>
   b6f6c:	4604      	mov	r4, r0
   b6f6e:	b178      	cbz	r0, b6f90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6f70:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6f72:	4601      	mov	r1, r0
   b6f74:	a803      	add	r0, sp, #12
   b6f76:	f7ff fd91 	bl	b6a9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6f7a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6f7c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f7e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6f80:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6f82:	9205      	str	r2, [sp, #20]
   b6f84:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f86:	60e3      	str	r3, [r4, #12]
   b6f88:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6f8c:	9206      	str	r2, [sp, #24]
   b6f8e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f90:	4b06      	ldr	r3, [pc, #24]	; (b6fac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6f92:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6f94:	4b06      	ldr	r3, [pc, #24]	; (b6fb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f96:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6f98:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6f9a:	a803      	add	r0, sp, #12
   b6f9c:	f7ff fd59 	bl	b6a52 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6fa0:	2200      	movs	r2, #0
   b6fa2:	4629      	mov	r1, r5
   b6fa4:	4803      	ldr	r0, [pc, #12]	; (b6fb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6fa6:	f7ff fc61 	bl	b686c <application_thread_invoke>
   b6faa:	e7c7      	b.n	b6f3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6fac:	000b6bd5 	.word	0x000b6bd5
   b6fb0:	000b6fb9 	.word	0x000b6fb9
   b6fb4:	000b6a2b 	.word	0x000b6a2b

000b6fb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6fb8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6fba:	b570      	push	{r4, r5, r6, lr}
   b6fbc:	4604      	mov	r4, r0
	switch (__op)
   b6fbe:	d103      	bne.n	b6fc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6fc0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6fc2:	6003      	str	r3, [r0, #0]
      }
   b6fc4:	2000      	movs	r0, #0
   b6fc6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6fc8:	2a02      	cmp	r2, #2
   b6fca:	d00c      	beq.n	b6fe6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6fcc:	2a03      	cmp	r2, #3
   b6fce:	d1f9      	bne.n	b6fc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6fd0:	6804      	ldr	r4, [r0, #0]
   b6fd2:	2c00      	cmp	r4, #0
   b6fd4:	d0f6      	beq.n	b6fc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6fd6:	4620      	mov	r0, r4
   b6fd8:	f7ff fd3b 	bl	b6a52 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6fdc:	2114      	movs	r1, #20
   b6fde:	4620      	mov	r0, r4
   b6fe0:	f7fd ffe9 	bl	b4fb6 <_ZdlPvj>
   b6fe4:	e7ee      	b.n	b6fc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6fe6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6fe8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6fea:	f7fd ffe0 	bl	b4fae <_Znwj>
   b6fee:	4605      	mov	r5, r0
   b6ff0:	b120      	cbz	r0, b6ffc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6ff2:	4631      	mov	r1, r6
   b6ff4:	f7ff ff4e 	bl	b6e94 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6ff8:	7c33      	ldrb	r3, [r6, #16]
   b6ffa:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6ffc:	6025      	str	r5, [r4, #0]
	}
   b6ffe:	e7e1      	b.n	b6fc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7000 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7000:	2200      	movs	r2, #0
   b7002:	6840      	ldr	r0, [r0, #4]
   b7004:	4611      	mov	r1, r2
   b7006:	f7ff bc9d 	b.w	b6944 <network_listening>

000b700a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b700a:	2200      	movs	r2, #0
   b700c:	6840      	ldr	r0, [r0, #4]
   b700e:	4611      	mov	r1, r2
   b7010:	f7ff bca8 	b.w	b6964 <network_get_listen_timeout>

000b7014 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7014:	6840      	ldr	r0, [r0, #4]
   b7016:	2200      	movs	r2, #0
   b7018:	f7ff bc9c 	b.w	b6954 <network_set_listen_timeout>

000b701c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b701c:	6840      	ldr	r0, [r0, #4]
   b701e:	2200      	movs	r2, #0
   b7020:	f081 0101 	eor.w	r1, r1, #1
   b7024:	f7ff bc86 	b.w	b6934 <network_listen>

000b7028 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7028:	2300      	movs	r3, #0
   b702a:	6840      	ldr	r0, [r0, #4]
   b702c:	461a      	mov	r2, r3
   b702e:	4619      	mov	r1, r3
   b7030:	f7ff bc78 	b.w	b6924 <network_off>

000b7034 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7034:	2300      	movs	r3, #0
   b7036:	6840      	ldr	r0, [r0, #4]
   b7038:	461a      	mov	r2, r3
   b703a:	4619      	mov	r1, r3
   b703c:	f7ff bc6a 	b.w	b6914 <network_on>

000b7040 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7040:	2200      	movs	r2, #0
   b7042:	6840      	ldr	r0, [r0, #4]
   b7044:	4611      	mov	r1, r2
   b7046:	f7ff bc5d 	b.w	b6904 <network_ready>

000b704a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b704a:	2200      	movs	r2, #0
   b704c:	6840      	ldr	r0, [r0, #4]
   b704e:	4611      	mov	r1, r2
   b7050:	f7ff bc48 	b.w	b68e4 <network_connecting>

000b7054 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7054:	6840      	ldr	r0, [r0, #4]
   b7056:	2200      	movs	r2, #0
   b7058:	2102      	movs	r1, #2
   b705a:	f7ff bc4b 	b.w	b68f4 <network_disconnect>

000b705e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b705e:	2300      	movs	r3, #0
   b7060:	6840      	ldr	r0, [r0, #4]
   b7062:	461a      	mov	r2, r3
   b7064:	f7ff bc36 	b.w	b68d4 <network_connect>

000b7068 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7068:	4b02      	ldr	r3, [pc, #8]	; (b7074 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b706a:	2203      	movs	r2, #3
   b706c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b706e:	4a02      	ldr	r2, [pc, #8]	; (b7078 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7070:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7072:	4770      	bx	lr
   b7074:	2003e6c8 	.word	0x2003e6c8
   b7078:	000b9564 	.word	0x000b9564

000b707c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b707c:	4770      	bx	lr

000b707e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b707e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7080:	4606      	mov	r6, r0
   b7082:	4615      	mov	r5, r2
   b7084:	460c      	mov	r4, r1
   b7086:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7088:	42bc      	cmp	r4, r7
   b708a:	d006      	beq.n	b709a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b708c:	6833      	ldr	r3, [r6, #0]
   b708e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7092:	689b      	ldr	r3, [r3, #8]
   b7094:	4630      	mov	r0, r6
   b7096:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7098:	e7f6      	b.n	b7088 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b709a:	4628      	mov	r0, r5
   b709c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b709e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b709e:	7c00      	ldrb	r0, [r0, #16]
   b70a0:	2200      	movs	r2, #0
   b70a2:	f7ff babb 	b.w	b661c <hal_i2c_write>

000b70a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b70a6:	7c00      	ldrb	r0, [r0, #16]
   b70a8:	2100      	movs	r1, #0
   b70aa:	f7ff babf 	b.w	b662c <hal_i2c_available>

000b70ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b70ae:	7c00      	ldrb	r0, [r0, #16]
   b70b0:	2100      	movs	r1, #0
   b70b2:	f7ff bac3 	b.w	b663c <hal_i2c_read>

000b70b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b70b6:	7c00      	ldrb	r0, [r0, #16]
   b70b8:	2100      	movs	r1, #0
   b70ba:	f7ff bac7 	b.w	b664c <hal_i2c_peek>

000b70be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b70be:	7c00      	ldrb	r0, [r0, #16]
   b70c0:	2100      	movs	r1, #0
   b70c2:	f7ff bacb 	b.w	b665c <hal_i2c_flush>

000b70c6 <_ZN7TwoWireD0Ev>:
   b70c6:	b510      	push	{r4, lr}
   b70c8:	2114      	movs	r1, #20
   b70ca:	4604      	mov	r4, r0
   b70cc:	f7fd ff73 	bl	b4fb6 <_ZdlPvj>
   b70d0:	4620      	mov	r0, r4
   b70d2:	bd10      	pop	{r4, pc}

000b70d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70d4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b70d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70da:	4604      	mov	r4, r0
   b70dc:	4608      	mov	r0, r1
   b70de:	2100      	movs	r1, #0
   b70e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b70e4:	4b03      	ldr	r3, [pc, #12]	; (b70f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b70e6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b70e8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b70ea:	4611      	mov	r1, r2
   b70ec:	f7ff fac6 	bl	b667c <hal_i2c_init>
}
   b70f0:	4620      	mov	r0, r4
   b70f2:	bd10      	pop	{r4, pc}
   b70f4:	000b95a0 	.word	0x000b95a0

000b70f8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b70f8:	2300      	movs	r3, #0
   b70fa:	7c00      	ldrb	r0, [r0, #16]
   b70fc:	461a      	mov	r2, r3
   b70fe:	4619      	mov	r1, r3
   b7100:	f7ff ba74 	b.w	b65ec <hal_i2c_begin>

000b7104 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7104:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7106:	2200      	movs	r2, #0
   b7108:	2314      	movs	r3, #20
   b710a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b710e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7112:	780b      	ldrb	r3, [r1, #0]
   b7114:	f88d 3008 	strb.w	r3, [sp, #8]
   b7118:	684b      	ldr	r3, [r1, #4]
   b711a:	9303      	str	r3, [sp, #12]
   b711c:	68cb      	ldr	r3, [r1, #12]
   b711e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7120:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7122:	7a0b      	ldrb	r3, [r1, #8]
   b7124:	9305      	str	r3, [sp, #20]
   b7126:	a901      	add	r1, sp, #4
   b7128:	f7ff fab0 	bl	b668c <hal_i2c_request_ex>
}
   b712c:	b007      	add	sp, #28
   b712e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7132 <_ZN7TwoWire11requestFromEhjh>:
{
   b7132:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7134:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7136:	f88d 1000 	strb.w	r1, [sp]
   b713a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b713e:	9103      	str	r1, [sp, #12]
   b7140:	bf18      	it	ne
   b7142:	2301      	movne	r3, #1
   b7144:	4669      	mov	r1, sp
    size_ = size;
   b7146:	9201      	str	r2, [sp, #4]
   b7148:	f88d 3008 	strb.w	r3, [sp, #8]
   b714c:	f7ff ffda 	bl	b7104 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7150:	b005      	add	sp, #20
   b7152:	f85d fb04 	ldr.w	pc, [sp], #4

000b7156 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7156:	2301      	movs	r3, #1
   b7158:	f7ff bfeb 	b.w	b7132 <_ZN7TwoWire11requestFromEhjh>

000b715c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b715c:	7c00      	ldrb	r0, [r0, #16]
   b715e:	2200      	movs	r2, #0
   b7160:	f7ff ba4c 	b.w	b65fc <hal_i2c_begin_transmission>

000b7164 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7164:	b2c9      	uxtb	r1, r1
   b7166:	f7ff bff9 	b.w	b715c <_ZN7TwoWire17beginTransmissionEh>

000b716a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b716a:	7c00      	ldrb	r0, [r0, #16]
   b716c:	2200      	movs	r2, #0
   b716e:	f7ff ba4d 	b.w	b660c <hal_i2c_end_transmission>

000b7172 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7172:	2101      	movs	r1, #1
   b7174:	f7ff bff9 	b.w	b716a <_ZN7TwoWire15endTransmissionEh>

000b7178 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7178:	4770      	bx	lr

000b717a <_ZN9IPAddressD0Ev>:
   b717a:	b510      	push	{r4, lr}
   b717c:	2118      	movs	r1, #24
   b717e:	4604      	mov	r4, r0
   b7180:	f7fd ff19 	bl	b4fb6 <_ZdlPvj>
   b7184:	4620      	mov	r0, r4
   b7186:	bd10      	pop	{r4, pc}

000b7188 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7188:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b718a:	7d03      	ldrb	r3, [r0, #20]
   b718c:	2b06      	cmp	r3, #6
{
   b718e:	b08d      	sub	sp, #52	; 0x34
   b7190:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7192:	f100 0704 	add.w	r7, r0, #4
   b7196:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b719a:	d012      	beq.n	b71c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b719c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b71a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b71a4:	220a      	movs	r2, #10
   b71a6:	4630      	mov	r0, r6
   b71a8:	f000 f95d 	bl	b7466 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b71ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b71ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b71b0:	d019      	beq.n	b71e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b71b2:	2c00      	cmp	r4, #0
   b71b4:	d0f4      	beq.n	b71a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b71b6:	212e      	movs	r1, #46	; 0x2e
   b71b8:	4630      	mov	r0, r6
   b71ba:	f000 f93b 	bl	b7434 <_ZN5Print5printEc>
   b71be:	4404      	add	r4, r0
   b71c0:	e7ee      	b.n	b71a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b71c2:	232f      	movs	r3, #47	; 0x2f
   b71c4:	466a      	mov	r2, sp
   b71c6:	4639      	mov	r1, r7
   b71c8:	200a      	movs	r0, #10
		buf[0] = 0;
   b71ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b71ce:	f7ff fa65 	bl	b669c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b71d2:	4668      	mov	r0, sp
   b71d4:	f7fd fea8 	bl	b4f28 <strlen>
   b71d8:	6833      	ldr	r3, [r6, #0]
   b71da:	4602      	mov	r2, r0
   b71dc:	68db      	ldr	r3, [r3, #12]
   b71de:	4669      	mov	r1, sp
   b71e0:	4630      	mov	r0, r6
   b71e2:	4798      	blx	r3
   b71e4:	4604      	mov	r4, r0
    }
    return n;
}
   b71e6:	4620      	mov	r0, r4
   b71e8:	b00d      	add	sp, #52	; 0x34
   b71ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b71ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b71ec:	b510      	push	{r4, lr}
   b71ee:	4b05      	ldr	r3, [pc, #20]	; (b7204 <_ZN9IPAddressC1Ev+0x18>)
   b71f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b71f2:	2211      	movs	r2, #17
   b71f4:	f840 3b04 	str.w	r3, [r0], #4
   b71f8:	2100      	movs	r1, #0
   b71fa:	f001 fe43 	bl	b8e84 <memset>
}
   b71fe:	4620      	mov	r0, r4
   b7200:	bd10      	pop	{r4, pc}
   b7202:	bf00      	nop
   b7204:	000b95c8 	.word	0x000b95c8

000b7208 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7208:	4603      	mov	r3, r0
   b720a:	4a07      	ldr	r2, [pc, #28]	; (b7228 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b720c:	b510      	push	{r4, lr}
   b720e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7212:	f101 0210 	add.w	r2, r1, #16
   b7216:	f851 4b04 	ldr.w	r4, [r1], #4
   b721a:	f843 4b04 	str.w	r4, [r3], #4
   b721e:	4291      	cmp	r1, r2
   b7220:	d1f9      	bne.n	b7216 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7222:	780a      	ldrb	r2, [r1, #0]
   b7224:	701a      	strb	r2, [r3, #0]
}
   b7226:	bd10      	pop	{r4, pc}
   b7228:	000b95c8 	.word	0x000b95c8

000b722c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b722c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b722e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7232:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7236:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b723a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b723e:	2304      	movs	r3, #4
   b7240:	6041      	str	r1, [r0, #4]
   b7242:	7503      	strb	r3, [r0, #20]
}
   b7244:	bd10      	pop	{r4, pc}
	...

000b7248 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7248:	b507      	push	{r0, r1, r2, lr}
   b724a:	4b06      	ldr	r3, [pc, #24]	; (b7264 <_ZN9IPAddressC1EPKh+0x1c>)
   b724c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b724e:	78cb      	ldrb	r3, [r1, #3]
   b7250:	9300      	str	r3, [sp, #0]
   b7252:	788b      	ldrb	r3, [r1, #2]
   b7254:	784a      	ldrb	r2, [r1, #1]
   b7256:	7809      	ldrb	r1, [r1, #0]
   b7258:	f7ff ffe8 	bl	b722c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b725c:	b003      	add	sp, #12
   b725e:	f85d fb04 	ldr.w	pc, [sp], #4
   b7262:	bf00      	nop
   b7264:	000b95c8 	.word	0x000b95c8

000b7268 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7268:	4b01      	ldr	r3, [pc, #4]	; (b7270 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b726a:	4a02      	ldr	r2, [pc, #8]	; (b7274 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b726c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b726e:	4770      	bx	lr
   b7270:	2003e6d0 	.word	0x2003e6d0
   b7274:	000b95d4 	.word	0x000b95d4

000b7278 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7278:	2300      	movs	r3, #0
   b727a:	6840      	ldr	r0, [r0, #4]
   b727c:	461a      	mov	r2, r3
   b727e:	f7ff bb29 	b.w	b68d4 <network_connect>

000b7282 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7282:	6840      	ldr	r0, [r0, #4]
   b7284:	2200      	movs	r2, #0
   b7286:	2102      	movs	r1, #2
   b7288:	f7ff bb34 	b.w	b68f4 <network_disconnect>

000b728c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b728c:	2200      	movs	r2, #0
   b728e:	6840      	ldr	r0, [r0, #4]
   b7290:	4611      	mov	r1, r2
   b7292:	f7ff bb27 	b.w	b68e4 <network_connecting>

000b7296 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7296:	2200      	movs	r2, #0
   b7298:	6840      	ldr	r0, [r0, #4]
   b729a:	4611      	mov	r1, r2
   b729c:	f7ff bb32 	b.w	b6904 <network_ready>

000b72a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b72a0:	2300      	movs	r3, #0
   b72a2:	6840      	ldr	r0, [r0, #4]
   b72a4:	461a      	mov	r2, r3
   b72a6:	4619      	mov	r1, r3
   b72a8:	f7ff bb34 	b.w	b6914 <network_on>

000b72ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b72ac:	2300      	movs	r3, #0
   b72ae:	6840      	ldr	r0, [r0, #4]
   b72b0:	461a      	mov	r2, r3
   b72b2:	4619      	mov	r1, r3
   b72b4:	f7ff bb36 	b.w	b6924 <network_off>

000b72b8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b72b8:	6840      	ldr	r0, [r0, #4]
   b72ba:	2100      	movs	r1, #0
   b72bc:	f7ff bb5a 	b.w	b6974 <network_is_on>

000b72c0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b72c0:	6840      	ldr	r0, [r0, #4]
   b72c2:	2100      	movs	r1, #0
   b72c4:	f7ff bb5e 	b.w	b6984 <network_is_off>

000b72c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b72c8:	6840      	ldr	r0, [r0, #4]
   b72ca:	2200      	movs	r2, #0
   b72cc:	f081 0101 	eor.w	r1, r1, #1
   b72d0:	f7ff bb30 	b.w	b6934 <network_listen>

000b72d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b72d4:	6840      	ldr	r0, [r0, #4]
   b72d6:	2200      	movs	r2, #0
   b72d8:	f7ff bb3c 	b.w	b6954 <network_set_listen_timeout>

000b72dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b72dc:	2200      	movs	r2, #0
   b72de:	6840      	ldr	r0, [r0, #4]
   b72e0:	4611      	mov	r1, r2
   b72e2:	f7ff bb3f 	b.w	b6964 <network_get_listen_timeout>

000b72e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b72e6:	2200      	movs	r2, #0
   b72e8:	6840      	ldr	r0, [r0, #4]
   b72ea:	4611      	mov	r1, r2
   b72ec:	f7ff bb2a 	b.w	b6944 <network_listening>

000b72f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b72f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b72f4:	b095      	sub	sp, #84	; 0x54
   b72f6:	4614      	mov	r4, r2
   b72f8:	460d      	mov	r5, r1
   b72fa:	4607      	mov	r7, r0
    IPAddress addr;
   b72fc:	f7ff ff76 	bl	b71ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7300:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7302:	221c      	movs	r2, #28
   b7304:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7306:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7308:	f001 fdbc 	bl	b8e84 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b730c:	2340      	movs	r3, #64	; 0x40
   b730e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7310:	4620      	mov	r0, r4
   b7312:	466b      	mov	r3, sp
   b7314:	aa0c      	add	r2, sp, #48	; 0x30
   b7316:	2100      	movs	r1, #0
   b7318:	f7ff f9d0 	bl	b66bc <netdb_getaddrinfo>
    if (!r) {
   b731c:	4604      	mov	r4, r0
   b731e:	2800      	cmp	r0, #0
   b7320:	d14b      	bne.n	b73ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7322:	4602      	mov	r2, r0
   b7324:	2101      	movs	r1, #1
   b7326:	6868      	ldr	r0, [r5, #4]
   b7328:	f7ff faec 	bl	b6904 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b732c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b732e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7330:	4622      	mov	r2, r4
   b7332:	6868      	ldr	r0, [r5, #4]
   b7334:	f7ff fae6 	bl	b6904 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7338:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b733a:	4681      	mov	r9, r0
        bool ok = false;
   b733c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b733e:	2e00      	cmp	r6, #0
   b7340:	d03b      	beq.n	b73ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7342:	2900      	cmp	r1, #0
   b7344:	d139      	bne.n	b73ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7346:	6873      	ldr	r3, [r6, #4]
   b7348:	2b02      	cmp	r3, #2
   b734a:	d003      	beq.n	b7354 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b734c:	2b0a      	cmp	r3, #10
   b734e:	d011      	beq.n	b7374 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7350:	69f6      	ldr	r6, [r6, #28]
   b7352:	e7f4      	b.n	b733e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7354:	f1b8 0f00 	cmp.w	r8, #0
   b7358:	d0fa      	beq.n	b7350 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b735a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b735c:	a806      	add	r0, sp, #24
   b735e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7360:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7362:	f7ff ff71 	bl	b7248 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7368:	1d3c      	adds	r4, r7, #4
   b736a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b736c:	682b      	ldr	r3, [r5, #0]
   b736e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7370:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7372:	e7ed      	b.n	b7350 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7374:	f1b9 0f00 	cmp.w	r9, #0
   b7378:	d0ea      	beq.n	b7350 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b737a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b737c:	2210      	movs	r2, #16
   b737e:	a801      	add	r0, sp, #4
   b7380:	f001 fd80 	bl	b8e84 <memset>
                    a.v = 6;
   b7384:	2306      	movs	r3, #6
   b7386:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b738a:	ad01      	add	r5, sp, #4
   b738c:	f104 0308 	add.w	r3, r4, #8
   b7390:	3418      	adds	r4, #24
   b7392:	6818      	ldr	r0, [r3, #0]
   b7394:	6859      	ldr	r1, [r3, #4]
   b7396:	462a      	mov	r2, r5
   b7398:	c203      	stmia	r2!, {r0, r1}
   b739a:	3308      	adds	r3, #8
   b739c:	42a3      	cmp	r3, r4
   b739e:	4615      	mov	r5, r2
   b73a0:	d1f7      	bne.n	b7392 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b73a2:	a901      	add	r1, sp, #4
   b73a4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b73a6:	ad07      	add	r5, sp, #28
   b73a8:	f7ff ff2e 	bl	b7208 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b73ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b73ae:	1d3c      	adds	r4, r7, #4
   b73b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b73b2:	682b      	ldr	r3, [r5, #0]
   b73b4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b73b6:	4649      	mov	r1, r9
   b73b8:	e7ca      	b.n	b7350 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b73ba:	9800      	ldr	r0, [sp, #0]
   b73bc:	f7ff f976 	bl	b66ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b73c0:	4638      	mov	r0, r7
   b73c2:	b015      	add	sp, #84	; 0x54
   b73c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b73c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b73c8:	4b02      	ldr	r3, [pc, #8]	; (b73d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b73ca:	4a03      	ldr	r2, [pc, #12]	; (b73d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b73cc:	601a      	str	r2, [r3, #0]
   b73ce:	2200      	movs	r2, #0
   b73d0:	605a      	str	r2, [r3, #4]

} // spark
   b73d2:	4770      	bx	lr
   b73d4:	2003e6d4 	.word	0x2003e6d4
   b73d8:	000b95e0 	.word	0x000b95e0

000b73dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b73dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73de:	4606      	mov	r6, r0
   b73e0:	460d      	mov	r5, r1
  size_t n = 0;
   b73e2:	188f      	adds	r7, r1, r2
   b73e4:	2400      	movs	r4, #0
  while (size--) {
   b73e6:	42bd      	cmp	r5, r7
   b73e8:	d00c      	beq.n	b7404 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b73ea:	6833      	ldr	r3, [r6, #0]
   b73ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   b73f0:	689b      	ldr	r3, [r3, #8]
   b73f2:	4630      	mov	r0, r6
   b73f4:	4798      	blx	r3
     if (chunk>=0)
   b73f6:	1e03      	subs	r3, r0, #0
   b73f8:	db01      	blt.n	b73fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b73fa:	441c      	add	r4, r3
  while (size--) {
   b73fc:	e7f3      	b.n	b73e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b73fe:	2c00      	cmp	r4, #0
   b7400:	bf08      	it	eq
   b7402:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7404:	4620      	mov	r0, r4
   b7406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7408 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7408:	b513      	push	{r0, r1, r4, lr}
   b740a:	4604      	mov	r4, r0
    }
   b740c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b740e:	b159      	cbz	r1, b7428 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7410:	9101      	str	r1, [sp, #4]
   b7412:	f7fd fd89 	bl	b4f28 <strlen>
   b7416:	6823      	ldr	r3, [r4, #0]
   b7418:	9901      	ldr	r1, [sp, #4]
   b741a:	68db      	ldr	r3, [r3, #12]
   b741c:	4602      	mov	r2, r0
   b741e:	4620      	mov	r0, r4
    }
   b7420:	b002      	add	sp, #8
   b7422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7426:	4718      	bx	r3
    }
   b7428:	b002      	add	sp, #8
   b742a:	bd10      	pop	{r4, pc}

000b742c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b742c:	b508      	push	{r3, lr}
  return write(str);
   b742e:	f7ff ffeb 	bl	b7408 <_ZN5Print5writeEPKc>
}
   b7432:	bd08      	pop	{r3, pc}

000b7434 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7434:	6803      	ldr	r3, [r0, #0]
   b7436:	689b      	ldr	r3, [r3, #8]
   b7438:	4718      	bx	r3

000b743a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b743a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b743c:	210d      	movs	r1, #13
{
   b743e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7440:	f7ff fff8 	bl	b7434 <_ZN5Print5printEc>
  n += print('\n');
   b7444:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7446:	4604      	mov	r4, r0
  n += print('\n');
   b7448:	4628      	mov	r0, r5
   b744a:	f7ff fff3 	bl	b7434 <_ZN5Print5printEc>
  return n;
}
   b744e:	4420      	add	r0, r4
   b7450:	bd38      	pop	{r3, r4, r5, pc}

000b7452 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7452:	b538      	push	{r3, r4, r5, lr}
   b7454:	4605      	mov	r5, r0
  return write(str);
   b7456:	f7ff ffd7 	bl	b7408 <_ZN5Print5writeEPKc>
   b745a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b745c:	4628      	mov	r0, r5
   b745e:	f7ff ffec 	bl	b743a <_ZN5Print7printlnEv>
  return n;
}
   b7462:	4420      	add	r0, r4
   b7464:	bd38      	pop	{r3, r4, r5, pc}

000b7466 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7466:	b530      	push	{r4, r5, lr}
   b7468:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b746a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b746c:	2a01      	cmp	r2, #1
  *str = '\0';
   b746e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7472:	bf98      	it	ls
   b7474:	220a      	movls	r2, #10
   b7476:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7478:	460d      	mov	r5, r1
   b747a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b747e:	fb01 5312 	mls	r3, r1, r2, r5
   b7482:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7486:	2b09      	cmp	r3, #9
   b7488:	bf94      	ite	ls
   b748a:	3330      	addls	r3, #48	; 0x30
   b748c:	3337      	addhi	r3, #55	; 0x37
   b748e:	b2db      	uxtb	r3, r3
  } while(n);
   b7490:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7492:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7496:	d9ef      	bls.n	b7478 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7498:	4621      	mov	r1, r4
   b749a:	f7ff ffb5 	bl	b7408 <_ZN5Print5writeEPKc>
}
   b749e:	b00b      	add	sp, #44	; 0x2c
   b74a0:	bd30      	pop	{r4, r5, pc}

000b74a2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b74a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74a6:	b086      	sub	sp, #24
   b74a8:	af00      	add	r7, sp, #0
   b74aa:	4605      	mov	r5, r0
   b74ac:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b74ae:	1d38      	adds	r0, r7, #4
   b74b0:	2114      	movs	r1, #20
{
   b74b2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b74b4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b74b6:	f7ff fa85 	bl	b69c4 <vsnprintf>

    if (n<bufsize)
   b74ba:	2813      	cmp	r0, #19
   b74bc:	d80e      	bhi.n	b74dc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b74be:	1d39      	adds	r1, r7, #4
   b74c0:	4628      	mov	r0, r5
   b74c2:	f7ff ffa1 	bl	b7408 <_ZN5Print5writeEPKc>
   b74c6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b74c8:	b11e      	cbz	r6, b74d2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b74ca:	4628      	mov	r0, r5
   b74cc:	f7ff ffb5 	bl	b743a <_ZN5Print7printlnEv>
   b74d0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b74d2:	4620      	mov	r0, r4
   b74d4:	3718      	adds	r7, #24
   b74d6:	46bd      	mov	sp, r7
   b74d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b74dc:	f100 0308 	add.w	r3, r0, #8
   b74e0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b74e4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b74e6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b74ea:	4622      	mov	r2, r4
   b74ec:	1c41      	adds	r1, r0, #1
   b74ee:	683b      	ldr	r3, [r7, #0]
   b74f0:	4668      	mov	r0, sp
   b74f2:	f7ff fa67 	bl	b69c4 <vsnprintf>
  return write(str);
   b74f6:	4669      	mov	r1, sp
   b74f8:	4628      	mov	r0, r5
   b74fa:	f7ff ff85 	bl	b7408 <_ZN5Print5writeEPKc>
   b74fe:	4604      	mov	r4, r0
   b7500:	46c5      	mov	sp, r8
   b7502:	e7e1      	b.n	b74c8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7504 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7504:	4b01      	ldr	r3, [pc, #4]	; (b750c <_GLOBAL__sub_I_RGB+0x8>)
   b7506:	2200      	movs	r2, #0
   b7508:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b750a:	4770      	bx	lr
   b750c:	2003e6dc 	.word	0x2003e6dc

000b7510 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7510:	2100      	movs	r1, #0
   b7512:	f7ff b913 	b.w	b673c <hal_spi_release>

000b7516 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7516:	2100      	movs	r1, #0
   b7518:	f7ff b908 	b.w	b672c <hal_spi_acquire>

000b751c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b751c:	b510      	push	{r4, lr}
   b751e:	4604      	mov	r4, r0
   b7520:	4608      	mov	r0, r1
{
    _spi = spi;
   b7522:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7524:	f7ff f8e2 	bl	b66ec <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7528:	2300      	movs	r3, #0
   b752a:	6063      	str	r3, [r4, #4]
}
   b752c:	4620      	mov	r0, r4
   b752e:	bd10      	pop	{r4, pc}

000b7530 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7530:	b513      	push	{r0, r1, r4, lr}
   b7532:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7534:	7800      	ldrb	r0, [r0, #0]
   b7536:	f7ff ffee 	bl	b7516 <_ZN8SPIClass4lockEv.isra.0>
   b753a:	b958      	cbnz	r0, b7554 <_ZN8SPIClass5beginEv+0x24>
   b753c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b753e:	9001      	str	r0, [sp, #4]
   b7540:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7544:	f7ff f8c2 	bl	b66cc <hal_spi_begin>
        unlock();
   b7548:	9801      	ldr	r0, [sp, #4]
    }
}
   b754a:	b002      	add	sp, #8
   b754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7550:	f7ff bfde 	b.w	b7510 <_ZN8SPIClass6unlockEv.isra.0>
   b7554:	b002      	add	sp, #8
   b7556:	bd10      	pop	{r4, pc}

000b7558 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7558:	7800      	ldrb	r0, [r0, #0]
   b755a:	f7ff bfd9 	b.w	b7510 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7560 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7560:	0840      	lsrs	r0, r0, #1
{
   b7562:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7564:	6018      	str	r0, [r3, #0]
   b7566:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7568:	6818      	ldr	r0, [r3, #0]
   b756a:	4288      	cmp	r0, r1
   b756c:	b2e5      	uxtb	r5, r4
   b756e:	d906      	bls.n	b757e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7570:	3401      	adds	r4, #1
   b7572:	2c08      	cmp	r4, #8
   b7574:	d002      	beq.n	b757c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7576:	0840      	lsrs	r0, r0, #1
   b7578:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b757a:	e7f5      	b.n	b7568 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b757c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b757e:	4b02      	ldr	r3, [pc, #8]	; (b7588 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7580:	5d5b      	ldrb	r3, [r3, r5]
   b7582:	7013      	strb	r3, [r2, #0]
}
   b7584:	bd30      	pop	{r4, r5, pc}
   b7586:	bf00      	nop
   b7588:	000b9614 	.word	0x000b9614

000b758c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b758c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7590:	4606      	mov	r6, r0
   b7592:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7594:	7800      	ldrb	r0, [r0, #0]
{
   b7596:	460c      	mov	r4, r1
    CHECK(lock());
   b7598:	f7ff ffbd 	bl	b7516 <_ZN8SPIClass4lockEv.isra.0>
   b759c:	2800      	cmp	r0, #0
   b759e:	db1b      	blt.n	b75d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b75a0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b75a2:	2214      	movs	r2, #20
   b75a4:	2100      	movs	r1, #0
   b75a6:	a809      	add	r0, sp, #36	; 0x24
   b75a8:	f001 fc6c 	bl	b8e84 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b75ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b75ae:	2200      	movs	r2, #0
   b75b0:	a909      	add	r1, sp, #36	; 0x24
   b75b2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b75b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b75b8:	f7ff f8a8 	bl	b670c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b75bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b75c0:	b113      	cbz	r3, b75c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b75c2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b75c6:	b155      	cbz	r5, b75de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b75c8:	2700      	movs	r7, #0
   b75ca:	46b9      	mov	r9, r7
   b75cc:	46b8      	mov	r8, r7
   b75ce:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b75d0:	7923      	ldrb	r3, [r4, #4]
   b75d2:	b15d      	cbz	r5, b75ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b75d4:	b1c3      	cbz	r3, b7608 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b75d6:	2000      	movs	r0, #0
}
   b75d8:	b00f      	add	sp, #60	; 0x3c
   b75da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b75de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b75e2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b75e6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b75ea:	e7f1      	b.n	b75d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b75ec:	2b00      	cmp	r3, #0
   b75ee:	d135      	bne.n	b765c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b75f0:	68a3      	ldr	r3, [r4, #8]
   b75f2:	4543      	cmp	r3, r8
   b75f4:	d108      	bne.n	b7608 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b75f6:	f88d 9020 	strb.w	r9, [sp, #32]
   b75fa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b75fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7602:	89a3      	ldrh	r3, [r4, #12]
   b7604:	429a      	cmp	r2, r3
   b7606:	d0e6      	beq.n	b75d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7608:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b760a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b760c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7610:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7612:	ab04      	add	r3, sp, #16
   b7614:	f10d 020f 	add.w	r2, sp, #15
   b7618:	f7ff ffa2 	bl	b7560 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b761c:	7921      	ldrb	r1, [r4, #4]
   b761e:	b985      	cbnz	r5, b7642 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7620:	b989      	cbnz	r1, b7646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7622:	68a3      	ldr	r3, [r4, #8]
   b7624:	4543      	cmp	r3, r8
   b7626:	d30e      	bcc.n	b7646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7628:	f88d 9020 	strb.w	r9, [sp, #32]
   b762c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7630:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7634:	89a3      	ldrh	r3, [r4, #12]
   b7636:	429a      	cmp	r2, r3
   b7638:	d105      	bne.n	b7646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b763a:	9b04      	ldr	r3, [sp, #16]
   b763c:	4543      	cmp	r3, r8
   b763e:	d102      	bne.n	b7646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7640:	e7c9      	b.n	b75d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7642:	2900      	cmp	r1, #0
   b7644:	d1f9      	bne.n	b763a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7646:	2300      	movs	r3, #0
   b7648:	9301      	str	r3, [sp, #4]
   b764a:	7b63      	ldrb	r3, [r4, #13]
   b764c:	9300      	str	r3, [sp, #0]
   b764e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7652:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7654:	7830      	ldrb	r0, [r6, #0]
   b7656:	f7ff f861 	bl	b671c <hal_spi_set_settings>
   b765a:	e7bc      	b.n	b75d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b765c:	e9cd 5500 	strd	r5, r5, [sp]
   b7660:	462b      	mov	r3, r5
   b7662:	462a      	mov	r2, r5
   b7664:	2101      	movs	r1, #1
   b7666:	e7f5      	b.n	b7654 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7668 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7668:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b766a:	7800      	ldrb	r0, [r0, #0]
   b766c:	f7ff f836 	bl	b66dc <hal_spi_transfer>
}
   b7670:	b2c0      	uxtb	r0, r0
   b7672:	bd08      	pop	{r3, pc}

000b7674 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7674:	b510      	push	{r4, lr}
   b7676:	4604      	mov	r4, r0
{
	free(buffer);
   b7678:	6800      	ldr	r0, [r0, #0]
   b767a:	f7ff f993 	bl	b69a4 <free>
}
   b767e:	4620      	mov	r0, r4
   b7680:	bd10      	pop	{r4, pc}

000b7682 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7682:	b510      	push	{r4, lr}
   b7684:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7686:	6800      	ldr	r0, [r0, #0]
   b7688:	b108      	cbz	r0, b768e <_ZN6String10invalidateEv+0xc>
   b768a:	f7ff f98b 	bl	b69a4 <free>
	buffer = NULL;
   b768e:	2300      	movs	r3, #0
	capacity = len = 0;
   b7690:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7694:	6023      	str	r3, [r4, #0]
}
   b7696:	bd10      	pop	{r4, pc}

000b7698 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7698:	b538      	push	{r3, r4, r5, lr}
   b769a:	4604      	mov	r4, r0
   b769c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b769e:	6800      	ldr	r0, [r0, #0]
   b76a0:	3101      	adds	r1, #1
   b76a2:	f7ff f987 	bl	b69b4 <realloc>
	if (newbuffer) {
   b76a6:	b110      	cbz	r0, b76ae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b76a8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b76ac:	2001      	movs	r0, #1
	}
	return 0;
}
   b76ae:	bd38      	pop	{r3, r4, r5, pc}

000b76b0 <_ZN6String7reserveEj>:
{
   b76b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b76b2:	6803      	ldr	r3, [r0, #0]
{
   b76b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b76b6:	b123      	cbz	r3, b76c2 <_ZN6String7reserveEj+0x12>
   b76b8:	6843      	ldr	r3, [r0, #4]
   b76ba:	428b      	cmp	r3, r1
   b76bc:	d301      	bcc.n	b76c2 <_ZN6String7reserveEj+0x12>
   b76be:	2001      	movs	r0, #1
}
   b76c0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b76c2:	4620      	mov	r0, r4
   b76c4:	f7ff ffe8 	bl	b7698 <_ZN6String12changeBufferEj>
   b76c8:	2800      	cmp	r0, #0
   b76ca:	d0f9      	beq.n	b76c0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b76cc:	68a3      	ldr	r3, [r4, #8]
   b76ce:	2b00      	cmp	r3, #0
   b76d0:	d1f5      	bne.n	b76be <_ZN6String7reserveEj+0xe>
   b76d2:	6822      	ldr	r2, [r4, #0]
   b76d4:	7013      	strb	r3, [r2, #0]
   b76d6:	e7f2      	b.n	b76be <_ZN6String7reserveEj+0xe>

000b76d8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b76d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b76da:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b76dc:	4611      	mov	r1, r2
   b76de:	9201      	str	r2, [sp, #4]
{
   b76e0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b76e2:	f7ff ffe5 	bl	b76b0 <_ZN6String7reserveEj>
   b76e6:	9a01      	ldr	r2, [sp, #4]
   b76e8:	b928      	cbnz	r0, b76f6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b76ea:	4620      	mov	r0, r4
   b76ec:	f7ff ffc9 	bl	b7682 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b76f0:	4620      	mov	r0, r4
   b76f2:	b003      	add	sp, #12
   b76f4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b76f6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b76f8:	4629      	mov	r1, r5
   b76fa:	6820      	ldr	r0, [r4, #0]
   b76fc:	f001 fbb4 	bl	b8e68 <memcpy>
	buffer[len] = 0;
   b7700:	6822      	ldr	r2, [r4, #0]
   b7702:	68a3      	ldr	r3, [r4, #8]
   b7704:	2100      	movs	r1, #0
   b7706:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7708:	e7f2      	b.n	b76f0 <_ZN6String4copyEPKcj+0x18>

000b770a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b770a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b770c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b770e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7712:	4604      	mov	r4, r0
	len = 0;
   b7714:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7716:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7718:	b141      	cbz	r1, b772c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b771a:	4608      	mov	r0, r1
   b771c:	9101      	str	r1, [sp, #4]
   b771e:	f7fd fc03 	bl	b4f28 <strlen>
   b7722:	9901      	ldr	r1, [sp, #4]
   b7724:	4602      	mov	r2, r0
   b7726:	4620      	mov	r0, r4
   b7728:	f7ff ffd6 	bl	b76d8 <_ZN6String4copyEPKcj>
}
   b772c:	4620      	mov	r0, r4
   b772e:	b002      	add	sp, #8
   b7730:	bd10      	pop	{r4, pc}

000b7732 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7732:	4288      	cmp	r0, r1
{
   b7734:	b510      	push	{r4, lr}
   b7736:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7738:	d005      	beq.n	b7746 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b773a:	680b      	ldr	r3, [r1, #0]
   b773c:	b12b      	cbz	r3, b774a <_ZN6StringaSERKS_+0x18>
   b773e:	688a      	ldr	r2, [r1, #8]
   b7740:	4619      	mov	r1, r3
   b7742:	f7ff ffc9 	bl	b76d8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7746:	4620      	mov	r0, r4
   b7748:	bd10      	pop	{r4, pc}
	else invalidate();
   b774a:	f7ff ff9a 	bl	b7682 <_ZN6String10invalidateEv>
   b774e:	e7fa      	b.n	b7746 <_ZN6StringaSERKS_+0x14>

000b7750 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7750:	b510      	push	{r4, lr}
	buffer = NULL;
   b7752:	2300      	movs	r3, #0
String::String(const String &value)
   b7754:	4604      	mov	r4, r0
	capacity = 0;
   b7756:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b775a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b775c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b775e:	f7ff ffe8 	bl	b7732 <_ZN6StringaSERKS_>
}
   b7762:	4620      	mov	r0, r4
   b7764:	bd10      	pop	{r4, pc}

000b7766 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7766:	b513      	push	{r0, r1, r4, lr}
   b7768:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b776a:	b159      	cbz	r1, b7784 <_ZN6StringaSEPKc+0x1e>
   b776c:	4608      	mov	r0, r1
   b776e:	9101      	str	r1, [sp, #4]
   b7770:	f7fd fbda 	bl	b4f28 <strlen>
   b7774:	9901      	ldr	r1, [sp, #4]
   b7776:	4602      	mov	r2, r0
   b7778:	4620      	mov	r0, r4
   b777a:	f7ff ffad 	bl	b76d8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b777e:	4620      	mov	r0, r4
   b7780:	b002      	add	sp, #8
   b7782:	bd10      	pop	{r4, pc}
	else invalidate();
   b7784:	f7ff ff7d 	bl	b7682 <_ZN6String10invalidateEv>
   b7788:	e7f9      	b.n	b777e <_ZN6StringaSEPKc+0x18>
	...

000b778c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b778c:	4b05      	ldr	r3, [pc, #20]	; (b77a4 <_GLOBAL__sub_I_System+0x18>)
   b778e:	2202      	movs	r2, #2
   b7790:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7792:	4b05      	ldr	r3, [pc, #20]	; (b77a8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7794:	4a05      	ldr	r2, [pc, #20]	; (b77ac <_GLOBAL__sub_I_System+0x20>)
   b7796:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7798:	2000      	movs	r0, #0
   b779a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b779e:	f7ff b84d 	b.w	b683c <set_system_mode>
   b77a2:	bf00      	nop
   b77a4:	2003e6f8 	.word	0x2003e6f8
   b77a8:	2003e6ec 	.word	0x2003e6ec
   b77ac:	ffff0000 	.word	0xffff0000

000b77b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b77b0:	4b02      	ldr	r3, [pc, #8]	; (b77bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b77b2:	681a      	ldr	r2, [r3, #0]
   b77b4:	4b02      	ldr	r3, [pc, #8]	; (b77c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b77b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b77b8:	4770      	bx	lr
   b77ba:	bf00      	nop
   b77bc:	2003e5c8 	.word	0x2003e5c8
   b77c0:	2003e6fc 	.word	0x2003e6fc

000b77c4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b77c4:	4770      	bx	lr

000b77c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b77c6:	7441      	strb	r1, [r0, #17]
}
   b77c8:	4770      	bx	lr

000b77ca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b77ca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b77cc:	7c00      	ldrb	r0, [r0, #16]
   b77ce:	f7fe ffed 	bl	b67ac <hal_usart_available_data_for_write>
}
   b77d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b77d6:	bd08      	pop	{r3, pc}

000b77d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b77d8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b77da:	7c00      	ldrb	r0, [r0, #16]
   b77dc:	f7fe ffbe 	bl	b675c <hal_usart_available>
}
   b77e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b77e4:	bd08      	pop	{r3, pc}

000b77e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b77e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b77e8:	7c00      	ldrb	r0, [r0, #16]
   b77ea:	f7fe ffc7 	bl	b677c <hal_usart_peek>
}
   b77ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77f2:	bd08      	pop	{r3, pc}

000b77f4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b77f4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b77f6:	7c00      	ldrb	r0, [r0, #16]
   b77f8:	f7fe ffb8 	bl	b676c <hal_usart_read>
}
   b77fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7800:	bd08      	pop	{r3, pc}

000b7802 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7802:	7c00      	ldrb	r0, [r0, #16]
   b7804:	f7fe bfc2 	b.w	b678c <hal_usart_flush>

000b7808 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7808:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b780a:	7c45      	ldrb	r5, [r0, #17]
{
   b780c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b780e:	b12d      	cbz	r5, b781c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7810:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7812:	b003      	add	sp, #12
   b7814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7818:	f7fe bf98 	b.w	b674c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b781c:	7c00      	ldrb	r0, [r0, #16]
   b781e:	9101      	str	r1, [sp, #4]
   b7820:	f7fe ffc4 	bl	b67ac <hal_usart_available_data_for_write>
   b7824:	2800      	cmp	r0, #0
   b7826:	9901      	ldr	r1, [sp, #4]
   b7828:	dcf2      	bgt.n	b7810 <_ZN11USARTSerial5writeEh+0x8>
}
   b782a:	4628      	mov	r0, r5
   b782c:	b003      	add	sp, #12
   b782e:	bd30      	pop	{r4, r5, pc}

000b7830 <_ZN11USARTSerialD0Ev>:
   b7830:	b510      	push	{r4, lr}
   b7832:	2114      	movs	r1, #20
   b7834:	4604      	mov	r4, r0
   b7836:	f7fd fbbe 	bl	b4fb6 <_ZdlPvj>
   b783a:	4620      	mov	r0, r4
   b783c:	bd10      	pop	{r4, pc}
	...

000b7840 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7840:	b510      	push	{r4, lr}
   b7842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7846:	4604      	mov	r4, r0
   b7848:	4608      	mov	r0, r1
   b784a:	4611      	mov	r1, r2
   b784c:	2200      	movs	r2, #0
   b784e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7852:	4b04      	ldr	r3, [pc, #16]	; (b7864 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7854:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7856:	2301      	movs	r3, #1
  _serial = serial;
   b7858:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b785a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b785c:	f7fe ffae 	bl	b67bc <hal_usart_init_ex>
}
   b7860:	4620      	mov	r0, r4
   b7862:	bd10      	pop	{r4, pc}
   b7864:	000b9640 	.word	0x000b9640

000b7868 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7868:	7441      	strb	r1, [r0, #17]
}
   b786a:	4770      	bx	lr

000b786c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b786c:	4770      	bx	lr

000b786e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b786e:	4770      	bx	lr

000b7870 <_ZN9USBSerial4readEv>:
{
   b7870:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7872:	2100      	movs	r1, #0
   b7874:	7c00      	ldrb	r0, [r0, #16]
   b7876:	f7fe ffc9 	bl	b680c <HAL_USB_USART_Receive_Data>
}
   b787a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b787e:	bd08      	pop	{r3, pc}

000b7880 <_ZN9USBSerial4peekEv>:
{
   b7880:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7882:	2101      	movs	r1, #1
   b7884:	7c00      	ldrb	r0, [r0, #16]
   b7886:	f7fe ffc1 	bl	b680c <HAL_USB_USART_Receive_Data>
}
   b788a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b788e:	bd08      	pop	{r3, pc}

000b7890 <_ZN9USBSerial17availableForWriteEv>:
{
   b7890:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7892:	7c00      	ldrb	r0, [r0, #16]
   b7894:	f7fe ffb2 	bl	b67fc <HAL_USB_USART_Available_Data_For_Write>
}
   b7898:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b789c:	bd08      	pop	{r3, pc}

000b789e <_ZN9USBSerial9availableEv>:
{
   b789e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b78a0:	7c00      	ldrb	r0, [r0, #16]
   b78a2:	f7fe ffa3 	bl	b67ec <HAL_USB_USART_Available_Data>
}
   b78a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b78aa:	bd08      	pop	{r3, pc}

000b78ac <_ZN9USBSerial5writeEh>:
{
   b78ac:	b513      	push	{r0, r1, r4, lr}
   b78ae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b78b0:	7c00      	ldrb	r0, [r0, #16]
{
   b78b2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b78b4:	f7fe ffa2 	bl	b67fc <HAL_USB_USART_Available_Data_For_Write>
   b78b8:	2800      	cmp	r0, #0
   b78ba:	9901      	ldr	r1, [sp, #4]
   b78bc:	dc01      	bgt.n	b78c2 <_ZN9USBSerial5writeEh+0x16>
   b78be:	7c60      	ldrb	r0, [r4, #17]
   b78c0:	b120      	cbz	r0, b78cc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b78c2:	7c20      	ldrb	r0, [r4, #16]
   b78c4:	f7fe ffaa 	bl	b681c <HAL_USB_USART_Send_Data>
   b78c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b78cc:	b002      	add	sp, #8
   b78ce:	bd10      	pop	{r4, pc}

000b78d0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b78d0:	7c00      	ldrb	r0, [r0, #16]
   b78d2:	f7fe bfab 	b.w	b682c <HAL_USB_USART_Flush_Data>

000b78d6 <_ZN9USBSerialD0Ev>:
   b78d6:	b510      	push	{r4, lr}
   b78d8:	2114      	movs	r1, #20
   b78da:	4604      	mov	r4, r0
   b78dc:	f7fd fb6b 	bl	b4fb6 <_ZdlPvj>
   b78e0:	4620      	mov	r0, r4
   b78e2:	bd10      	pop	{r4, pc}

000b78e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b78e4:	b510      	push	{r4, lr}
   b78e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b78ea:	4604      	mov	r4, r0
   b78ec:	4608      	mov	r0, r1
   b78ee:	2100      	movs	r1, #0
   b78f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b78f4:	4b04      	ldr	r3, [pc, #16]	; (b7908 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b78f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b78f8:	2301      	movs	r3, #1
  _serial = serial;
   b78fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b78fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b78fe:	4611      	mov	r1, r2
   b7900:	f7fe ff64 	bl	b67cc <HAL_USB_USART_Init>
}
   b7904:	4620      	mov	r0, r4
   b7906:	bd10      	pop	{r4, pc}
   b7908:	000b9670 	.word	0x000b9670

000b790c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b790c:	7c00      	ldrb	r0, [r0, #16]
   b790e:	2200      	movs	r2, #0
   b7910:	f7fe bf64 	b.w	b67dc <HAL_USB_USART_Begin>

000b7914 <_Z19acquireSerialBufferv>:
{
   b7914:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7916:	2214      	movs	r2, #20
{
   b7918:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b791a:	2100      	movs	r1, #0
   b791c:	f001 fab2 	bl	b8e84 <memset>
}
   b7920:	4620      	mov	r0, r4
   b7922:	bd10      	pop	{r4, pc}

000b7924 <_Z16_fetch_usbserialv>:
{
   b7924:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7926:	4c0f      	ldr	r4, [pc, #60]	; (b7964 <_Z16_fetch_usbserialv+0x40>)
{
   b7928:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b792a:	a803      	add	r0, sp, #12
   b792c:	f7ff fff2 	bl	b7914 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7930:	7821      	ldrb	r1, [r4, #0]
   b7932:	f3bf 8f5b 	dmb	ish
   b7936:	f011 0101 	ands.w	r1, r1, #1
   b793a:	d10f      	bne.n	b795c <_Z16_fetch_usbserialv+0x38>
   b793c:	4620      	mov	r0, r4
   b793e:	9101      	str	r1, [sp, #4]
   b7940:	f7fd fb3b 	bl	b4fba <__cxa_guard_acquire>
   b7944:	9901      	ldr	r1, [sp, #4]
   b7946:	b148      	cbz	r0, b795c <_Z16_fetch_usbserialv+0x38>
   b7948:	aa03      	add	r2, sp, #12
   b794a:	4807      	ldr	r0, [pc, #28]	; (b7968 <_Z16_fetch_usbserialv+0x44>)
   b794c:	f7ff ffca 	bl	b78e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7950:	4620      	mov	r0, r4
   b7952:	f7fd fb37 	bl	b4fc4 <__cxa_guard_release>
   b7956:	4805      	ldr	r0, [pc, #20]	; (b796c <_Z16_fetch_usbserialv+0x48>)
   b7958:	f001 fa80 	bl	b8e5c <atexit>
	return _usbserial;
}
   b795c:	4802      	ldr	r0, [pc, #8]	; (b7968 <_Z16_fetch_usbserialv+0x44>)
   b795e:	b008      	add	sp, #32
   b7960:	bd10      	pop	{r4, pc}
   b7962:	bf00      	nop
   b7964:	2003e700 	.word	0x2003e700
   b7968:	2003e704 	.word	0x2003e704
   b796c:	000b786d 	.word	0x000b786d

000b7970 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7970:	2200      	movs	r2, #0
   b7972:	6840      	ldr	r0, [r0, #4]
   b7974:	4611      	mov	r1, r2
   b7976:	f7fe bfc5 	b.w	b6904 <network_ready>

000b797a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b797a:	2200      	movs	r2, #0
   b797c:	6840      	ldr	r0, [r0, #4]
   b797e:	4611      	mov	r1, r2
   b7980:	f7fe bfe0 	b.w	b6944 <network_listening>

000b7984 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7984:	2200      	movs	r2, #0
   b7986:	6840      	ldr	r0, [r0, #4]
   b7988:	4611      	mov	r1, r2
   b798a:	f7fe bfeb 	b.w	b6964 <network_get_listen_timeout>

000b798e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b798e:	6840      	ldr	r0, [r0, #4]
   b7990:	2200      	movs	r2, #0
   b7992:	f7fe bfdf 	b.w	b6954 <network_set_listen_timeout>

000b7996 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7996:	6840      	ldr	r0, [r0, #4]
   b7998:	2200      	movs	r2, #0
   b799a:	f081 0101 	eor.w	r1, r1, #1
   b799e:	f7fe bfc9 	b.w	b6934 <network_listen>

000b79a2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b79a2:	2300      	movs	r3, #0
   b79a4:	6840      	ldr	r0, [r0, #4]
   b79a6:	461a      	mov	r2, r3
   b79a8:	4619      	mov	r1, r3
   b79aa:	f7fe bfbb 	b.w	b6924 <network_off>

000b79ae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b79ae:	2300      	movs	r3, #0
   b79b0:	6840      	ldr	r0, [r0, #4]
   b79b2:	461a      	mov	r2, r3
   b79b4:	4619      	mov	r1, r3
   b79b6:	f7fe bfad 	b.w	b6914 <network_on>

000b79ba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b79ba:	2200      	movs	r2, #0
   b79bc:	6840      	ldr	r0, [r0, #4]
   b79be:	4611      	mov	r1, r2
   b79c0:	f7fe bf90 	b.w	b68e4 <network_connecting>

000b79c4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b79c4:	6840      	ldr	r0, [r0, #4]
   b79c6:	2200      	movs	r2, #0
   b79c8:	2102      	movs	r1, #2
   b79ca:	f7fe bf93 	b.w	b68f4 <network_disconnect>

000b79ce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b79ce:	2300      	movs	r3, #0
   b79d0:	6840      	ldr	r0, [r0, #4]
   b79d2:	461a      	mov	r2, r3
   b79d4:	f7fe bf7e 	b.w	b68d4 <network_connect>

000b79d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b79d8:	4b02      	ldr	r3, [pc, #8]	; (b79e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b79da:	2204      	movs	r2, #4
   b79dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b79de:	4a02      	ldr	r2, [pc, #8]	; (b79e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b79e0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b79e2:	4770      	bx	lr
   b79e4:	2003e718 	.word	0x2003e718
   b79e8:	000b96a0 	.word	0x000b96a0

000b79ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b79ec:	4b01      	ldr	r3, [pc, #4]	; (b79f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b79ee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b79f0:	4770      	bx	lr
   b79f2:	bf00      	nop
   b79f4:	2003e5d0 	.word	0x2003e5d0

000b79f8 <serialEventRun>:
{
   b79f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b79fa:	4b0b      	ldr	r3, [pc, #44]	; (b7a28 <serialEventRun+0x30>)
   b79fc:	b143      	cbz	r3, b7a10 <serialEventRun+0x18>
   b79fe:	f7ff ff91 	bl	b7924 <_Z16_fetch_usbserialv>
   b7a02:	6803      	ldr	r3, [r0, #0]
   b7a04:	691b      	ldr	r3, [r3, #16]
   b7a06:	4798      	blx	r3
   b7a08:	2800      	cmp	r0, #0
   b7a0a:	dd01      	ble.n	b7a10 <serialEventRun+0x18>
        serialEvent();
   b7a0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7a10:	4b06      	ldr	r3, [pc, #24]	; (b7a2c <serialEventRun+0x34>)
   b7a12:	b143      	cbz	r3, b7a26 <serialEventRun+0x2e>
   b7a14:	f000 f972 	bl	b7cfc <_Z22__fetch_global_Serial1v>
   b7a18:	6803      	ldr	r3, [r0, #0]
   b7a1a:	691b      	ldr	r3, [r3, #16]
   b7a1c:	4798      	blx	r3
   b7a1e:	2800      	cmp	r0, #0
   b7a20:	dd01      	ble.n	b7a26 <serialEventRun+0x2e>
        serialEvent1();
   b7a22:	f3af 8000 	nop.w
}
   b7a26:	bd08      	pop	{r3, pc}
	...

000b7a30 <_post_loop>:
{
   b7a30:	b508      	push	{r3, lr}
	serialEventRun();
   b7a32:	f7ff ffe1 	bl	b79f8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7a36:	f7fe fd99 	bl	b656c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7a3a:	4b01      	ldr	r3, [pc, #4]	; (b7a40 <_post_loop+0x10>)
   b7a3c:	6018      	str	r0, [r3, #0]
}
   b7a3e:	bd08      	pop	{r3, pc}
   b7a40:	2003e728 	.word	0x2003e728

000b7a44 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7a44:	4805      	ldr	r0, [pc, #20]	; (b7a5c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7a46:	4a06      	ldr	r2, [pc, #24]	; (b7a60 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7a48:	4906      	ldr	r1, [pc, #24]	; (b7a64 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7a4a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7a4c:	1a12      	subs	r2, r2, r0
   b7a4e:	f001 fa0b 	bl	b8e68 <memcpy>
    __backup_sram_signature = signature;
   b7a52:	4b05      	ldr	r3, [pc, #20]	; (b7a68 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7a54:	4a05      	ldr	r2, [pc, #20]	; (b7a6c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7a56:	601a      	str	r2, [r3, #0]
}
   b7a58:	bd08      	pop	{r3, pc}
   b7a5a:	bf00      	nop
   b7a5c:	2003f400 	.word	0x2003f400
   b7a60:	2003f404 	.word	0x2003f404
   b7a64:	000b9824 	.word	0x000b9824
   b7a68:	2003f400 	.word	0x2003f400
   b7a6c:	9a271c1e 	.word	0x9a271c1e

000b7a70 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7a70:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7a72:	2300      	movs	r3, #0
   b7a74:	9300      	str	r3, [sp, #0]
   b7a76:	461a      	mov	r2, r3
   b7a78:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7a7c:	f7fe ff08 	bl	b6890 <system_ctrl_set_result>
}
   b7a80:	b003      	add	sp, #12
   b7a82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7a88 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7a88:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7a8a:	8843      	ldrh	r3, [r0, #2]
   b7a8c:	2b0a      	cmp	r3, #10
   b7a8e:	d008      	beq.n	b7aa2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7a90:	2b50      	cmp	r3, #80	; 0x50
   b7a92:	d10b      	bne.n	b7aac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7a94:	4b09      	ldr	r3, [pc, #36]	; (b7abc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7a96:	681b      	ldr	r3, [r3, #0]
   b7a98:	b14b      	cbz	r3, b7aae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7a9a:	b003      	add	sp, #12
   b7a9c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7aa0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7aa2:	f7ff ffe5 	bl	b7a70 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7aa6:	b003      	add	sp, #12
   b7aa8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7aac:	2300      	movs	r3, #0
   b7aae:	9300      	str	r3, [sp, #0]
   b7ab0:	461a      	mov	r2, r3
   b7ab2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7ab6:	f7fe feeb 	bl	b6890 <system_ctrl_set_result>
}
   b7aba:	e7f4      	b.n	b7aa6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7abc:	2003e724 	.word	0x2003e724

000b7ac0 <module_user_init_hook>:
{
   b7ac0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7ac2:	4812      	ldr	r0, [pc, #72]	; (b7b0c <module_user_init_hook+0x4c>)
   b7ac4:	2100      	movs	r1, #0
   b7ac6:	f7fe ffa5 	bl	b6a14 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7aca:	4b11      	ldr	r3, [pc, #68]	; (b7b10 <module_user_init_hook+0x50>)
   b7acc:	681a      	ldr	r2, [r3, #0]
   b7ace:	4b11      	ldr	r3, [pc, #68]	; (b7b14 <module_user_init_hook+0x54>)
   b7ad0:	429a      	cmp	r2, r3
   b7ad2:	4b11      	ldr	r3, [pc, #68]	; (b7b18 <module_user_init_hook+0x58>)
   b7ad4:	bf0c      	ite	eq
   b7ad6:	2201      	moveq	r2, #1
   b7ad8:	2200      	movne	r2, #0
   b7ada:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7adc:	d001      	beq.n	b7ae2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7ade:	f7ff ffb1 	bl	b7a44 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7ae2:	f7fe fd3b 	bl	b655c <HAL_RNG_GetRandomNumber>
   b7ae6:	4604      	mov	r4, r0
    srand(seed);
   b7ae8:	f001 f9d4 	bl	b8e94 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7aec:	4b0b      	ldr	r3, [pc, #44]	; (b7b1c <module_user_init_hook+0x5c>)
   b7aee:	b113      	cbz	r3, b7af6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7af0:	4620      	mov	r0, r4
   b7af2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7af6:	2100      	movs	r1, #0
   b7af8:	4808      	ldr	r0, [pc, #32]	; (b7b1c <module_user_init_hook+0x5c>)
   b7afa:	f7fe fee3 	bl	b68c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7b02:	4807      	ldr	r0, [pc, #28]	; (b7b20 <module_user_init_hook+0x60>)
   b7b04:	2100      	movs	r1, #0
   b7b06:	f7fe beb9 	b.w	b687c <system_ctrl_set_app_request_handler>
   b7b0a:	bf00      	nop
   b7b0c:	000b79ed 	.word	0x000b79ed
   b7b10:	2003f400 	.word	0x2003f400
   b7b14:	9a271c1e 	.word	0x9a271c1e
   b7b18:	2003e720 	.word	0x2003e720
   b7b1c:	00000000 	.word	0x00000000
   b7b20:	000b7a89 	.word	0x000b7a89

000b7b24 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7b24:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7b26:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7b28:	d902      	bls.n	b7b30 <pinAvailable+0xc>
    return false;
   b7b2a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7b2c:	b002      	add	sp, #8
   b7b2e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7b30:	f1a0 030b 	sub.w	r3, r0, #11
   b7b34:	2b02      	cmp	r3, #2
   b7b36:	d81a      	bhi.n	b7b6e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7b38:	4c17      	ldr	r4, [pc, #92]	; (b7b98 <pinAvailable+0x74>)
   b7b3a:	7821      	ldrb	r1, [r4, #0]
   b7b3c:	f3bf 8f5b 	dmb	ish
   b7b40:	f011 0101 	ands.w	r1, r1, #1
   b7b44:	d10b      	bne.n	b7b5e <pinAvailable+0x3a>
   b7b46:	4620      	mov	r0, r4
   b7b48:	9101      	str	r1, [sp, #4]
   b7b4a:	f7fd fa36 	bl	b4fba <__cxa_guard_acquire>
   b7b4e:	9901      	ldr	r1, [sp, #4]
   b7b50:	b128      	cbz	r0, b7b5e <pinAvailable+0x3a>
   b7b52:	4812      	ldr	r0, [pc, #72]	; (b7b9c <pinAvailable+0x78>)
   b7b54:	f7ff fce2 	bl	b751c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7b58:	4620      	mov	r0, r4
   b7b5a:	f7fd fa33 	bl	b4fc4 <__cxa_guard_release>
   b7b5e:	4b0f      	ldr	r3, [pc, #60]	; (b7b9c <pinAvailable+0x78>)
   b7b60:	7818      	ldrb	r0, [r3, #0]
   b7b62:	f7fe fdcb 	bl	b66fc <hal_spi_is_enabled>
   b7b66:	2800      	cmp	r0, #0
   b7b68:	d1df      	bne.n	b7b2a <pinAvailable+0x6>
  return true; // 'pin' is available
   b7b6a:	2001      	movs	r0, #1
   b7b6c:	e7de      	b.n	b7b2c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7b6e:	2801      	cmp	r0, #1
   b7b70:	d809      	bhi.n	b7b86 <pinAvailable+0x62>
   b7b72:	f000 f883 	bl	b7c7c <_Z19__fetch_global_Wirev>
   b7b76:	2100      	movs	r1, #0
   b7b78:	7c00      	ldrb	r0, [r0, #16]
   b7b7a:	f7fe fd77 	bl	b666c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7b7e:	f080 0001 	eor.w	r0, r0, #1
   b7b82:	b2c0      	uxtb	r0, r0
   b7b84:	e7d2      	b.n	b7b2c <pinAvailable+0x8>
   b7b86:	3809      	subs	r0, #9
   b7b88:	2801      	cmp	r0, #1
   b7b8a:	d8ee      	bhi.n	b7b6a <pinAvailable+0x46>
   b7b8c:	f000 f8b6 	bl	b7cfc <_Z22__fetch_global_Serial1v>
   b7b90:	7c00      	ldrb	r0, [r0, #16]
   b7b92:	f7fe fe03 	bl	b679c <hal_usart_is_enabled>
   b7b96:	e7f2      	b.n	b7b7e <pinAvailable+0x5a>
   b7b98:	2003e6b4 	.word	0x2003e6b4
   b7b9c:	2003e6b8 	.word	0x2003e6b8

000b7ba0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ba0:	2823      	cmp	r0, #35	; 0x23
{
   b7ba2:	b538      	push	{r3, r4, r5, lr}
   b7ba4:	4604      	mov	r4, r0
   b7ba6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ba8:	d80a      	bhi.n	b7bc0 <pinMode+0x20>
   b7baa:	29ff      	cmp	r1, #255	; 0xff
   b7bac:	d008      	beq.n	b7bc0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7bae:	f7ff ffb9 	bl	b7b24 <pinAvailable>
   b7bb2:	b128      	cbz	r0, b7bc0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7bb4:	4629      	mov	r1, r5
   b7bb6:	4620      	mov	r0, r4
}
   b7bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7bbc:	f7fe bce6 	b.w	b658c <hal_gpio_mode>
}
   b7bc0:	bd38      	pop	{r3, r4, r5, pc}

000b7bc2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7bc2:	b538      	push	{r3, r4, r5, lr}
   b7bc4:	4604      	mov	r4, r0
   b7bc6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7bc8:	f7fe fce8 	bl	b659c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7bcc:	28ff      	cmp	r0, #255	; 0xff
   b7bce:	d010      	beq.n	b7bf2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7bd0:	2806      	cmp	r0, #6
   b7bd2:	d804      	bhi.n	b7bde <digitalWrite+0x1c>
   b7bd4:	234d      	movs	r3, #77	; 0x4d
   b7bd6:	fa23 f000 	lsr.w	r0, r3, r0
   b7bda:	07c3      	lsls	r3, r0, #31
   b7bdc:	d409      	bmi.n	b7bf2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7bde:	4620      	mov	r0, r4
   b7be0:	f7ff ffa0 	bl	b7b24 <pinAvailable>
   b7be4:	b128      	cbz	r0, b7bf2 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7be6:	4629      	mov	r1, r5
   b7be8:	4620      	mov	r0, r4
}
   b7bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7bee:	f7fe bcdd 	b.w	b65ac <hal_gpio_write>
}
   b7bf2:	bd38      	pop	{r3, r4, r5, pc}

000b7bf4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b7bf4:	b510      	push	{r4, lr}
   b7bf6:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b7bf8:	f7fe fcd0 	bl	b659c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7bfc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7bfe:	b2db      	uxtb	r3, r3
   b7c00:	2b01      	cmp	r3, #1
   b7c02:	d908      	bls.n	b7c16 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7c04:	4620      	mov	r0, r4
   b7c06:	f7ff ff8d 	bl	b7b24 <pinAvailable>
   b7c0a:	b120      	cbz	r0, b7c16 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b7c0c:	4620      	mov	r0, r4
}
   b7c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b7c12:	f7fe bcd3 	b.w	b65bc <hal_gpio_read>
}
   b7c16:	2000      	movs	r0, #0
   b7c18:	bd10      	pop	{r4, pc}

000b7c1a <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7c1a:	280d      	cmp	r0, #13
{
   b7c1c:	b510      	push	{r4, lr}
   b7c1e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7c20:	bf9c      	itt	ls
   b7c22:	340e      	addls	r4, #14
   b7c24:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b7c26:	4620      	mov	r0, r4
   b7c28:	f7ff ff7c 	bl	b7b24 <pinAvailable>
   b7c2c:	b150      	cbz	r0, b7c44 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b7c2e:	2103      	movs	r1, #3
   b7c30:	4620      	mov	r0, r4
   b7c32:	f7fe fca3 	bl	b657c <hal_pin_validate_function>
   b7c36:	2803      	cmp	r0, #3
   b7c38:	d104      	bne.n	b7c44 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7c3a:	4620      	mov	r0, r4
}
   b7c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7c40:	f7fe bcc4 	b.w	b65cc <hal_adc_read>
}
   b7c44:	2000      	movs	r0, #0
   b7c46:	bd10      	pop	{r4, pc}

000b7c48 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
   b7c48:	f7fe bcc8 	b.w	b65dc <hal_gpio_pulse_in>

000b7c4c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7c4c:	4770      	bx	lr
	...

000b7c50 <_Z17acquireWireBufferv>:
{
   b7c50:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7c52:	2520      	movs	r5, #32
   b7c54:	2314      	movs	r3, #20
{
   b7c56:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7c58:	6003      	str	r3, [r0, #0]
   b7c5a:	6085      	str	r5, [r0, #8]
   b7c5c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7c5e:	4906      	ldr	r1, [pc, #24]	; (b7c78 <_Z17acquireWireBufferv+0x28>)
   b7c60:	4628      	mov	r0, r5
   b7c62:	f000 f86f 	bl	b7d44 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7c66:	4904      	ldr	r1, [pc, #16]	; (b7c78 <_Z17acquireWireBufferv+0x28>)
	};
   b7c68:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7c6a:	4628      	mov	r0, r5
   b7c6c:	f000 f86a 	bl	b7d44 <_ZnajRKSt9nothrow_t>
	};
   b7c70:	60e0      	str	r0, [r4, #12]
}
   b7c72:	4620      	mov	r0, r4
   b7c74:	bd38      	pop	{r3, r4, r5, pc}
   b7c76:	bf00      	nop
   b7c78:	000b96d4 	.word	0x000b96d4

000b7c7c <_Z19__fetch_global_Wirev>:
{
   b7c7c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7c7e:	4d0e      	ldr	r5, [pc, #56]	; (b7cb8 <_Z19__fetch_global_Wirev+0x3c>)
   b7c80:	7829      	ldrb	r1, [r5, #0]
   b7c82:	f3bf 8f5b 	dmb	ish
   b7c86:	f011 0401 	ands.w	r4, r1, #1
{
   b7c8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7c8c:	d111      	bne.n	b7cb2 <_Z19__fetch_global_Wirev+0x36>
   b7c8e:	4628      	mov	r0, r5
   b7c90:	f7fd f993 	bl	b4fba <__cxa_guard_acquire>
   b7c94:	b168      	cbz	r0, b7cb2 <_Z19__fetch_global_Wirev+0x36>
   b7c96:	a801      	add	r0, sp, #4
   b7c98:	f7ff ffda 	bl	b7c50 <_Z17acquireWireBufferv>
   b7c9c:	aa01      	add	r2, sp, #4
   b7c9e:	4621      	mov	r1, r4
   b7ca0:	4806      	ldr	r0, [pc, #24]	; (b7cbc <_Z19__fetch_global_Wirev+0x40>)
   b7ca2:	f7ff fa17 	bl	b70d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7ca6:	4628      	mov	r0, r5
   b7ca8:	f7fd f98c 	bl	b4fc4 <__cxa_guard_release>
   b7cac:	4804      	ldr	r0, [pc, #16]	; (b7cc0 <_Z19__fetch_global_Wirev+0x44>)
   b7cae:	f001 f8d5 	bl	b8e5c <atexit>
	return wire;
}
   b7cb2:	4802      	ldr	r0, [pc, #8]	; (b7cbc <_Z19__fetch_global_Wirev+0x40>)
   b7cb4:	b007      	add	sp, #28
   b7cb6:	bd30      	pop	{r4, r5, pc}
   b7cb8:	2003e72c 	.word	0x2003e72c
   b7cbc:	2003e730 	.word	0x2003e730
   b7cc0:	000b7c4d 	.word	0x000b7c4d

000b7cc4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7cc4:	4770      	bx	lr
	...

000b7cc8 <_Z20acquireSerial1Bufferv>:
{
   b7cc8:	b538      	push	{r3, r4, r5, lr}
   b7cca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7ccc:	2514      	movs	r5, #20
   b7cce:	462a      	mov	r2, r5
   b7cd0:	2100      	movs	r1, #0
   b7cd2:	f001 f8d7 	bl	b8e84 <memset>
   b7cd6:	8025      	strh	r5, [r4, #0]
   b7cd8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7cda:	4907      	ldr	r1, [pc, #28]	; (b7cf8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7cdc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7cde:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7ce0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7ce2:	f000 f82f 	bl	b7d44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7ce6:	4904      	ldr	r1, [pc, #16]	; (b7cf8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7ce8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7cea:	4628      	mov	r0, r5
   b7cec:	f000 f82a 	bl	b7d44 <_ZnajRKSt9nothrow_t>
    };
   b7cf0:	60e0      	str	r0, [r4, #12]
}
   b7cf2:	4620      	mov	r0, r4
   b7cf4:	bd38      	pop	{r3, r4, r5, pc}
   b7cf6:	bf00      	nop
   b7cf8:	000b96d4 	.word	0x000b96d4

000b7cfc <_Z22__fetch_global_Serial1v>:
{
   b7cfc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7cfe:	4d0e      	ldr	r5, [pc, #56]	; (b7d38 <_Z22__fetch_global_Serial1v+0x3c>)
   b7d00:	7829      	ldrb	r1, [r5, #0]
   b7d02:	f3bf 8f5b 	dmb	ish
   b7d06:	f011 0401 	ands.w	r4, r1, #1
{
   b7d0a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7d0c:	d111      	bne.n	b7d32 <_Z22__fetch_global_Serial1v+0x36>
   b7d0e:	4628      	mov	r0, r5
   b7d10:	f7fd f953 	bl	b4fba <__cxa_guard_acquire>
   b7d14:	b168      	cbz	r0, b7d32 <_Z22__fetch_global_Serial1v+0x36>
   b7d16:	a801      	add	r0, sp, #4
   b7d18:	f7ff ffd6 	bl	b7cc8 <_Z20acquireSerial1Bufferv>
   b7d1c:	aa01      	add	r2, sp, #4
   b7d1e:	4621      	mov	r1, r4
   b7d20:	4806      	ldr	r0, [pc, #24]	; (b7d3c <_Z22__fetch_global_Serial1v+0x40>)
   b7d22:	f7ff fd8d 	bl	b7840 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7d26:	4628      	mov	r0, r5
   b7d28:	f7fd f94c 	bl	b4fc4 <__cxa_guard_release>
   b7d2c:	4804      	ldr	r0, [pc, #16]	; (b7d40 <_Z22__fetch_global_Serial1v+0x44>)
   b7d2e:	f001 f895 	bl	b8e5c <atexit>
    return serial1;
}
   b7d32:	4802      	ldr	r0, [pc, #8]	; (b7d3c <_Z22__fetch_global_Serial1v+0x40>)
   b7d34:	b007      	add	sp, #28
   b7d36:	bd30      	pop	{r4, r5, pc}
   b7d38:	2003e744 	.word	0x2003e744
   b7d3c:	2003e748 	.word	0x2003e748
   b7d40:	000b7cc5 	.word	0x000b7cc5

000b7d44 <_ZnajRKSt9nothrow_t>:
   b7d44:	f7fd b935 	b.w	b4fb2 <_Znaj>

000b7d48 <_ZSt25__throw_bad_function_callv>:
   b7d48:	b508      	push	{r3, lr}
   b7d4a:	f7fe fe43 	bl	b69d4 <abort>
	...

000b7d50 <pow>:
   b7d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d52:	ed2d 8b02 	vpush	{d8}
   b7d56:	ec57 6b10 	vmov	r6, r7, d0
   b7d5a:	ec55 4b11 	vmov	r4, r5, d1
   b7d5e:	f000 f8cb 	bl	b7ef8 <__ieee754_pow>
   b7d62:	4b63      	ldr	r3, [pc, #396]	; (b7ef0 <pow+0x1a0>)
   b7d64:	eeb0 8a40 	vmov.f32	s16, s0
   b7d68:	eef0 8a60 	vmov.f32	s17, s1
   b7d6c:	f993 3000 	ldrsb.w	r3, [r3]
   b7d70:	3301      	adds	r3, #1
   b7d72:	d02a      	beq.n	b7dca <pow+0x7a>
   b7d74:	4622      	mov	r2, r4
   b7d76:	462b      	mov	r3, r5
   b7d78:	4620      	mov	r0, r4
   b7d7a:	4629      	mov	r1, r5
   b7d7c:	f7fc fda6 	bl	b48cc <__aeabi_dcmpun>
   b7d80:	bb18      	cbnz	r0, b7dca <pow+0x7a>
   b7d82:	4632      	mov	r2, r6
   b7d84:	463b      	mov	r3, r7
   b7d86:	4630      	mov	r0, r6
   b7d88:	4639      	mov	r1, r7
   b7d8a:	f7fc fd9f 	bl	b48cc <__aeabi_dcmpun>
   b7d8e:	2800      	cmp	r0, #0
   b7d90:	d144      	bne.n	b7e1c <pow+0xcc>
   b7d92:	2200      	movs	r2, #0
   b7d94:	2300      	movs	r3, #0
   b7d96:	4630      	mov	r0, r6
   b7d98:	4639      	mov	r1, r7
   b7d9a:	f7fc fd65 	bl	b4868 <__aeabi_dcmpeq>
   b7d9e:	b1d8      	cbz	r0, b7dd8 <pow+0x88>
   b7da0:	2200      	movs	r2, #0
   b7da2:	2300      	movs	r3, #0
   b7da4:	4620      	mov	r0, r4
   b7da6:	4629      	mov	r1, r5
   b7da8:	f7fc fd5e 	bl	b4868 <__aeabi_dcmpeq>
   b7dac:	2800      	cmp	r0, #0
   b7dae:	d13d      	bne.n	b7e2c <pow+0xdc>
   b7db0:	ec45 4b10 	vmov	d0, r4, r5
   b7db4:	f000 ff10 	bl	b8bd8 <finite>
   b7db8:	b138      	cbz	r0, b7dca <pow+0x7a>
   b7dba:	4620      	mov	r0, r4
   b7dbc:	4629      	mov	r1, r5
   b7dbe:	2200      	movs	r2, #0
   b7dc0:	2300      	movs	r3, #0
   b7dc2:	f7fc fd5b 	bl	b487c <__aeabi_dcmplt>
   b7dc6:	2800      	cmp	r0, #0
   b7dc8:	d15c      	bne.n	b7e84 <pow+0x134>
   b7dca:	eeb0 0a48 	vmov.f32	s0, s16
   b7dce:	eef0 0a68 	vmov.f32	s1, s17
   b7dd2:	ecbd 8b02 	vpop	{d8}
   b7dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7dd8:	eeb0 0a48 	vmov.f32	s0, s16
   b7ddc:	eef0 0a68 	vmov.f32	s1, s17
   b7de0:	f000 fefa 	bl	b8bd8 <finite>
   b7de4:	b358      	cbz	r0, b7e3e <pow+0xee>
   b7de6:	ec51 0b18 	vmov	r0, r1, d8
   b7dea:	2200      	movs	r2, #0
   b7dec:	2300      	movs	r3, #0
   b7dee:	f7fc fd3b 	bl	b4868 <__aeabi_dcmpeq>
   b7df2:	2800      	cmp	r0, #0
   b7df4:	d0e9      	beq.n	b7dca <pow+0x7a>
   b7df6:	ec47 6b10 	vmov	d0, r6, r7
   b7dfa:	f000 feed 	bl	b8bd8 <finite>
   b7dfe:	2800      	cmp	r0, #0
   b7e00:	d0e3      	beq.n	b7dca <pow+0x7a>
   b7e02:	ec45 4b10 	vmov	d0, r4, r5
   b7e06:	f000 fee7 	bl	b8bd8 <finite>
   b7e0a:	2800      	cmp	r0, #0
   b7e0c:	d0dd      	beq.n	b7dca <pow+0x7a>
   b7e0e:	f7fe fdf1 	bl	b69f4 <__errno>
   b7e12:	2322      	movs	r3, #34	; 0x22
   b7e14:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b7ed0 <pow+0x180>
   b7e18:	6003      	str	r3, [r0, #0]
   b7e1a:	e7d6      	b.n	b7dca <pow+0x7a>
   b7e1c:	4620      	mov	r0, r4
   b7e1e:	4629      	mov	r1, r5
   b7e20:	2200      	movs	r2, #0
   b7e22:	2300      	movs	r3, #0
   b7e24:	f7fc fd20 	bl	b4868 <__aeabi_dcmpeq>
   b7e28:	2800      	cmp	r0, #0
   b7e2a:	d0ce      	beq.n	b7dca <pow+0x7a>
   b7e2c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b7ed8 <pow+0x188>
   b7e30:	eeb0 0a48 	vmov.f32	s0, s16
   b7e34:	eef0 0a68 	vmov.f32	s1, s17
   b7e38:	ecbd 8b02 	vpop	{d8}
   b7e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7e3e:	ec47 6b10 	vmov	d0, r6, r7
   b7e42:	f000 fec9 	bl	b8bd8 <finite>
   b7e46:	2800      	cmp	r0, #0
   b7e48:	d0cd      	beq.n	b7de6 <pow+0x96>
   b7e4a:	ec45 4b10 	vmov	d0, r4, r5
   b7e4e:	f000 fec3 	bl	b8bd8 <finite>
   b7e52:	2800      	cmp	r0, #0
   b7e54:	d0c7      	beq.n	b7de6 <pow+0x96>
   b7e56:	ec53 2b18 	vmov	r2, r3, d8
   b7e5a:	ee18 0a10 	vmov	r0, s16
   b7e5e:	4619      	mov	r1, r3
   b7e60:	f7fc fd34 	bl	b48cc <__aeabi_dcmpun>
   b7e64:	bb20      	cbnz	r0, b7eb0 <pow+0x160>
   b7e66:	f7fe fdc5 	bl	b69f4 <__errno>
   b7e6a:	4603      	mov	r3, r0
   b7e6c:	2222      	movs	r2, #34	; 0x22
   b7e6e:	601a      	str	r2, [r3, #0]
   b7e70:	4630      	mov	r0, r6
   b7e72:	4639      	mov	r1, r7
   b7e74:	2200      	movs	r2, #0
   b7e76:	2300      	movs	r3, #0
   b7e78:	f7fc fd00 	bl	b487c <__aeabi_dcmplt>
   b7e7c:	b948      	cbnz	r0, b7e92 <pow+0x142>
   b7e7e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b7ee0 <pow+0x190>
   b7e82:	e7a2      	b.n	b7dca <pow+0x7a>
   b7e84:	f7fe fdb6 	bl	b69f4 <__errno>
   b7e88:	2321      	movs	r3, #33	; 0x21
   b7e8a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b7ee8 <pow+0x198>
   b7e8e:	6003      	str	r3, [r0, #0]
   b7e90:	e79b      	b.n	b7dca <pow+0x7a>
   b7e92:	ec45 4b10 	vmov	d0, r4, r5
   b7e96:	f000 feb3 	bl	b8c00 <rint>
   b7e9a:	4622      	mov	r2, r4
   b7e9c:	ec51 0b10 	vmov	r0, r1, d0
   b7ea0:	462b      	mov	r3, r5
   b7ea2:	f7fc fce1 	bl	b4868 <__aeabi_dcmpeq>
   b7ea6:	2800      	cmp	r0, #0
   b7ea8:	d1e9      	bne.n	b7e7e <pow+0x12e>
   b7eaa:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b7ee8 <pow+0x198>
   b7eae:	e78c      	b.n	b7dca <pow+0x7a>
   b7eb0:	f7fe fda0 	bl	b69f4 <__errno>
   b7eb4:	2200      	movs	r2, #0
   b7eb6:	2300      	movs	r3, #0
   b7eb8:	2121      	movs	r1, #33	; 0x21
   b7eba:	6001      	str	r1, [r0, #0]
   b7ebc:	4610      	mov	r0, r2
   b7ebe:	4619      	mov	r1, r3
   b7ec0:	f7fc fb94 	bl	b45ec <__aeabi_ddiv>
   b7ec4:	ec41 0b18 	vmov	d8, r0, r1
   b7ec8:	e77f      	b.n	b7dca <pow+0x7a>
   b7eca:	bf00      	nop
   b7ecc:	f3af 8000 	nop.w
	...
   b7edc:	3ff00000 	.word	0x3ff00000
   b7ee0:	00000000 	.word	0x00000000
   b7ee4:	7ff00000 	.word	0x7ff00000
   b7ee8:	00000000 	.word	0x00000000
   b7eec:	fff00000 	.word	0xfff00000
   b7ef0:	2003e5cc 	.word	0x2003e5cc
   b7ef4:	00000000 	.word	0x00000000

000b7ef8 <__ieee754_pow>:
   b7ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7efc:	ec57 6b11 	vmov	r6, r7, d1
   b7f00:	ed2d 8b0c 	vpush	{d8-d13}
   b7f04:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b7f08:	ea5a 0206 	orrs.w	r2, sl, r6
   b7f0c:	b087      	sub	sp, #28
   b7f0e:	d03d      	beq.n	b7f8c <__ieee754_pow+0x94>
   b7f10:	ec55 4b10 	vmov	r4, r5, d0
   b7f14:	4972      	ldr	r1, [pc, #456]	; (b80e0 <__ieee754_pow+0x1e8>)
   b7f16:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b7f1a:	4588      	cmp	r8, r1
   b7f1c:	ee10 2a10 	vmov	r2, s0
   b7f20:	46a9      	mov	r9, r5
   b7f22:	dc2c      	bgt.n	b7f7e <__ieee754_pow+0x86>
   b7f24:	ee11 3a10 	vmov	r3, s2
   b7f28:	46bb      	mov	fp, r7
   b7f2a:	d036      	beq.n	b7f9a <__ieee754_pow+0xa2>
   b7f2c:	458a      	cmp	sl, r1
   b7f2e:	dc26      	bgt.n	b7f7e <__ieee754_pow+0x86>
   b7f30:	496b      	ldr	r1, [pc, #428]	; (b80e0 <__ieee754_pow+0x1e8>)
   b7f32:	458a      	cmp	sl, r1
   b7f34:	d021      	beq.n	b7f7a <__ieee754_pow+0x82>
   b7f36:	f1b9 0f00 	cmp.w	r9, #0
   b7f3a:	db39      	blt.n	b7fb0 <__ieee754_pow+0xb8>
   b7f3c:	2100      	movs	r1, #0
   b7f3e:	9100      	str	r1, [sp, #0]
   b7f40:	2b00      	cmp	r3, #0
   b7f42:	d151      	bne.n	b7fe8 <__ieee754_pow+0xf0>
   b7f44:	4b66      	ldr	r3, [pc, #408]	; (b80e0 <__ieee754_pow+0x1e8>)
   b7f46:	459a      	cmp	sl, r3
   b7f48:	f000 80a2 	beq.w	b8090 <__ieee754_pow+0x198>
   b7f4c:	4b65      	ldr	r3, [pc, #404]	; (b80e4 <__ieee754_pow+0x1ec>)
   b7f4e:	459a      	cmp	sl, r3
   b7f50:	f000 80b0 	beq.w	b80b4 <__ieee754_pow+0x1bc>
   b7f54:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b7f58:	f000 84c0 	beq.w	b88dc <__ieee754_pow+0x9e4>
   b7f5c:	4b62      	ldr	r3, [pc, #392]	; (b80e8 <__ieee754_pow+0x1f0>)
   b7f5e:	459b      	cmp	fp, r3
   b7f60:	d142      	bne.n	b7fe8 <__ieee754_pow+0xf0>
   b7f62:	f1b9 0f00 	cmp.w	r9, #0
   b7f66:	db3f      	blt.n	b7fe8 <__ieee754_pow+0xf0>
   b7f68:	ec45 4b10 	vmov	d0, r4, r5
   b7f6c:	b007      	add	sp, #28
   b7f6e:	ecbd 8b0c 	vpop	{d8-d13}
   b7f72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f76:	f000 bd59 	b.w	b8a2c <__ieee754_sqrt>
   b7f7a:	2b00      	cmp	r3, #0
   b7f7c:	d0db      	beq.n	b7f36 <__ieee754_pow+0x3e>
   b7f7e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7f82:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7f86:	ea58 0302 	orrs.w	r3, r8, r2
   b7f8a:	d109      	bne.n	b7fa0 <__ieee754_pow+0xa8>
   b7f8c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b80d0 <__ieee754_pow+0x1d8>
   b7f90:	b007      	add	sp, #28
   b7f92:	ecbd 8b0c 	vpop	{d8-d13}
   b7f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7f9a:	b90c      	cbnz	r4, b7fa0 <__ieee754_pow+0xa8>
   b7f9c:	45c2      	cmp	sl, r8
   b7f9e:	ddc7      	ble.n	b7f30 <__ieee754_pow+0x38>
   b7fa0:	4852      	ldr	r0, [pc, #328]	; (b80ec <__ieee754_pow+0x1f4>)
   b7fa2:	b007      	add	sp, #28
   b7fa4:	ecbd 8b0c 	vpop	{d8-d13}
   b7fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fac:	f000 be20 	b.w	b8bf0 <nan>
   b7fb0:	494f      	ldr	r1, [pc, #316]	; (b80f0 <__ieee754_pow+0x1f8>)
   b7fb2:	458a      	cmp	sl, r1
   b7fb4:	f300 8085 	bgt.w	b80c2 <__ieee754_pow+0x1ca>
   b7fb8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b7fbc:	458a      	cmp	sl, r1
   b7fbe:	dd0f      	ble.n	b7fe0 <__ieee754_pow+0xe8>
   b7fc0:	ea4f 512a 	mov.w	r1, sl, asr #20
   b7fc4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b7fc8:	2914      	cmp	r1, #20
   b7fca:	f340 849b 	ble.w	b8904 <__ieee754_pow+0xa0c>
   b7fce:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b7fd2:	fa23 f001 	lsr.w	r0, r3, r1
   b7fd6:	fa00 f101 	lsl.w	r1, r0, r1
   b7fda:	4299      	cmp	r1, r3
   b7fdc:	f000 84ed 	beq.w	b89ba <__ieee754_pow+0xac2>
   b7fe0:	2100      	movs	r1, #0
   b7fe2:	9100      	str	r1, [sp, #0]
   b7fe4:	2b00      	cmp	r3, #0
   b7fe6:	d0b1      	beq.n	b7f4c <__ieee754_pow+0x54>
   b7fe8:	ec45 4b10 	vmov	d0, r4, r5
   b7fec:	9202      	str	r2, [sp, #8]
   b7fee:	f000 fde9 	bl	b8bc4 <fabs>
   b7ff2:	9a02      	ldr	r2, [sp, #8]
   b7ff4:	bb5a      	cbnz	r2, b804e <__ieee754_pow+0x156>
   b7ff6:	f1b8 0f00 	cmp.w	r8, #0
   b7ffa:	d004      	beq.n	b8006 <__ieee754_pow+0x10e>
   b7ffc:	4b39      	ldr	r3, [pc, #228]	; (b80e4 <__ieee754_pow+0x1ec>)
   b7ffe:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b8002:	429a      	cmp	r2, r3
   b8004:	d123      	bne.n	b804e <__ieee754_pow+0x156>
   b8006:	f1bb 0f00 	cmp.w	fp, #0
   b800a:	da07      	bge.n	b801c <__ieee754_pow+0x124>
   b800c:	ec53 2b10 	vmov	r2, r3, d0
   b8010:	4934      	ldr	r1, [pc, #208]	; (b80e4 <__ieee754_pow+0x1ec>)
   b8012:	2000      	movs	r0, #0
   b8014:	f7fc faea 	bl	b45ec <__aeabi_ddiv>
   b8018:	ec41 0b10 	vmov	d0, r0, r1
   b801c:	f1b9 0f00 	cmp.w	r9, #0
   b8020:	dab6      	bge.n	b7f90 <__ieee754_pow+0x98>
   b8022:	9b00      	ldr	r3, [sp, #0]
   b8024:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b8028:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b802c:	ea58 0303 	orrs.w	r3, r8, r3
   b8030:	f040 848d 	bne.w	b894e <__ieee754_pow+0xa56>
   b8034:	ec53 2b10 	vmov	r2, r3, d0
   b8038:	4610      	mov	r0, r2
   b803a:	4619      	mov	r1, r3
   b803c:	f7fb fff4 	bl	b4028 <__aeabi_dsub>
   b8040:	4602      	mov	r2, r0
   b8042:	460b      	mov	r3, r1
   b8044:	f7fc fad2 	bl	b45ec <__aeabi_ddiv>
   b8048:	ec41 0b10 	vmov	d0, r0, r1
   b804c:	e7a0      	b.n	b7f90 <__ieee754_pow+0x98>
   b804e:	9a00      	ldr	r2, [sp, #0]
   b8050:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b8054:	3b01      	subs	r3, #1
   b8056:	9304      	str	r3, [sp, #16]
   b8058:	4313      	orrs	r3, r2
   b805a:	d035      	beq.n	b80c8 <__ieee754_pow+0x1d0>
   b805c:	4b25      	ldr	r3, [pc, #148]	; (b80f4 <__ieee754_pow+0x1fc>)
   b805e:	459a      	cmp	sl, r3
   b8060:	dd4c      	ble.n	b80fc <__ieee754_pow+0x204>
   b8062:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b8066:	459a      	cmp	sl, r3
   b8068:	4b23      	ldr	r3, [pc, #140]	; (b80f8 <__ieee754_pow+0x200>)
   b806a:	f340 83db 	ble.w	b8824 <__ieee754_pow+0x92c>
   b806e:	4598      	cmp	r8, r3
   b8070:	f340 8360 	ble.w	b8734 <__ieee754_pow+0x83c>
   b8074:	f1bb 0f00 	cmp.w	fp, #0
   b8078:	f340 8360 	ble.w	b873c <__ieee754_pow+0x844>
   b807c:	a316      	add	r3, pc, #88	; (adr r3, b80d8 <__ieee754_pow+0x1e0>)
   b807e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8082:	4610      	mov	r0, r2
   b8084:	4619      	mov	r1, r3
   b8086:	f7fc f987 	bl	b4398 <__aeabi_dmul>
   b808a:	ec41 0b10 	vmov	d0, r0, r1
   b808e:	e77f      	b.n	b7f90 <__ieee754_pow+0x98>
   b8090:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b8094:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b8098:	4313      	orrs	r3, r2
   b809a:	f43f af77 	beq.w	b7f8c <__ieee754_pow+0x94>
   b809e:	4b16      	ldr	r3, [pc, #88]	; (b80f8 <__ieee754_pow+0x200>)
   b80a0:	4598      	cmp	r8, r3
   b80a2:	f340 837a 	ble.w	b879a <__ieee754_pow+0x8a2>
   b80a6:	f1bb 0f00 	cmp.w	fp, #0
   b80aa:	f2c0 8347 	blt.w	b873c <__ieee754_pow+0x844>
   b80ae:	ec47 6b10 	vmov	d0, r6, r7
   b80b2:	e76d      	b.n	b7f90 <__ieee754_pow+0x98>
   b80b4:	f1bb 0f00 	cmp.w	fp, #0
   b80b8:	f2c0 841a 	blt.w	b88f0 <__ieee754_pow+0x9f8>
   b80bc:	ec45 4b10 	vmov	d0, r4, r5
   b80c0:	e766      	b.n	b7f90 <__ieee754_pow+0x98>
   b80c2:	2102      	movs	r1, #2
   b80c4:	9100      	str	r1, [sp, #0]
   b80c6:	e73b      	b.n	b7f40 <__ieee754_pow+0x48>
   b80c8:	4622      	mov	r2, r4
   b80ca:	462b      	mov	r3, r5
   b80cc:	e7b4      	b.n	b8038 <__ieee754_pow+0x140>
   b80ce:	bf00      	nop
   b80d0:	00000000 	.word	0x00000000
   b80d4:	3ff00000 	.word	0x3ff00000
   b80d8:	8800759c 	.word	0x8800759c
   b80dc:	7e37e43c 	.word	0x7e37e43c
   b80e0:	7ff00000 	.word	0x7ff00000
   b80e4:	3ff00000 	.word	0x3ff00000
   b80e8:	3fe00000 	.word	0x3fe00000
   b80ec:	000b96d8 	.word	0x000b96d8
   b80f0:	433fffff 	.word	0x433fffff
   b80f4:	41e00000 	.word	0x41e00000
   b80f8:	3fefffff 	.word	0x3fefffff
   b80fc:	4be4      	ldr	r3, [pc, #912]	; (b8490 <__ieee754_pow+0x598>)
   b80fe:	ea09 0303 	and.w	r3, r9, r3
   b8102:	2200      	movs	r2, #0
   b8104:	b953      	cbnz	r3, b811c <__ieee754_pow+0x224>
   b8106:	ec51 0b10 	vmov	r0, r1, d0
   b810a:	4be2      	ldr	r3, [pc, #904]	; (b8494 <__ieee754_pow+0x59c>)
   b810c:	f7fc f944 	bl	b4398 <__aeabi_dmul>
   b8110:	ec41 0b10 	vmov	d0, r0, r1
   b8114:	ee10 8a90 	vmov	r8, s1
   b8118:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b811c:	ea4f 5328 	mov.w	r3, r8, asr #20
   b8120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b8124:	189a      	adds	r2, r3, r2
   b8126:	4bdc      	ldr	r3, [pc, #880]	; (b8498 <__ieee754_pow+0x5a0>)
   b8128:	9205      	str	r2, [sp, #20]
   b812a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b812e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b8132:	4598      	cmp	r8, r3
   b8134:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b8138:	dd07      	ble.n	b814a <__ieee754_pow+0x252>
   b813a:	4bd8      	ldr	r3, [pc, #864]	; (b849c <__ieee754_pow+0x5a4>)
   b813c:	4598      	cmp	r8, r3
   b813e:	f340 8414 	ble.w	b896a <__ieee754_pow+0xa72>
   b8142:	3201      	adds	r2, #1
   b8144:	9205      	str	r2, [sp, #20]
   b8146:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b814a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b8430 <__ieee754_pow+0x538>
   b814e:	ed9f 7bba 	vldr	d7, [pc, #744]	; b8438 <__ieee754_pow+0x540>
   b8152:	ec53 2b16 	vmov	r2, r3, d6
   b8156:	eeb0 ca47 	vmov.f32	s24, s14
   b815a:	eef0 ca67 	vmov.f32	s25, s15
   b815e:	2500      	movs	r5, #0
   b8160:	eeb0 da47 	vmov.f32	s26, s14
   b8164:	eef0 da67 	vmov.f32	s27, s15
   b8168:	ec5b ab10 	vmov	sl, fp, d0
   b816c:	46a3      	mov	fp, r4
   b816e:	4650      	mov	r0, sl
   b8170:	4659      	mov	r1, fp
   b8172:	ec43 2b1a 	vmov	d10, r2, r3
   b8176:	f7fb ff57 	bl	b4028 <__aeabi_dsub>
   b817a:	ec53 2b1a 	vmov	r2, r3, d10
   b817e:	4680      	mov	r8, r0
   b8180:	4689      	mov	r9, r1
   b8182:	4650      	mov	r0, sl
   b8184:	4659      	mov	r1, fp
   b8186:	f7fb ff51 	bl	b402c <__adddf3>
   b818a:	4602      	mov	r2, r0
   b818c:	460b      	mov	r3, r1
   b818e:	2000      	movs	r0, #0
   b8190:	49c3      	ldr	r1, [pc, #780]	; (b84a0 <__ieee754_pow+0x5a8>)
   b8192:	f7fc fa2b 	bl	b45ec <__aeabi_ddiv>
   b8196:	ec41 0b1b 	vmov	d11, r0, r1
   b819a:	4640      	mov	r0, r8
   b819c:	ec53 2b1b 	vmov	r2, r3, d11
   b81a0:	4649      	mov	r1, r9
   b81a2:	f7fc f8f9 	bl	b4398 <__aeabi_dmul>
   b81a6:	ec41 0b18 	vmov	d8, r0, r1
   b81aa:	460a      	mov	r2, r1
   b81ac:	4601      	mov	r1, r0
   b81ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b81b2:	2100      	movs	r1, #0
   b81b4:	9102      	str	r1, [sp, #8]
   b81b6:	1064      	asrs	r4, r4, #1
   b81b8:	ec4b ab19 	vmov	d9, sl, fp
   b81bc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b81c0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b81c4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b81c8:	2000      	movs	r0, #0
   b81ca:	1959      	adds	r1, r3, r5
   b81cc:	4604      	mov	r4, r0
   b81ce:	460d      	mov	r5, r1
   b81d0:	4602      	mov	r2, r0
   b81d2:	460b      	mov	r3, r1
   b81d4:	4650      	mov	r0, sl
   b81d6:	4659      	mov	r1, fp
   b81d8:	f7fc f8de 	bl	b4398 <__aeabi_dmul>
   b81dc:	4602      	mov	r2, r0
   b81de:	460b      	mov	r3, r1
   b81e0:	4640      	mov	r0, r8
   b81e2:	4649      	mov	r1, r9
   b81e4:	f7fb ff20 	bl	b4028 <__aeabi_dsub>
   b81e8:	ec53 2b1a 	vmov	r2, r3, d10
   b81ec:	4680      	mov	r8, r0
   b81ee:	4689      	mov	r9, r1
   b81f0:	4620      	mov	r0, r4
   b81f2:	4629      	mov	r1, r5
   b81f4:	f7fb ff18 	bl	b4028 <__aeabi_dsub>
   b81f8:	4602      	mov	r2, r0
   b81fa:	460b      	mov	r3, r1
   b81fc:	ec51 0b19 	vmov	r0, r1, d9
   b8200:	f7fb ff12 	bl	b4028 <__aeabi_dsub>
   b8204:	4652      	mov	r2, sl
   b8206:	465b      	mov	r3, fp
   b8208:	f7fc f8c6 	bl	b4398 <__aeabi_dmul>
   b820c:	4602      	mov	r2, r0
   b820e:	460b      	mov	r3, r1
   b8210:	4640      	mov	r0, r8
   b8212:	4649      	mov	r1, r9
   b8214:	f7fb ff08 	bl	b4028 <__aeabi_dsub>
   b8218:	ec53 2b1b 	vmov	r2, r3, d11
   b821c:	f7fc f8bc 	bl	b4398 <__aeabi_dmul>
   b8220:	ec53 2b18 	vmov	r2, r3, d8
   b8224:	ec41 0b19 	vmov	d9, r0, r1
   b8228:	ec51 0b18 	vmov	r0, r1, d8
   b822c:	f7fc f8b4 	bl	b4398 <__aeabi_dmul>
   b8230:	a383      	add	r3, pc, #524	; (adr r3, b8440 <__ieee754_pow+0x548>)
   b8232:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8236:	4604      	mov	r4, r0
   b8238:	460d      	mov	r5, r1
   b823a:	f7fc f8ad 	bl	b4398 <__aeabi_dmul>
   b823e:	a382      	add	r3, pc, #520	; (adr r3, b8448 <__ieee754_pow+0x550>)
   b8240:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8244:	f7fb fef2 	bl	b402c <__adddf3>
   b8248:	4622      	mov	r2, r4
   b824a:	462b      	mov	r3, r5
   b824c:	f7fc f8a4 	bl	b4398 <__aeabi_dmul>
   b8250:	a37f      	add	r3, pc, #508	; (adr r3, b8450 <__ieee754_pow+0x558>)
   b8252:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8256:	f7fb fee9 	bl	b402c <__adddf3>
   b825a:	4622      	mov	r2, r4
   b825c:	462b      	mov	r3, r5
   b825e:	f7fc f89b 	bl	b4398 <__aeabi_dmul>
   b8262:	a37d      	add	r3, pc, #500	; (adr r3, b8458 <__ieee754_pow+0x560>)
   b8264:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8268:	f7fb fee0 	bl	b402c <__adddf3>
   b826c:	4622      	mov	r2, r4
   b826e:	462b      	mov	r3, r5
   b8270:	f7fc f892 	bl	b4398 <__aeabi_dmul>
   b8274:	a37a      	add	r3, pc, #488	; (adr r3, b8460 <__ieee754_pow+0x568>)
   b8276:	e9d3 2300 	ldrd	r2, r3, [r3]
   b827a:	f7fb fed7 	bl	b402c <__adddf3>
   b827e:	4622      	mov	r2, r4
   b8280:	462b      	mov	r3, r5
   b8282:	f7fc f889 	bl	b4398 <__aeabi_dmul>
   b8286:	a378      	add	r3, pc, #480	; (adr r3, b8468 <__ieee754_pow+0x570>)
   b8288:	e9d3 2300 	ldrd	r2, r3, [r3]
   b828c:	f7fb fece 	bl	b402c <__adddf3>
   b8290:	4622      	mov	r2, r4
   b8292:	4680      	mov	r8, r0
   b8294:	4689      	mov	r9, r1
   b8296:	462b      	mov	r3, r5
   b8298:	4620      	mov	r0, r4
   b829a:	4629      	mov	r1, r5
   b829c:	f7fc f87c 	bl	b4398 <__aeabi_dmul>
   b82a0:	4602      	mov	r2, r0
   b82a2:	460b      	mov	r3, r1
   b82a4:	4640      	mov	r0, r8
   b82a6:	4649      	mov	r1, r9
   b82a8:	f7fc f876 	bl	b4398 <__aeabi_dmul>
   b82ac:	4652      	mov	r2, sl
   b82ae:	4604      	mov	r4, r0
   b82b0:	460d      	mov	r5, r1
   b82b2:	465b      	mov	r3, fp
   b82b4:	ec51 0b18 	vmov	r0, r1, d8
   b82b8:	f7fb feb8 	bl	b402c <__adddf3>
   b82bc:	ec53 2b19 	vmov	r2, r3, d9
   b82c0:	f7fc f86a 	bl	b4398 <__aeabi_dmul>
   b82c4:	4622      	mov	r2, r4
   b82c6:	462b      	mov	r3, r5
   b82c8:	f7fb feb0 	bl	b402c <__adddf3>
   b82cc:	4652      	mov	r2, sl
   b82ce:	4680      	mov	r8, r0
   b82d0:	4689      	mov	r9, r1
   b82d2:	465b      	mov	r3, fp
   b82d4:	4650      	mov	r0, sl
   b82d6:	4659      	mov	r1, fp
   b82d8:	f7fc f85e 	bl	b4398 <__aeabi_dmul>
   b82dc:	4602      	mov	r2, r0
   b82de:	460b      	mov	r3, r1
   b82e0:	ec43 2b1a 	vmov	d10, r2, r3
   b82e4:	4b6f      	ldr	r3, [pc, #444]	; (b84a4 <__ieee754_pow+0x5ac>)
   b82e6:	2200      	movs	r2, #0
   b82e8:	f7fb fea0 	bl	b402c <__adddf3>
   b82ec:	4642      	mov	r2, r8
   b82ee:	464b      	mov	r3, r9
   b82f0:	f7fb fe9c 	bl	b402c <__adddf3>
   b82f4:	2400      	movs	r4, #0
   b82f6:	460d      	mov	r5, r1
   b82f8:	4622      	mov	r2, r4
   b82fa:	462b      	mov	r3, r5
   b82fc:	4650      	mov	r0, sl
   b82fe:	4659      	mov	r1, fp
   b8300:	f7fc f84a 	bl	b4398 <__aeabi_dmul>
   b8304:	4b67      	ldr	r3, [pc, #412]	; (b84a4 <__ieee754_pow+0x5ac>)
   b8306:	4682      	mov	sl, r0
   b8308:	468b      	mov	fp, r1
   b830a:	2200      	movs	r2, #0
   b830c:	4620      	mov	r0, r4
   b830e:	4629      	mov	r1, r5
   b8310:	f7fb fe8a 	bl	b4028 <__aeabi_dsub>
   b8314:	ec53 2b1a 	vmov	r2, r3, d10
   b8318:	f7fb fe86 	bl	b4028 <__aeabi_dsub>
   b831c:	4602      	mov	r2, r0
   b831e:	460b      	mov	r3, r1
   b8320:	4640      	mov	r0, r8
   b8322:	4649      	mov	r1, r9
   b8324:	f7fb fe80 	bl	b4028 <__aeabi_dsub>
   b8328:	ec53 2b18 	vmov	r2, r3, d8
   b832c:	f7fc f834 	bl	b4398 <__aeabi_dmul>
   b8330:	4622      	mov	r2, r4
   b8332:	462b      	mov	r3, r5
   b8334:	4604      	mov	r4, r0
   b8336:	460d      	mov	r5, r1
   b8338:	ec51 0b19 	vmov	r0, r1, d9
   b833c:	f7fc f82c 	bl	b4398 <__aeabi_dmul>
   b8340:	4602      	mov	r2, r0
   b8342:	460b      	mov	r3, r1
   b8344:	4620      	mov	r0, r4
   b8346:	4629      	mov	r1, r5
   b8348:	f7fb fe70 	bl	b402c <__adddf3>
   b834c:	4680      	mov	r8, r0
   b834e:	4689      	mov	r9, r1
   b8350:	4642      	mov	r2, r8
   b8352:	464b      	mov	r3, r9
   b8354:	4650      	mov	r0, sl
   b8356:	4659      	mov	r1, fp
   b8358:	f7fb fe68 	bl	b402c <__adddf3>
   b835c:	a344      	add	r3, pc, #272	; (adr r3, b8470 <__ieee754_pow+0x578>)
   b835e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8362:	2000      	movs	r0, #0
   b8364:	4604      	mov	r4, r0
   b8366:	460d      	mov	r5, r1
   b8368:	f7fc f816 	bl	b4398 <__aeabi_dmul>
   b836c:	4652      	mov	r2, sl
   b836e:	ec41 0b19 	vmov	d9, r0, r1
   b8372:	465b      	mov	r3, fp
   b8374:	4620      	mov	r0, r4
   b8376:	4629      	mov	r1, r5
   b8378:	f7fb fe56 	bl	b4028 <__aeabi_dsub>
   b837c:	4602      	mov	r2, r0
   b837e:	460b      	mov	r3, r1
   b8380:	4640      	mov	r0, r8
   b8382:	4649      	mov	r1, r9
   b8384:	f7fb fe50 	bl	b4028 <__aeabi_dsub>
   b8388:	a33b      	add	r3, pc, #236	; (adr r3, b8478 <__ieee754_pow+0x580>)
   b838a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b838e:	f7fc f803 	bl	b4398 <__aeabi_dmul>
   b8392:	4602      	mov	r2, r0
   b8394:	460b      	mov	r3, r1
   b8396:	4620      	mov	r0, r4
   b8398:	4629      	mov	r1, r5
   b839a:	4614      	mov	r4, r2
   b839c:	461d      	mov	r5, r3
   b839e:	a338      	add	r3, pc, #224	; (adr r3, b8480 <__ieee754_pow+0x588>)
   b83a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b83a4:	f7fb fff8 	bl	b4398 <__aeabi_dmul>
   b83a8:	4602      	mov	r2, r0
   b83aa:	460b      	mov	r3, r1
   b83ac:	4620      	mov	r0, r4
   b83ae:	4629      	mov	r1, r5
   b83b0:	f7fb fe3c 	bl	b402c <__adddf3>
   b83b4:	ec53 2b1d 	vmov	r2, r3, d13
   b83b8:	f7fb fe38 	bl	b402c <__adddf3>
   b83bc:	4680      	mov	r8, r0
   b83be:	9805      	ldr	r0, [sp, #20]
   b83c0:	4689      	mov	r9, r1
   b83c2:	f7fb ff7f 	bl	b42c4 <__aeabi_i2d>
   b83c6:	4642      	mov	r2, r8
   b83c8:	4682      	mov	sl, r0
   b83ca:	468b      	mov	fp, r1
   b83cc:	464b      	mov	r3, r9
   b83ce:	ec51 0b19 	vmov	r0, r1, d9
   b83d2:	f7fb fe2b 	bl	b402c <__adddf3>
   b83d6:	ec53 2b1c 	vmov	r2, r3, d12
   b83da:	f7fb fe27 	bl	b402c <__adddf3>
   b83de:	4652      	mov	r2, sl
   b83e0:	465b      	mov	r3, fp
   b83e2:	f7fb fe23 	bl	b402c <__adddf3>
   b83e6:	4652      	mov	r2, sl
   b83e8:	465b      	mov	r3, fp
   b83ea:	2000      	movs	r0, #0
   b83ec:	4604      	mov	r4, r0
   b83ee:	460d      	mov	r5, r1
   b83f0:	f7fb fe1a 	bl	b4028 <__aeabi_dsub>
   b83f4:	ec53 2b1c 	vmov	r2, r3, d12
   b83f8:	f7fb fe16 	bl	b4028 <__aeabi_dsub>
   b83fc:	ec53 2b19 	vmov	r2, r3, d9
   b8400:	f7fb fe12 	bl	b4028 <__aeabi_dsub>
   b8404:	4602      	mov	r2, r0
   b8406:	460b      	mov	r3, r1
   b8408:	4640      	mov	r0, r8
   b840a:	4649      	mov	r1, r9
   b840c:	f7fb fe0c 	bl	b4028 <__aeabi_dsub>
   b8410:	9b00      	ldr	r3, [sp, #0]
   b8412:	9a04      	ldr	r2, [sp, #16]
   b8414:	3b01      	subs	r3, #1
   b8416:	4313      	orrs	r3, r2
   b8418:	4682      	mov	sl, r0
   b841a:	468b      	mov	fp, r1
   b841c:	f040 81b6 	bne.w	b878c <__ieee754_pow+0x894>
   b8420:	ed9f 7b19 	vldr	d7, [pc, #100]	; b8488 <__ieee754_pow+0x590>
   b8424:	eeb0 8a47 	vmov.f32	s16, s14
   b8428:	eef0 8a67 	vmov.f32	s17, s15
   b842c:	e03c      	b.n	b84a8 <__ieee754_pow+0x5b0>
   b842e:	bf00      	nop
   b8430:	00000000 	.word	0x00000000
   b8434:	3ff00000 	.word	0x3ff00000
	...
   b8440:	4a454eef 	.word	0x4a454eef
   b8444:	3fca7e28 	.word	0x3fca7e28
   b8448:	93c9db65 	.word	0x93c9db65
   b844c:	3fcd864a 	.word	0x3fcd864a
   b8450:	a91d4101 	.word	0xa91d4101
   b8454:	3fd17460 	.word	0x3fd17460
   b8458:	518f264d 	.word	0x518f264d
   b845c:	3fd55555 	.word	0x3fd55555
   b8460:	db6fabff 	.word	0xdb6fabff
   b8464:	3fdb6db6 	.word	0x3fdb6db6
   b8468:	33333303 	.word	0x33333303
   b846c:	3fe33333 	.word	0x3fe33333
   b8470:	e0000000 	.word	0xe0000000
   b8474:	3feec709 	.word	0x3feec709
   b8478:	dc3a03fd 	.word	0xdc3a03fd
   b847c:	3feec709 	.word	0x3feec709
   b8480:	145b01f5 	.word	0x145b01f5
   b8484:	be3e2fe0 	.word	0xbe3e2fe0
   b8488:	00000000 	.word	0x00000000
   b848c:	bff00000 	.word	0xbff00000
   b8490:	7ff00000 	.word	0x7ff00000
   b8494:	43400000 	.word	0x43400000
   b8498:	0003988e 	.word	0x0003988e
   b849c:	000bb679 	.word	0x000bb679
   b84a0:	3ff00000 	.word	0x3ff00000
   b84a4:	40080000 	.word	0x40080000
   b84a8:	2300      	movs	r3, #0
   b84aa:	e9cd 6700 	strd	r6, r7, [sp]
   b84ae:	9300      	str	r3, [sp, #0]
   b84b0:	e9dd 8900 	ldrd	r8, r9, [sp]
   b84b4:	4630      	mov	r0, r6
   b84b6:	4642      	mov	r2, r8
   b84b8:	464b      	mov	r3, r9
   b84ba:	4639      	mov	r1, r7
   b84bc:	f7fb fdb4 	bl	b4028 <__aeabi_dsub>
   b84c0:	4622      	mov	r2, r4
   b84c2:	462b      	mov	r3, r5
   b84c4:	f7fb ff68 	bl	b4398 <__aeabi_dmul>
   b84c8:	4632      	mov	r2, r6
   b84ca:	463b      	mov	r3, r7
   b84cc:	4606      	mov	r6, r0
   b84ce:	460f      	mov	r7, r1
   b84d0:	4650      	mov	r0, sl
   b84d2:	4659      	mov	r1, fp
   b84d4:	f7fb ff60 	bl	b4398 <__aeabi_dmul>
   b84d8:	4602      	mov	r2, r0
   b84da:	460b      	mov	r3, r1
   b84dc:	4630      	mov	r0, r6
   b84de:	4639      	mov	r1, r7
   b84e0:	f7fb fda4 	bl	b402c <__adddf3>
   b84e4:	4642      	mov	r2, r8
   b84e6:	464b      	mov	r3, r9
   b84e8:	4606      	mov	r6, r0
   b84ea:	460f      	mov	r7, r1
   b84ec:	4620      	mov	r0, r4
   b84ee:	4629      	mov	r1, r5
   b84f0:	f7fb ff52 	bl	b4398 <__aeabi_dmul>
   b84f4:	4604      	mov	r4, r0
   b84f6:	460d      	mov	r5, r1
   b84f8:	462b      	mov	r3, r5
   b84fa:	4630      	mov	r0, r6
   b84fc:	4639      	mov	r1, r7
   b84fe:	4622      	mov	r2, r4
   b8500:	f7fb fd94 	bl	b402c <__adddf3>
   b8504:	4bc2      	ldr	r3, [pc, #776]	; (b8810 <__ieee754_pow+0x918>)
   b8506:	4299      	cmp	r1, r3
   b8508:	4680      	mov	r8, r0
   b850a:	4689      	mov	r9, r1
   b850c:	468a      	mov	sl, r1
   b850e:	f340 8118 	ble.w	b8742 <__ieee754_pow+0x84a>
   b8512:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b8516:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b851a:	4303      	orrs	r3, r0
   b851c:	f040 8207 	bne.w	b892e <__ieee754_pow+0xa36>
   b8520:	a3a3      	add	r3, pc, #652	; (adr r3, b87b0 <__ieee754_pow+0x8b8>)
   b8522:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8526:	4630      	mov	r0, r6
   b8528:	4639      	mov	r1, r7
   b852a:	f7fb fd7f 	bl	b402c <__adddf3>
   b852e:	4602      	mov	r2, r0
   b8530:	460b      	mov	r3, r1
   b8532:	4640      	mov	r0, r8
   b8534:	4649      	mov	r1, r9
   b8536:	4690      	mov	r8, r2
   b8538:	4699      	mov	r9, r3
   b853a:	4622      	mov	r2, r4
   b853c:	462b      	mov	r3, r5
   b853e:	f7fb fd73 	bl	b4028 <__aeabi_dsub>
   b8542:	4602      	mov	r2, r0
   b8544:	460b      	mov	r3, r1
   b8546:	4640      	mov	r0, r8
   b8548:	4649      	mov	r1, r9
   b854a:	f7fc f9b5 	bl	b48b8 <__aeabi_dcmpgt>
   b854e:	2800      	cmp	r0, #0
   b8550:	f040 81ed 	bne.w	b892e <__ieee754_pow+0xa36>
   b8554:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b8558:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b855c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b8560:	fa42 f303 	asr.w	r3, r2, r3
   b8564:	4453      	add	r3, sl
   b8566:	49ab      	ldr	r1, [pc, #684]	; (b8814 <__ieee754_pow+0x91c>)
   b8568:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b856c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b8570:	fa41 fc02 	asr.w	ip, r1, r2
   b8574:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b8578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b857c:	f1c2 0214 	rsb	r2, r2, #20
   b8580:	fa41 f202 	asr.w	r2, r1, r2
   b8584:	2000      	movs	r0, #0
   b8586:	ea23 010c 	bic.w	r1, r3, ip
   b858a:	f1ba 0f00 	cmp.w	sl, #0
   b858e:	9200      	str	r2, [sp, #0]
   b8590:	460b      	mov	r3, r1
   b8592:	4602      	mov	r2, r0
   b8594:	da02      	bge.n	b859c <__ieee754_pow+0x6a4>
   b8596:	9900      	ldr	r1, [sp, #0]
   b8598:	4249      	negs	r1, r1
   b859a:	9100      	str	r1, [sp, #0]
   b859c:	4620      	mov	r0, r4
   b859e:	4629      	mov	r1, r5
   b85a0:	f7fb fd42 	bl	b4028 <__aeabi_dsub>
   b85a4:	9b00      	ldr	r3, [sp, #0]
   b85a6:	051b      	lsls	r3, r3, #20
   b85a8:	9302      	str	r3, [sp, #8]
   b85aa:	4602      	mov	r2, r0
   b85ac:	460b      	mov	r3, r1
   b85ae:	4604      	mov	r4, r0
   b85b0:	460d      	mov	r5, r1
   b85b2:	4630      	mov	r0, r6
   b85b4:	4639      	mov	r1, r7
   b85b6:	f7fb fd39 	bl	b402c <__adddf3>
   b85ba:	4689      	mov	r9, r1
   b85bc:	f04f 0800 	mov.w	r8, #0
   b85c0:	a37d      	add	r3, pc, #500	; (adr r3, b87b8 <__ieee754_pow+0x8c0>)
   b85c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b85c6:	4640      	mov	r0, r8
   b85c8:	4649      	mov	r1, r9
   b85ca:	f7fb fee5 	bl	b4398 <__aeabi_dmul>
   b85ce:	4622      	mov	r2, r4
   b85d0:	462b      	mov	r3, r5
   b85d2:	4682      	mov	sl, r0
   b85d4:	468b      	mov	fp, r1
   b85d6:	4640      	mov	r0, r8
   b85d8:	4649      	mov	r1, r9
   b85da:	f7fb fd25 	bl	b4028 <__aeabi_dsub>
   b85de:	4602      	mov	r2, r0
   b85e0:	460b      	mov	r3, r1
   b85e2:	4630      	mov	r0, r6
   b85e4:	4639      	mov	r1, r7
   b85e6:	f7fb fd1f 	bl	b4028 <__aeabi_dsub>
   b85ea:	a375      	add	r3, pc, #468	; (adr r3, b87c0 <__ieee754_pow+0x8c8>)
   b85ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b85f0:	f7fb fed2 	bl	b4398 <__aeabi_dmul>
   b85f4:	a374      	add	r3, pc, #464	; (adr r3, b87c8 <__ieee754_pow+0x8d0>)
   b85f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b85fa:	4604      	mov	r4, r0
   b85fc:	460d      	mov	r5, r1
   b85fe:	4640      	mov	r0, r8
   b8600:	4649      	mov	r1, r9
   b8602:	f7fb fec9 	bl	b4398 <__aeabi_dmul>
   b8606:	4602      	mov	r2, r0
   b8608:	460b      	mov	r3, r1
   b860a:	4620      	mov	r0, r4
   b860c:	4629      	mov	r1, r5
   b860e:	f7fb fd0d 	bl	b402c <__adddf3>
   b8612:	4606      	mov	r6, r0
   b8614:	460f      	mov	r7, r1
   b8616:	4632      	mov	r2, r6
   b8618:	463b      	mov	r3, r7
   b861a:	4650      	mov	r0, sl
   b861c:	4659      	mov	r1, fp
   b861e:	f7fb fd05 	bl	b402c <__adddf3>
   b8622:	4652      	mov	r2, sl
   b8624:	465b      	mov	r3, fp
   b8626:	4604      	mov	r4, r0
   b8628:	460d      	mov	r5, r1
   b862a:	f7fb fcfd 	bl	b4028 <__aeabi_dsub>
   b862e:	4602      	mov	r2, r0
   b8630:	460b      	mov	r3, r1
   b8632:	4630      	mov	r0, r6
   b8634:	4639      	mov	r1, r7
   b8636:	f7fb fcf7 	bl	b4028 <__aeabi_dsub>
   b863a:	4622      	mov	r2, r4
   b863c:	4680      	mov	r8, r0
   b863e:	4689      	mov	r9, r1
   b8640:	462b      	mov	r3, r5
   b8642:	4620      	mov	r0, r4
   b8644:	4629      	mov	r1, r5
   b8646:	f7fb fea7 	bl	b4398 <__aeabi_dmul>
   b864a:	a361      	add	r3, pc, #388	; (adr r3, b87d0 <__ieee754_pow+0x8d8>)
   b864c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8650:	4606      	mov	r6, r0
   b8652:	460f      	mov	r7, r1
   b8654:	f7fb fea0 	bl	b4398 <__aeabi_dmul>
   b8658:	a35f      	add	r3, pc, #380	; (adr r3, b87d8 <__ieee754_pow+0x8e0>)
   b865a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b865e:	f7fb fce3 	bl	b4028 <__aeabi_dsub>
   b8662:	4632      	mov	r2, r6
   b8664:	463b      	mov	r3, r7
   b8666:	f7fb fe97 	bl	b4398 <__aeabi_dmul>
   b866a:	a35d      	add	r3, pc, #372	; (adr r3, b87e0 <__ieee754_pow+0x8e8>)
   b866c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8670:	f7fb fcdc 	bl	b402c <__adddf3>
   b8674:	4632      	mov	r2, r6
   b8676:	463b      	mov	r3, r7
   b8678:	f7fb fe8e 	bl	b4398 <__aeabi_dmul>
   b867c:	a35a      	add	r3, pc, #360	; (adr r3, b87e8 <__ieee754_pow+0x8f0>)
   b867e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8682:	f7fb fcd1 	bl	b4028 <__aeabi_dsub>
   b8686:	4632      	mov	r2, r6
   b8688:	463b      	mov	r3, r7
   b868a:	f7fb fe85 	bl	b4398 <__aeabi_dmul>
   b868e:	a358      	add	r3, pc, #352	; (adr r3, b87f0 <__ieee754_pow+0x8f8>)
   b8690:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8694:	f7fb fcca 	bl	b402c <__adddf3>
   b8698:	4632      	mov	r2, r6
   b869a:	463b      	mov	r3, r7
   b869c:	f7fb fe7c 	bl	b4398 <__aeabi_dmul>
   b86a0:	4602      	mov	r2, r0
   b86a2:	460b      	mov	r3, r1
   b86a4:	4620      	mov	r0, r4
   b86a6:	4629      	mov	r1, r5
   b86a8:	f7fb fcbe 	bl	b4028 <__aeabi_dsub>
   b86ac:	4606      	mov	r6, r0
   b86ae:	460f      	mov	r7, r1
   b86b0:	4632      	mov	r2, r6
   b86b2:	463b      	mov	r3, r7
   b86b4:	4620      	mov	r0, r4
   b86b6:	4629      	mov	r1, r5
   b86b8:	f7fb fe6e 	bl	b4398 <__aeabi_dmul>
   b86bc:	4602      	mov	r2, r0
   b86be:	460b      	mov	r3, r1
   b86c0:	4630      	mov	r0, r6
   b86c2:	4639      	mov	r1, r7
   b86c4:	4616      	mov	r6, r2
   b86c6:	461f      	mov	r7, r3
   b86c8:	2200      	movs	r2, #0
   b86ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b86ce:	f7fb fcab 	bl	b4028 <__aeabi_dsub>
   b86d2:	4602      	mov	r2, r0
   b86d4:	460b      	mov	r3, r1
   b86d6:	4630      	mov	r0, r6
   b86d8:	4639      	mov	r1, r7
   b86da:	f7fb ff87 	bl	b45ec <__aeabi_ddiv>
   b86de:	4642      	mov	r2, r8
   b86e0:	4606      	mov	r6, r0
   b86e2:	460f      	mov	r7, r1
   b86e4:	464b      	mov	r3, r9
   b86e6:	4620      	mov	r0, r4
   b86e8:	4629      	mov	r1, r5
   b86ea:	f7fb fe55 	bl	b4398 <__aeabi_dmul>
   b86ee:	4642      	mov	r2, r8
   b86f0:	464b      	mov	r3, r9
   b86f2:	f7fb fc9b 	bl	b402c <__adddf3>
   b86f6:	4602      	mov	r2, r0
   b86f8:	460b      	mov	r3, r1
   b86fa:	4630      	mov	r0, r6
   b86fc:	4639      	mov	r1, r7
   b86fe:	f7fb fc93 	bl	b4028 <__aeabi_dsub>
   b8702:	4622      	mov	r2, r4
   b8704:	462b      	mov	r3, r5
   b8706:	f7fb fc8f 	bl	b4028 <__aeabi_dsub>
   b870a:	4602      	mov	r2, r0
   b870c:	460b      	mov	r3, r1
   b870e:	2000      	movs	r0, #0
   b8710:	4941      	ldr	r1, [pc, #260]	; (b8818 <__ieee754_pow+0x920>)
   b8712:	f7fb fc89 	bl	b4028 <__aeabi_dsub>
   b8716:	9a02      	ldr	r2, [sp, #8]
   b8718:	460b      	mov	r3, r1
   b871a:	4413      	add	r3, r2
   b871c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b8720:	f2c0 8143 	blt.w	b89aa <__ieee754_pow+0xab2>
   b8724:	4619      	mov	r1, r3
   b8726:	ec53 2b18 	vmov	r2, r3, d8
   b872a:	f7fb fe35 	bl	b4398 <__aeabi_dmul>
   b872e:	ec41 0b10 	vmov	d0, r0, r1
   b8732:	e42d      	b.n	b7f90 <__ieee754_pow+0x98>
   b8734:	f1bb 0f00 	cmp.w	fp, #0
   b8738:	f6ff aca0 	blt.w	b807c <__ieee754_pow+0x184>
   b873c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b87f8 <__ieee754_pow+0x900>
   b8740:	e426      	b.n	b7f90 <__ieee754_pow+0x98>
   b8742:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b8820 <__ieee754_pow+0x928>
   b8746:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b874a:	4563      	cmp	r3, ip
   b874c:	f340 80e7 	ble.w	b891e <__ieee754_pow+0xa26>
   b8750:	4b32      	ldr	r3, [pc, #200]	; (b881c <__ieee754_pow+0x924>)
   b8752:	440b      	add	r3, r1
   b8754:	4303      	orrs	r3, r0
   b8756:	d10a      	bne.n	b876e <__ieee754_pow+0x876>
   b8758:	4622      	mov	r2, r4
   b875a:	462b      	mov	r3, r5
   b875c:	f7fb fc64 	bl	b4028 <__aeabi_dsub>
   b8760:	4632      	mov	r2, r6
   b8762:	463b      	mov	r3, r7
   b8764:	f7fc f89e 	bl	b48a4 <__aeabi_dcmpge>
   b8768:	2800      	cmp	r0, #0
   b876a:	f43f aef3 	beq.w	b8554 <__ieee754_pow+0x65c>
   b876e:	a324      	add	r3, pc, #144	; (adr r3, b8800 <__ieee754_pow+0x908>)
   b8770:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8774:	ec51 0b18 	vmov	r0, r1, d8
   b8778:	f7fb fe0e 	bl	b4398 <__aeabi_dmul>
   b877c:	a320      	add	r3, pc, #128	; (adr r3, b8800 <__ieee754_pow+0x908>)
   b877e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8782:	f7fb fe09 	bl	b4398 <__aeabi_dmul>
   b8786:	ec41 0b10 	vmov	d0, r0, r1
   b878a:	e401      	b.n	b7f90 <__ieee754_pow+0x98>
   b878c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b8808 <__ieee754_pow+0x910>
   b8790:	eeb0 8a47 	vmov.f32	s16, s14
   b8794:	eef0 8a67 	vmov.f32	s17, s15
   b8798:	e686      	b.n	b84a8 <__ieee754_pow+0x5b0>
   b879a:	f1bb 0f00 	cmp.w	fp, #0
   b879e:	dacd      	bge.n	b873c <__ieee754_pow+0x844>
   b87a0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b87a4:	ee00 6a10 	vmov	s0, r6
   b87a8:	ee00 3a90 	vmov	s1, r3
   b87ac:	f7ff bbf0 	b.w	b7f90 <__ieee754_pow+0x98>
   b87b0:	652b82fe 	.word	0x652b82fe
   b87b4:	3c971547 	.word	0x3c971547
   b87b8:	00000000 	.word	0x00000000
   b87bc:	3fe62e43 	.word	0x3fe62e43
   b87c0:	fefa39ef 	.word	0xfefa39ef
   b87c4:	3fe62e42 	.word	0x3fe62e42
   b87c8:	0ca86c39 	.word	0x0ca86c39
   b87cc:	be205c61 	.word	0xbe205c61
   b87d0:	72bea4d0 	.word	0x72bea4d0
   b87d4:	3e663769 	.word	0x3e663769
   b87d8:	c5d26bf1 	.word	0xc5d26bf1
   b87dc:	3ebbbd41 	.word	0x3ebbbd41
   b87e0:	af25de2c 	.word	0xaf25de2c
   b87e4:	3f11566a 	.word	0x3f11566a
   b87e8:	16bebd93 	.word	0x16bebd93
   b87ec:	3f66c16c 	.word	0x3f66c16c
   b87f0:	5555553e 	.word	0x5555553e
   b87f4:	3fc55555 	.word	0x3fc55555
	...
   b8800:	c2f8f359 	.word	0xc2f8f359
   b8804:	01a56e1f 	.word	0x01a56e1f
   b8808:	00000000 	.word	0x00000000
   b880c:	3ff00000 	.word	0x3ff00000
   b8810:	408fffff 	.word	0x408fffff
   b8814:	000fffff 	.word	0x000fffff
   b8818:	3ff00000 	.word	0x3ff00000
   b881c:	3f6f3400 	.word	0x3f6f3400
   b8820:	4090cbff 	.word	0x4090cbff
   b8824:	4598      	cmp	r8, r3
   b8826:	db85      	blt.n	b8734 <__ieee754_pow+0x83c>
   b8828:	4b7d      	ldr	r3, [pc, #500]	; (b8a20 <__ieee754_pow+0xb28>)
   b882a:	4598      	cmp	r8, r3
   b882c:	f73f ac22 	bgt.w	b8074 <__ieee754_pow+0x17c>
   b8830:	ec51 0b10 	vmov	r0, r1, d0
   b8834:	4b7a      	ldr	r3, [pc, #488]	; (b8a20 <__ieee754_pow+0xb28>)
   b8836:	2200      	movs	r2, #0
   b8838:	f7fb fbf6 	bl	b4028 <__aeabi_dsub>
   b883c:	a368      	add	r3, pc, #416	; (adr r3, b89e0 <__ieee754_pow+0xae8>)
   b883e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8842:	4604      	mov	r4, r0
   b8844:	460d      	mov	r5, r1
   b8846:	f7fb fda7 	bl	b4398 <__aeabi_dmul>
   b884a:	a367      	add	r3, pc, #412	; (adr r3, b89e8 <__ieee754_pow+0xaf0>)
   b884c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8850:	4682      	mov	sl, r0
   b8852:	468b      	mov	fp, r1
   b8854:	4620      	mov	r0, r4
   b8856:	4629      	mov	r1, r5
   b8858:	f7fb fd9e 	bl	b4398 <__aeabi_dmul>
   b885c:	4b71      	ldr	r3, [pc, #452]	; (b8a24 <__ieee754_pow+0xb2c>)
   b885e:	ec41 0b18 	vmov	d8, r0, r1
   b8862:	2200      	movs	r2, #0
   b8864:	4620      	mov	r0, r4
   b8866:	4629      	mov	r1, r5
   b8868:	f7fb fd96 	bl	b4398 <__aeabi_dmul>
   b886c:	4602      	mov	r2, r0
   b886e:	460b      	mov	r3, r1
   b8870:	a15f      	add	r1, pc, #380	; (adr r1, b89f0 <__ieee754_pow+0xaf8>)
   b8872:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8876:	f7fb fbd7 	bl	b4028 <__aeabi_dsub>
   b887a:	4622      	mov	r2, r4
   b887c:	462b      	mov	r3, r5
   b887e:	f7fb fd8b 	bl	b4398 <__aeabi_dmul>
   b8882:	4602      	mov	r2, r0
   b8884:	460b      	mov	r3, r1
   b8886:	2000      	movs	r0, #0
   b8888:	4967      	ldr	r1, [pc, #412]	; (b8a28 <__ieee754_pow+0xb30>)
   b888a:	f7fb fbcd 	bl	b4028 <__aeabi_dsub>
   b888e:	4622      	mov	r2, r4
   b8890:	4680      	mov	r8, r0
   b8892:	4689      	mov	r9, r1
   b8894:	462b      	mov	r3, r5
   b8896:	4620      	mov	r0, r4
   b8898:	4629      	mov	r1, r5
   b889a:	f7fb fd7d 	bl	b4398 <__aeabi_dmul>
   b889e:	4602      	mov	r2, r0
   b88a0:	460b      	mov	r3, r1
   b88a2:	4640      	mov	r0, r8
   b88a4:	4649      	mov	r1, r9
   b88a6:	f7fb fd77 	bl	b4398 <__aeabi_dmul>
   b88aa:	a353      	add	r3, pc, #332	; (adr r3, b89f8 <__ieee754_pow+0xb00>)
   b88ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88b0:	f7fb fd72 	bl	b4398 <__aeabi_dmul>
   b88b4:	4602      	mov	r2, r0
   b88b6:	460b      	mov	r3, r1
   b88b8:	ec51 0b18 	vmov	r0, r1, d8
   b88bc:	f7fb fbb4 	bl	b4028 <__aeabi_dsub>
   b88c0:	4680      	mov	r8, r0
   b88c2:	4689      	mov	r9, r1
   b88c4:	4642      	mov	r2, r8
   b88c6:	464b      	mov	r3, r9
   b88c8:	4650      	mov	r0, sl
   b88ca:	4659      	mov	r1, fp
   b88cc:	f7fb fbae 	bl	b402c <__adddf3>
   b88d0:	2000      	movs	r0, #0
   b88d2:	4652      	mov	r2, sl
   b88d4:	465b      	mov	r3, fp
   b88d6:	4604      	mov	r4, r0
   b88d8:	460d      	mov	r5, r1
   b88da:	e591      	b.n	b8400 <__ieee754_pow+0x508>
   b88dc:	4622      	mov	r2, r4
   b88de:	462b      	mov	r3, r5
   b88e0:	4620      	mov	r0, r4
   b88e2:	4629      	mov	r1, r5
   b88e4:	f7fb fd58 	bl	b4398 <__aeabi_dmul>
   b88e8:	ec41 0b10 	vmov	d0, r0, r1
   b88ec:	f7ff bb50 	b.w	b7f90 <__ieee754_pow+0x98>
   b88f0:	494b      	ldr	r1, [pc, #300]	; (b8a20 <__ieee754_pow+0xb28>)
   b88f2:	2000      	movs	r0, #0
   b88f4:	4622      	mov	r2, r4
   b88f6:	462b      	mov	r3, r5
   b88f8:	f7fb fe78 	bl	b45ec <__aeabi_ddiv>
   b88fc:	ec41 0b10 	vmov	d0, r0, r1
   b8900:	f7ff bb46 	b.w	b7f90 <__ieee754_pow+0x98>
   b8904:	2b00      	cmp	r3, #0
   b8906:	d144      	bne.n	b8992 <__ieee754_pow+0xa9a>
   b8908:	f1c1 0114 	rsb	r1, r1, #20
   b890c:	fa4a f001 	asr.w	r0, sl, r1
   b8910:	fa00 f101 	lsl.w	r1, r0, r1
   b8914:	4551      	cmp	r1, sl
   b8916:	d05a      	beq.n	b89ce <__ieee754_pow+0xad6>
   b8918:	9300      	str	r3, [sp, #0]
   b891a:	f7ff bb17 	b.w	b7f4c <__ieee754_pow+0x54>
   b891e:	4a42      	ldr	r2, [pc, #264]	; (b8a28 <__ieee754_pow+0xb30>)
   b8920:	4293      	cmp	r3, r2
   b8922:	dc5b      	bgt.n	b89dc <__ieee754_pow+0xae4>
   b8924:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8928:	9102      	str	r1, [sp, #8]
   b892a:	9100      	str	r1, [sp, #0]
   b892c:	e646      	b.n	b85bc <__ieee754_pow+0x6c4>
   b892e:	a334      	add	r3, pc, #208	; (adr r3, b8a00 <__ieee754_pow+0xb08>)
   b8930:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8934:	ec51 0b18 	vmov	r0, r1, d8
   b8938:	f7fb fd2e 	bl	b4398 <__aeabi_dmul>
   b893c:	a330      	add	r3, pc, #192	; (adr r3, b8a00 <__ieee754_pow+0xb08>)
   b893e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8942:	f7fb fd29 	bl	b4398 <__aeabi_dmul>
   b8946:	ec41 0b10 	vmov	d0, r0, r1
   b894a:	f7ff bb21 	b.w	b7f90 <__ieee754_pow+0x98>
   b894e:	9b00      	ldr	r3, [sp, #0]
   b8950:	2b01      	cmp	r3, #1
   b8952:	f47f ab1d 	bne.w	b7f90 <__ieee754_pow+0x98>
   b8956:	ee10 1a90 	vmov	r1, s1
   b895a:	ee10 2a10 	vmov	r2, s0
   b895e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8962:	ec43 2b10 	vmov	d0, r2, r3
   b8966:	f7ff bb13 	b.w	b7f90 <__ieee754_pow+0x98>
   b896a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b8a08 <__ieee754_pow+0xb10>
   b896e:	eeb0 ca47 	vmov.f32	s24, s14
   b8972:	eef0 ca67 	vmov.f32	s25, s15
   b8976:	ed9f 7b26 	vldr	d7, [pc, #152]	; b8a10 <__ieee754_pow+0xb18>
   b897a:	eeb0 da47 	vmov.f32	s26, s14
   b897e:	eef0 da67 	vmov.f32	s27, s15
   b8982:	ed9f 7b25 	vldr	d7, [pc, #148]	; b8a18 <__ieee754_pow+0xb20>
   b8986:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b898a:	ec53 2b17 	vmov	r2, r3, d7
   b898e:	f7ff bbeb 	b.w	b8168 <__ieee754_pow+0x270>
   b8992:	ec45 4b10 	vmov	d0, r4, r5
   b8996:	9200      	str	r2, [sp, #0]
   b8998:	f000 f914 	bl	b8bc4 <fabs>
   b899c:	9a00      	ldr	r2, [sp, #0]
   b899e:	2a00      	cmp	r2, #0
   b89a0:	f47f ab92 	bne.w	b80c8 <__ieee754_pow+0x1d0>
   b89a4:	9200      	str	r2, [sp, #0]
   b89a6:	f7ff bb26 	b.w	b7ff6 <__ieee754_pow+0xfe>
   b89aa:	ec41 0b10 	vmov	d0, r0, r1
   b89ae:	9800      	ldr	r0, [sp, #0]
   b89b0:	f000 f9c2 	bl	b8d38 <scalbn>
   b89b4:	ec51 0b10 	vmov	r0, r1, d0
   b89b8:	e6b5      	b.n	b8726 <__ieee754_pow+0x82e>
   b89ba:	f000 0001 	and.w	r0, r0, #1
   b89be:	f1c0 0102 	rsb	r1, r0, #2
   b89c2:	9100      	str	r1, [sp, #0]
   b89c4:	2b00      	cmp	r3, #0
   b89c6:	f43f aac1 	beq.w	b7f4c <__ieee754_pow+0x54>
   b89ca:	f7ff bb0d 	b.w	b7fe8 <__ieee754_pow+0xf0>
   b89ce:	f000 0001 	and.w	r0, r0, #1
   b89d2:	f1c0 0302 	rsb	r3, r0, #2
   b89d6:	9300      	str	r3, [sp, #0]
   b89d8:	f7ff bab8 	b.w	b7f4c <__ieee754_pow+0x54>
   b89dc:	151b      	asrs	r3, r3, #20
   b89de:	e5bb      	b.n	b8558 <__ieee754_pow+0x660>
   b89e0:	60000000 	.word	0x60000000
   b89e4:	3ff71547 	.word	0x3ff71547
   b89e8:	f85ddf44 	.word	0xf85ddf44
   b89ec:	3e54ae0b 	.word	0x3e54ae0b
   b89f0:	55555555 	.word	0x55555555
   b89f4:	3fd55555 	.word	0x3fd55555
   b89f8:	652b82fe 	.word	0x652b82fe
   b89fc:	3ff71547 	.word	0x3ff71547
   b8a00:	8800759c 	.word	0x8800759c
   b8a04:	7e37e43c 	.word	0x7e37e43c
   b8a08:	40000000 	.word	0x40000000
   b8a0c:	3fe2b803 	.word	0x3fe2b803
   b8a10:	43cfd006 	.word	0x43cfd006
   b8a14:	3e4cfdeb 	.word	0x3e4cfdeb
   b8a18:	00000000 	.word	0x00000000
   b8a1c:	3ff80000 	.word	0x3ff80000
   b8a20:	3ff00000 	.word	0x3ff00000
   b8a24:	3fd00000 	.word	0x3fd00000
   b8a28:	3fe00000 	.word	0x3fe00000

000b8a2c <__ieee754_sqrt>:
   b8a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a30:	4a63      	ldr	r2, [pc, #396]	; (b8bc0 <__ieee754_sqrt+0x194>)
   b8a32:	ec55 4b10 	vmov	r4, r5, d0
   b8a36:	43aa      	bics	r2, r5
   b8a38:	f000 809f 	beq.w	b8b7a <__ieee754_sqrt+0x14e>
   b8a3c:	2d00      	cmp	r5, #0
   b8a3e:	ee10 ca10 	vmov	ip, s0
   b8a42:	462b      	mov	r3, r5
   b8a44:	dd54      	ble.n	b8af0 <__ieee754_sqrt+0xc4>
   b8a46:	1529      	asrs	r1, r5, #20
   b8a48:	d063      	beq.n	b8b12 <__ieee754_sqrt+0xe6>
   b8a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8a4e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b8a52:	07c9      	lsls	r1, r1, #31
   b8a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8a58:	d404      	bmi.n	b8a64 <__ieee754_sqrt+0x38>
   b8a5a:	005b      	lsls	r3, r3, #1
   b8a5c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8a60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8a64:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8a68:	2600      	movs	r6, #0
   b8a6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b8a6e:	107f      	asrs	r7, r7, #1
   b8a70:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8a74:	f04f 0e16 	mov.w	lr, #22
   b8a78:	4634      	mov	r4, r6
   b8a7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b8a7e:	18a1      	adds	r1, r4, r2
   b8a80:	4299      	cmp	r1, r3
   b8a82:	dc02      	bgt.n	b8a8a <__ieee754_sqrt+0x5e>
   b8a84:	1a5b      	subs	r3, r3, r1
   b8a86:	188c      	adds	r4, r1, r2
   b8a88:	4416      	add	r6, r2
   b8a8a:	005b      	lsls	r3, r3, #1
   b8a8c:	f1be 0e01 	subs.w	lr, lr, #1
   b8a90:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8a94:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8a98:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8a9c:	d1ef      	bne.n	b8a7e <__ieee754_sqrt+0x52>
   b8a9e:	4675      	mov	r5, lr
   b8aa0:	2020      	movs	r0, #32
   b8aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b8aa6:	e00a      	b.n	b8abe <__ieee754_sqrt+0x92>
   b8aa8:	d044      	beq.n	b8b34 <__ieee754_sqrt+0x108>
   b8aaa:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b8aae:	3801      	subs	r0, #1
   b8ab0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b8ab4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8ab8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8abc:	d043      	beq.n	b8b46 <__ieee754_sqrt+0x11a>
   b8abe:	42a3      	cmp	r3, r4
   b8ac0:	eb02 010e 	add.w	r1, r2, lr
   b8ac4:	ddf0      	ble.n	b8aa8 <__ieee754_sqrt+0x7c>
   b8ac6:	2900      	cmp	r1, #0
   b8ac8:	eb01 0e02 	add.w	lr, r1, r2
   b8acc:	db0a      	blt.n	b8ae4 <__ieee754_sqrt+0xb8>
   b8ace:	46a0      	mov	r8, r4
   b8ad0:	1b1b      	subs	r3, r3, r4
   b8ad2:	4561      	cmp	r1, ip
   b8ad4:	bf88      	it	hi
   b8ad6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b8ada:	ebac 0c01 	sub.w	ip, ip, r1
   b8ade:	4415      	add	r5, r2
   b8ae0:	4644      	mov	r4, r8
   b8ae2:	e7e2      	b.n	b8aaa <__ieee754_sqrt+0x7e>
   b8ae4:	f1be 0f00 	cmp.w	lr, #0
   b8ae8:	dbf1      	blt.n	b8ace <__ieee754_sqrt+0xa2>
   b8aea:	f104 0801 	add.w	r8, r4, #1
   b8aee:	e7ef      	b.n	b8ad0 <__ieee754_sqrt+0xa4>
   b8af0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b8af4:	4322      	orrs	r2, r4
   b8af6:	d038      	beq.n	b8b6a <__ieee754_sqrt+0x13e>
   b8af8:	2d00      	cmp	r5, #0
   b8afa:	d14e      	bne.n	b8b9a <__ieee754_sqrt+0x16e>
   b8afc:	4629      	mov	r1, r5
   b8afe:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b8b02:	3915      	subs	r1, #21
   b8b04:	4613      	mov	r3, r2
   b8b06:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b8b0a:	2a00      	cmp	r2, #0
   b8b0c:	d0f7      	beq.n	b8afe <__ieee754_sqrt+0xd2>
   b8b0e:	02d6      	lsls	r6, r2, #11
   b8b10:	d450      	bmi.n	b8bb4 <__ieee754_sqrt+0x188>
   b8b12:	2000      	movs	r0, #0
   b8b14:	005b      	lsls	r3, r3, #1
   b8b16:	02dd      	lsls	r5, r3, #11
   b8b18:	4604      	mov	r4, r0
   b8b1a:	f100 0001 	add.w	r0, r0, #1
   b8b1e:	d5f9      	bpl.n	b8b14 <__ieee754_sqrt+0xe8>
   b8b20:	461a      	mov	r2, r3
   b8b22:	4663      	mov	r3, ip
   b8b24:	fa0c fc00 	lsl.w	ip, ip, r0
   b8b28:	f1c0 0020 	rsb	r0, r0, #32
   b8b2c:	40c3      	lsrs	r3, r0
   b8b2e:	1b09      	subs	r1, r1, r4
   b8b30:	4313      	orrs	r3, r2
   b8b32:	e78a      	b.n	b8a4a <__ieee754_sqrt+0x1e>
   b8b34:	4561      	cmp	r1, ip
   b8b36:	d8b8      	bhi.n	b8aaa <__ieee754_sqrt+0x7e>
   b8b38:	2900      	cmp	r1, #0
   b8b3a:	eb01 0e02 	add.w	lr, r1, r2
   b8b3e:	dbd1      	blt.n	b8ae4 <__ieee754_sqrt+0xb8>
   b8b40:	4698      	mov	r8, r3
   b8b42:	2300      	movs	r3, #0
   b8b44:	e7c9      	b.n	b8ada <__ieee754_sqrt+0xae>
   b8b46:	ea53 030c 	orrs.w	r3, r3, ip
   b8b4a:	d110      	bne.n	b8b6e <__ieee754_sqrt+0x142>
   b8b4c:	0868      	lsrs	r0, r5, #1
   b8b4e:	1071      	asrs	r1, r6, #1
   b8b50:	07f3      	lsls	r3, r6, #31
   b8b52:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b8b56:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b8b5a:	bf48      	it	mi
   b8b5c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b8b60:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b8b64:	4602      	mov	r2, r0
   b8b66:	ec43 2b10 	vmov	d0, r2, r3
   b8b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8b6e:	1c6a      	adds	r2, r5, #1
   b8b70:	bf16      	itet	ne
   b8b72:	1c68      	addne	r0, r5, #1
   b8b74:	3601      	addeq	r6, #1
   b8b76:	0840      	lsrne	r0, r0, #1
   b8b78:	e7e9      	b.n	b8b4e <__ieee754_sqrt+0x122>
   b8b7a:	ee10 2a10 	vmov	r2, s0
   b8b7e:	ee10 0a10 	vmov	r0, s0
   b8b82:	462b      	mov	r3, r5
   b8b84:	4629      	mov	r1, r5
   b8b86:	f7fb fc07 	bl	b4398 <__aeabi_dmul>
   b8b8a:	4622      	mov	r2, r4
   b8b8c:	462b      	mov	r3, r5
   b8b8e:	f7fb fa4d 	bl	b402c <__adddf3>
   b8b92:	ec41 0b10 	vmov	d0, r0, r1
   b8b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8b9a:	ee10 2a10 	vmov	r2, s0
   b8b9e:	4620      	mov	r0, r4
   b8ba0:	4629      	mov	r1, r5
   b8ba2:	f7fb fa41 	bl	b4028 <__aeabi_dsub>
   b8ba6:	4602      	mov	r2, r0
   b8ba8:	460b      	mov	r3, r1
   b8baa:	f7fb fd1f 	bl	b45ec <__aeabi_ddiv>
   b8bae:	ec41 0b10 	vmov	d0, r0, r1
   b8bb2:	e7da      	b.n	b8b6a <__ieee754_sqrt+0x13e>
   b8bb4:	4663      	mov	r3, ip
   b8bb6:	2020      	movs	r0, #32
   b8bb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8bbc:	e7b6      	b.n	b8b2c <__ieee754_sqrt+0x100>
   b8bbe:	bf00      	nop
   b8bc0:	7ff00000 	.word	0x7ff00000

000b8bc4 <fabs>:
   b8bc4:	ec51 0b10 	vmov	r0, r1, d0
   b8bc8:	ee10 2a10 	vmov	r2, s0
   b8bcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8bd0:	ec43 2b10 	vmov	d0, r2, r3
   b8bd4:	4770      	bx	lr
   b8bd6:	bf00      	nop

000b8bd8 <finite>:
   b8bd8:	b082      	sub	sp, #8
   b8bda:	ed8d 0b00 	vstr	d0, [sp]
   b8bde:	9801      	ldr	r0, [sp, #4]
   b8be0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b8be4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b8be8:	0fc0      	lsrs	r0, r0, #31
   b8bea:	b002      	add	sp, #8
   b8bec:	4770      	bx	lr
   b8bee:	bf00      	nop

000b8bf0 <nan>:
   b8bf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8bf8 <nan+0x8>
   b8bf4:	4770      	bx	lr
   b8bf6:	bf00      	nop
   b8bf8:	00000000 	.word	0x00000000
   b8bfc:	7ff80000 	.word	0x7ff80000

000b8c00 <rint>:
   b8c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8c02:	ec53 2b10 	vmov	r2, r3, d0
   b8c06:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b8c0a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b8c0e:	2913      	cmp	r1, #19
   b8c10:	ee10 0a10 	vmov	r0, s0
   b8c14:	b083      	sub	sp, #12
   b8c16:	461c      	mov	r4, r3
   b8c18:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b8c1c:	dc3a      	bgt.n	b8c94 <rint+0x94>
   b8c1e:	2900      	cmp	r1, #0
   b8c20:	db30      	blt.n	b8c84 <rint+0x84>
   b8c22:	4d42      	ldr	r5, [pc, #264]	; (b8d2c <rint+0x12c>)
   b8c24:	fa45 fc01 	asr.w	ip, r5, r1
   b8c28:	ea03 050c 	and.w	r5, r3, ip
   b8c2c:	4315      	orrs	r5, r2
   b8c2e:	d02d      	beq.n	b8c8c <rint+0x8c>
   b8c30:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b8c34:	4318      	orrs	r0, r3
   b8c36:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b8c3a:	d00c      	beq.n	b8c56 <rint+0x56>
   b8c3c:	ea24 0c0c 	bic.w	ip, r4, ip
   b8c40:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b8c44:	2913      	cmp	r1, #19
   b8c46:	fa44 f101 	asr.w	r1, r4, r1
   b8c4a:	bf0c      	ite	eq
   b8c4c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b8c50:	2000      	movne	r0, #0
   b8c52:	ea4c 0401 	orr.w	r4, ip, r1
   b8c56:	4936      	ldr	r1, [pc, #216]	; (b8d30 <rint+0x130>)
   b8c58:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b8c5c:	4623      	mov	r3, r4
   b8c5e:	e9de 4500 	ldrd	r4, r5, [lr]
   b8c62:	4602      	mov	r2, r0
   b8c64:	4629      	mov	r1, r5
   b8c66:	4620      	mov	r0, r4
   b8c68:	f7fb f9e0 	bl	b402c <__adddf3>
   b8c6c:	e9cd 0100 	strd	r0, r1, [sp]
   b8c70:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8c74:	4622      	mov	r2, r4
   b8c76:	462b      	mov	r3, r5
   b8c78:	f7fb f9d6 	bl	b4028 <__aeabi_dsub>
   b8c7c:	ec41 0b10 	vmov	d0, r0, r1
   b8c80:	b003      	add	sp, #12
   b8c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8c84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8c88:	4311      	orrs	r1, r2
   b8c8a:	d124      	bne.n	b8cd6 <rint+0xd6>
   b8c8c:	ec43 2b10 	vmov	d0, r2, r3
   b8c90:	b003      	add	sp, #12
   b8c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8c94:	2933      	cmp	r1, #51	; 0x33
   b8c96:	dd08      	ble.n	b8caa <rint+0xaa>
   b8c98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b8c9c:	d1f6      	bne.n	b8c8c <rint+0x8c>
   b8c9e:	4619      	mov	r1, r3
   b8ca0:	f7fb f9c4 	bl	b402c <__adddf3>
   b8ca4:	ec41 0b10 	vmov	d0, r0, r1
   b8ca8:	e7f2      	b.n	b8c90 <rint+0x90>
   b8caa:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b8cae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8cb2:	fa21 f10c 	lsr.w	r1, r1, ip
   b8cb6:	420a      	tst	r2, r1
   b8cb8:	d0e8      	beq.n	b8c8c <rint+0x8c>
   b8cba:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b8cbe:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b8cc2:	d0c8      	beq.n	b8c56 <rint+0x56>
   b8cc4:	ea20 0303 	bic.w	r3, r0, r3
   b8cc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b8ccc:	fa40 fc0c 	asr.w	ip, r0, ip
   b8cd0:	ea43 000c 	orr.w	r0, r3, ip
   b8cd4:	e7bf      	b.n	b8c56 <rint+0x56>
   b8cd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8cda:	4318      	orrs	r0, r3
   b8cdc:	4a14      	ldr	r2, [pc, #80]	; (b8d30 <rint+0x130>)
   b8cde:	4243      	negs	r3, r0
   b8ce0:	4303      	orrs	r3, r0
   b8ce2:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b8ce6:	0b1b      	lsrs	r3, r3, #12
   b8ce8:	0c62      	lsrs	r2, r4, #17
   b8cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b8cee:	0452      	lsls	r2, r2, #17
   b8cf0:	ea43 0702 	orr.w	r7, r3, r2
   b8cf4:	463b      	mov	r3, r7
   b8cf6:	e9de 6700 	ldrd	r6, r7, [lr]
   b8cfa:	ee10 2a10 	vmov	r2, s0
   b8cfe:	4630      	mov	r0, r6
   b8d00:	4639      	mov	r1, r7
   b8d02:	f7fb f993 	bl	b402c <__adddf3>
   b8d06:	e9cd 0100 	strd	r0, r1, [sp]
   b8d0a:	4632      	mov	r2, r6
   b8d0c:	463b      	mov	r3, r7
   b8d0e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8d12:	f7fb f989 	bl	b4028 <__aeabi_dsub>
   b8d16:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b8d1a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8d1e:	4602      	mov	r2, r0
   b8d20:	ea41 0304 	orr.w	r3, r1, r4
   b8d24:	ec43 2b10 	vmov	d0, r2, r3
   b8d28:	b003      	add	sp, #12
   b8d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8d2c:	000fffff 	.word	0x000fffff
   b8d30:	000b96e0 	.word	0x000b96e0
   b8d34:	00000000 	.word	0x00000000

000b8d38 <scalbn>:
   b8d38:	b538      	push	{r3, r4, r5, lr}
   b8d3a:	ec53 2b10 	vmov	r2, r3, d0
   b8d3e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b8d42:	4604      	mov	r4, r0
   b8d44:	469c      	mov	ip, r3
   b8d46:	bb89      	cbnz	r1, b8dac <scalbn+0x74>
   b8d48:	ee10 1a10 	vmov	r1, s0
   b8d4c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b8d50:	ea5c 0101 	orrs.w	r1, ip, r1
   b8d54:	d029      	beq.n	b8daa <scalbn+0x72>
   b8d56:	4619      	mov	r1, r3
   b8d58:	2200      	movs	r2, #0
   b8d5a:	4b3d      	ldr	r3, [pc, #244]	; (b8e50 <scalbn+0x118>)
   b8d5c:	4d3d      	ldr	r5, [pc, #244]	; (b8e54 <scalbn+0x11c>)
   b8d5e:	ee10 0a10 	vmov	r0, s0
   b8d62:	f7fb fb19 	bl	b4398 <__aeabi_dmul>
   b8d66:	42ac      	cmp	r4, r5
   b8d68:	4602      	mov	r2, r0
   b8d6a:	460b      	mov	r3, r1
   b8d6c:	db16      	blt.n	b8d9c <scalbn+0x64>
   b8d6e:	468c      	mov	ip, r1
   b8d70:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b8d74:	3936      	subs	r1, #54	; 0x36
   b8d76:	4421      	add	r1, r4
   b8d78:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b8d7c:	4281      	cmp	r1, r0
   b8d7e:	dc21      	bgt.n	b8dc4 <scalbn+0x8c>
   b8d80:	2900      	cmp	r1, #0
   b8d82:	dc47      	bgt.n	b8e14 <scalbn+0xdc>
   b8d84:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8d88:	da34      	bge.n	b8df4 <scalbn+0xbc>
   b8d8a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b8d8e:	428c      	cmp	r4, r1
   b8d90:	dc18      	bgt.n	b8dc4 <scalbn+0x8c>
   b8d92:	2b00      	cmp	r3, #0
   b8d94:	a126      	add	r1, pc, #152	; (adr r1, b8e30 <scalbn+0xf8>)
   b8d96:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8d9a:	db44      	blt.n	b8e26 <scalbn+0xee>
   b8d9c:	a324      	add	r3, pc, #144	; (adr r3, b8e30 <scalbn+0xf8>)
   b8d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8da2:	f7fb faf9 	bl	b4398 <__aeabi_dmul>
   b8da6:	ec41 0b10 	vmov	d0, r0, r1
   b8daa:	bd38      	pop	{r3, r4, r5, pc}
   b8dac:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8db0:	4281      	cmp	r1, r0
   b8db2:	d1e0      	bne.n	b8d76 <scalbn+0x3e>
   b8db4:	ee10 0a10 	vmov	r0, s0
   b8db8:	4619      	mov	r1, r3
   b8dba:	f7fb f937 	bl	b402c <__adddf3>
   b8dbe:	ec41 0b10 	vmov	d0, r0, r1
   b8dc2:	bd38      	pop	{r3, r4, r5, pc}
   b8dc4:	2b00      	cmp	r3, #0
   b8dc6:	a11c      	add	r1, pc, #112	; (adr r1, b8e38 <scalbn+0x100>)
   b8dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8dcc:	db07      	blt.n	b8dde <scalbn+0xa6>
   b8dce:	a31a      	add	r3, pc, #104	; (adr r3, b8e38 <scalbn+0x100>)
   b8dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8dd4:	f7fb fae0 	bl	b4398 <__aeabi_dmul>
   b8dd8:	ec41 0b10 	vmov	d0, r0, r1
   b8ddc:	bd38      	pop	{r3, r4, r5, pc}
   b8dde:	a118      	add	r1, pc, #96	; (adr r1, b8e40 <scalbn+0x108>)
   b8de0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8de4:	a314      	add	r3, pc, #80	; (adr r3, b8e38 <scalbn+0x100>)
   b8de6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8dea:	f7fb fad5 	bl	b4398 <__aeabi_dmul>
   b8dee:	ec41 0b10 	vmov	d0, r0, r1
   b8df2:	e7f3      	b.n	b8ddc <scalbn+0xa4>
   b8df4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8df8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8dfc:	3136      	adds	r1, #54	; 0x36
   b8dfe:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8e02:	4610      	mov	r0, r2
   b8e04:	4619      	mov	r1, r3
   b8e06:	2200      	movs	r2, #0
   b8e08:	4b13      	ldr	r3, [pc, #76]	; (b8e58 <scalbn+0x120>)
   b8e0a:	f7fb fac5 	bl	b4398 <__aeabi_dmul>
   b8e0e:	ec41 0b10 	vmov	d0, r0, r1
   b8e12:	bd38      	pop	{r3, r4, r5, pc}
   b8e14:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8e18:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8e1c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8e20:	ec43 2b10 	vmov	d0, r2, r3
   b8e24:	bd38      	pop	{r3, r4, r5, pc}
   b8e26:	a108      	add	r1, pc, #32	; (adr r1, b8e48 <scalbn+0x110>)
   b8e28:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8e2c:	e7b6      	b.n	b8d9c <scalbn+0x64>
   b8e2e:	bf00      	nop
   b8e30:	c2f8f359 	.word	0xc2f8f359
   b8e34:	01a56e1f 	.word	0x01a56e1f
   b8e38:	8800759c 	.word	0x8800759c
   b8e3c:	7e37e43c 	.word	0x7e37e43c
   b8e40:	8800759c 	.word	0x8800759c
   b8e44:	fe37e43c 	.word	0xfe37e43c
   b8e48:	c2f8f359 	.word	0xc2f8f359
   b8e4c:	81a56e1f 	.word	0x81a56e1f
   b8e50:	43500000 	.word	0x43500000
   b8e54:	ffff3cb0 	.word	0xffff3cb0
   b8e58:	3c900000 	.word	0x3c900000

000b8e5c <atexit>:
   b8e5c:	2300      	movs	r3, #0
   b8e5e:	4601      	mov	r1, r0
   b8e60:	461a      	mov	r2, r3
   b8e62:	4618      	mov	r0, r3
   b8e64:	f000 b862 	b.w	b8f2c <__register_exitproc>

000b8e68 <memcpy>:
   b8e68:	440a      	add	r2, r1
   b8e6a:	4291      	cmp	r1, r2
   b8e6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8e70:	d100      	bne.n	b8e74 <memcpy+0xc>
   b8e72:	4770      	bx	lr
   b8e74:	b510      	push	{r4, lr}
   b8e76:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8e7e:	4291      	cmp	r1, r2
   b8e80:	d1f9      	bne.n	b8e76 <memcpy+0xe>
   b8e82:	bd10      	pop	{r4, pc}

000b8e84 <memset>:
   b8e84:	4402      	add	r2, r0
   b8e86:	4603      	mov	r3, r0
   b8e88:	4293      	cmp	r3, r2
   b8e8a:	d100      	bne.n	b8e8e <memset+0xa>
   b8e8c:	4770      	bx	lr
   b8e8e:	f803 1b01 	strb.w	r1, [r3], #1
   b8e92:	e7f9      	b.n	b8e88 <memset+0x4>

000b8e94 <srand>:
   b8e94:	b538      	push	{r3, r4, r5, lr}
   b8e96:	4b10      	ldr	r3, [pc, #64]	; (b8ed8 <srand+0x44>)
   b8e98:	681d      	ldr	r5, [r3, #0]
   b8e9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8e9c:	4604      	mov	r4, r0
   b8e9e:	b9b3      	cbnz	r3, b8ece <srand+0x3a>
   b8ea0:	2018      	movs	r0, #24
   b8ea2:	f7fd fd77 	bl	b6994 <malloc>
   b8ea6:	4602      	mov	r2, r0
   b8ea8:	63a8      	str	r0, [r5, #56]	; 0x38
   b8eaa:	b920      	cbnz	r0, b8eb6 <srand+0x22>
   b8eac:	4b0b      	ldr	r3, [pc, #44]	; (b8edc <srand+0x48>)
   b8eae:	480c      	ldr	r0, [pc, #48]	; (b8ee0 <srand+0x4c>)
   b8eb0:	2142      	movs	r1, #66	; 0x42
   b8eb2:	f7fd fda7 	bl	b6a04 <__assert_func>
   b8eb6:	490b      	ldr	r1, [pc, #44]	; (b8ee4 <srand+0x50>)
   b8eb8:	4b0b      	ldr	r3, [pc, #44]	; (b8ee8 <srand+0x54>)
   b8eba:	e9c0 1300 	strd	r1, r3, [r0]
   b8ebe:	4b0b      	ldr	r3, [pc, #44]	; (b8eec <srand+0x58>)
   b8ec0:	6083      	str	r3, [r0, #8]
   b8ec2:	230b      	movs	r3, #11
   b8ec4:	8183      	strh	r3, [r0, #12]
   b8ec6:	2100      	movs	r1, #0
   b8ec8:	2001      	movs	r0, #1
   b8eca:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8ece:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8ed0:	2200      	movs	r2, #0
   b8ed2:	611c      	str	r4, [r3, #16]
   b8ed4:	615a      	str	r2, [r3, #20]
   b8ed6:	bd38      	pop	{r3, r4, r5, pc}
   b8ed8:	2003e5d0 	.word	0x2003e5d0
   b8edc:	000b96f0 	.word	0x000b96f0
   b8ee0:	000b9707 	.word	0x000b9707
   b8ee4:	abcd330e 	.word	0xabcd330e
   b8ee8:	e66d1234 	.word	0xe66d1234
   b8eec:	0005deec 	.word	0x0005deec

000b8ef0 <strdup>:
   b8ef0:	4b02      	ldr	r3, [pc, #8]	; (b8efc <strdup+0xc>)
   b8ef2:	4601      	mov	r1, r0
   b8ef4:	6818      	ldr	r0, [r3, #0]
   b8ef6:	f000 b803 	b.w	b8f00 <_strdup_r>
   b8efa:	bf00      	nop
   b8efc:	2003e5d0 	.word	0x2003e5d0

000b8f00 <_strdup_r>:
   b8f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8f02:	4604      	mov	r4, r0
   b8f04:	4608      	mov	r0, r1
   b8f06:	460d      	mov	r5, r1
   b8f08:	f7fc f80e 	bl	b4f28 <strlen>
   b8f0c:	1c42      	adds	r2, r0, #1
   b8f0e:	4611      	mov	r1, r2
   b8f10:	4620      	mov	r0, r4
   b8f12:	9201      	str	r2, [sp, #4]
   b8f14:	f7fd fd66 	bl	b69e4 <_malloc_r>
   b8f18:	4604      	mov	r4, r0
   b8f1a:	b118      	cbz	r0, b8f24 <_strdup_r+0x24>
   b8f1c:	9a01      	ldr	r2, [sp, #4]
   b8f1e:	4629      	mov	r1, r5
   b8f20:	f7ff ffa2 	bl	b8e68 <memcpy>
   b8f24:	4620      	mov	r0, r4
   b8f26:	b003      	add	sp, #12
   b8f28:	bd30      	pop	{r4, r5, pc}
	...

000b8f2c <__register_exitproc>:
   b8f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f30:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8fec <__register_exitproc+0xc0>
   b8f34:	4606      	mov	r6, r0
   b8f36:	f8d8 0000 	ldr.w	r0, [r8]
   b8f3a:	461f      	mov	r7, r3
   b8f3c:	460d      	mov	r5, r1
   b8f3e:	4691      	mov	r9, r2
   b8f40:	f000 f856 	bl	b8ff0 <__retarget_lock_acquire_recursive>
   b8f44:	4b25      	ldr	r3, [pc, #148]	; (b8fdc <__register_exitproc+0xb0>)
   b8f46:	681c      	ldr	r4, [r3, #0]
   b8f48:	b934      	cbnz	r4, b8f58 <__register_exitproc+0x2c>
   b8f4a:	4c25      	ldr	r4, [pc, #148]	; (b8fe0 <__register_exitproc+0xb4>)
   b8f4c:	601c      	str	r4, [r3, #0]
   b8f4e:	4b25      	ldr	r3, [pc, #148]	; (b8fe4 <__register_exitproc+0xb8>)
   b8f50:	b113      	cbz	r3, b8f58 <__register_exitproc+0x2c>
   b8f52:	681b      	ldr	r3, [r3, #0]
   b8f54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8f58:	6863      	ldr	r3, [r4, #4]
   b8f5a:	2b1f      	cmp	r3, #31
   b8f5c:	dd07      	ble.n	b8f6e <__register_exitproc+0x42>
   b8f5e:	f8d8 0000 	ldr.w	r0, [r8]
   b8f62:	f000 f847 	bl	b8ff4 <__retarget_lock_release_recursive>
   b8f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8f6e:	b34e      	cbz	r6, b8fc4 <__register_exitproc+0x98>
   b8f70:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8f74:	b988      	cbnz	r0, b8f9a <__register_exitproc+0x6e>
   b8f76:	4b1c      	ldr	r3, [pc, #112]	; (b8fe8 <__register_exitproc+0xbc>)
   b8f78:	b923      	cbnz	r3, b8f84 <__register_exitproc+0x58>
   b8f7a:	f8d8 0000 	ldr.w	r0, [r8]
   b8f7e:	f000 f838 	bl	b8ff2 <__retarget_lock_release>
   b8f82:	e7f0      	b.n	b8f66 <__register_exitproc+0x3a>
   b8f84:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8f88:	f7fd fd04 	bl	b6994 <malloc>
   b8f8c:	2800      	cmp	r0, #0
   b8f8e:	d0f4      	beq.n	b8f7a <__register_exitproc+0x4e>
   b8f90:	2300      	movs	r3, #0
   b8f92:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8f96:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8f9a:	6863      	ldr	r3, [r4, #4]
   b8f9c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8fa0:	2201      	movs	r2, #1
   b8fa2:	409a      	lsls	r2, r3
   b8fa4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8fa8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8fac:	4313      	orrs	r3, r2
   b8fae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8fb2:	2e02      	cmp	r6, #2
   b8fb4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8fb8:	bf02      	ittt	eq
   b8fba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8fbe:	4313      	orreq	r3, r2
   b8fc0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8fc4:	6863      	ldr	r3, [r4, #4]
   b8fc6:	f8d8 0000 	ldr.w	r0, [r8]
   b8fca:	1c5a      	adds	r2, r3, #1
   b8fcc:	3302      	adds	r3, #2
   b8fce:	6062      	str	r2, [r4, #4]
   b8fd0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8fd4:	f000 f80e 	bl	b8ff4 <__retarget_lock_release_recursive>
   b8fd8:	2000      	movs	r0, #0
   b8fda:	e7c6      	b.n	b8f6a <__register_exitproc+0x3e>
   b8fdc:	2003e7e8 	.word	0x2003e7e8
   b8fe0:	2003e75c 	.word	0x2003e75c
   b8fe4:	00000000 	.word	0x00000000
   b8fe8:	000b6995 	.word	0x000b6995
   b8fec:	2003e634 	.word	0x2003e634

000b8ff0 <__retarget_lock_acquire_recursive>:
   b8ff0:	4770      	bx	lr

000b8ff2 <__retarget_lock_release>:
   b8ff2:	4770      	bx	lr

000b8ff4 <__retarget_lock_release_recursive>:
   b8ff4:	4770      	bx	lr

000b8ff6 <link_code_end>:
	...

000b8ff8 <dynalib_user>:
   b8ff8:	4f39 000b 4f75 000b 4f9d 000b 4fa1 000b     9O..uO...O...O..
   b9008:	0000 0000 504c 3a4f 2520 756c 5200 7461     ....LPO: %lu.Rat
   b9018:	6f69 203a 6625 2525 4300 6e6f 6563 746e     io: %f%%.Concent
   b9028:	6172 6974 6e6f 203a 6625 7020 7363 4c2f     ration: %f pcs/L
   b9038:	4e00 6e6f 0065 6144 676e 7265 4800 6769     .None.Danger.Hig
   b9048:	2068 6f50 6c6c 7475 6f69 006e 6f4c 2077     h Pollution.Low 
   b9058:	6f50 6c6c 7475 6f69 006e 7246 7365 2068     Pollution.Fresh 
   b9068:	6941 0072 6554 706d 203a 4300 4800 6d75     Air.Temp: .C.Hum
   b9078:	6469 7469 3a79 0020 6548 6c6c 206f 6854     idity: .Hello Th
   b9088:	6d6f 7361 4400 7375 3a74 0020 6941 2072     omas.Dust: .Air 
   b9098:	7551 6c61 7469 2079 6553 736e 726f 7220     Quality Sensor r
   b90a8:	6165 7964 002e 6941 2072 7551 6c61 7469     eady..Air Qualit
   b90b8:	2079 6553 736e 726f 4520 5252 524f 0021     y Sensor ERROR!.
   b90c8:	4d42 3245 3038 5320 6e65 6f73 2072 6572     BME280 Sensor re
   b90d8:	6461 2e79 4200 454d 3832 2030 6553 736e     ady..BME280 Sens
   b90e8:	726f 4520 5252 524f 0021 6150 7472 6369     or ERROR!.Partic
   b90f8:	656c 4100 7269 5120 6175 696c 7974 4d00     le.Air Quality.M
   b9108:	6e6f 7469 726f 7400 6d65 0070 7568 696d     onitor.temp.humi
   b9118:	6964 7974 7000 6572 7373 7275 0065 6961     dity.pressure.ai
   b9128:	2d72 7571 6c61 7469 0079 7564 7473 6c2d     r-quality.dust-l
   b9138:	6f70 6400 7375 2d74 6172 6974 006f 7564     po.dust-ratio.du
   b9148:	7473 632d 6e6f 6563 746e 6172 6974 6e6f     st-concentration
   b9158:	6500 766e 762d 6c61 0073 6941 2072 7551     .env-vals.Air Qu
   b9168:	6c61 7469 3a79 2520 0073 6554 706d 203a     ality: %s.Temp: 
   b9178:	6425 5000 6572 7373 7275 3a65 2520 0064     %d.Pressure: %d.
   b9188:	7548 696d 6964 7974 203a 6425 0000 0000     Humidity: %d....

000b9198 <_ZTV16JsonWriterStaticILj256EE>:
	...
   b91a0:	4fcd 000b 4fe1 000b                         .O...O..

000b91a8 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   b91a8:	0000 0000                                   ....

000b91ac <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   b91ac:	0002 0000                                   ....

000b91b0 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   b91b0:	0001 0000                                   ....

000b91b4 <_ZN16AirQualitySensor9FRESH_AIRE>:
   b91b4:	0003 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b91c4:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b91d4:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b91e4:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b91f4:	4f4d 4544 7525 003e                         MODE%u>.

000b91fc <_ZTVN8particle11SPISettingsE>:
	...
   b9204:	57a9 000b 577d 000b 577f 000b               .W..}W...W..

000b9210 <_ZL9BasicFont>:
	...
   b9218:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   b9228:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   b9238:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   b9248:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   b9258:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   b9268:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   b9278:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   b9288:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   b9298:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   b92a8:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   b92b8:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   b92c8:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   b92d8:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   b92e8:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   b92f8:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   b9308:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   b9318:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   b9328:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   b9338:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   b9348:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   b9358:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   b9368:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   b9378:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   b9388:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   b9398:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   b93a8:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   b93b8:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   b93c8:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   b93d8:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   b93e8:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   b93f8:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   b9408:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   b9418:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   b9428:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   b9438:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   b9448:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   b9458:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   b9468:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   b9478:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   b9488:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   b9498:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   b94a8:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   b94b8:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   b94c8:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   b94d8:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   b94e8:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   b94f8:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   b9508:	0200 0505 0002 0000 755c 3025 5834 2500     ........\u%04X.%
   b9518:	2a2e 0066 6625 0000                         .*f.%f..

000b9520 <_ZTV10JsonBuffer>:
	...
   b9528:	627d 000b 6299 000b                         }b...b..

000b9530 <_ZTV10JsonWriter>:
	...
   b9538:	62ad 000b 62c1 000b                         .b...b..

000b9540 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9548:	6ad1 000b 6ad7 000b 6b15 000b 6ae5 000b     .j...j...k...j..
   b9558:	6ad3 000b                                   .j..

000b955c <_ZTVN5spark13EthernetClassE>:
	...
   b9564:	705f 000b 7055 000b 704b 000b 7041 000b     _p..Up..Kp..Ap..
   b9574:	7035 000b 7029 000b 72b9 000b 72c1 000b     5p..)p...r...r..
   b9584:	701d 000b 7015 000b 700b 000b 7001 000b     .p...p...p...p..
   b9594:	72f1 000b                                   .r..

000b9598 <_ZTV7TwoWire>:
	...
   b95a0:	707d 000b 70c7 000b 709f 000b 707f 000b     }p...p...p...p..
   b95b0:	70a7 000b 70af 000b 70b7 000b 70bf 000b     .p...p...p...p..

000b95c0 <_ZTV9IPAddress>:
	...
   b95c8:	7189 000b 7179 000b 717b 000b 7061 0070     .q..yq..{q..app.

000b95d8 <_ZTVN5spark12NetworkClassE>:
	...
   b95e0:	7279 000b 7283 000b 728d 000b 7297 000b     yr...r...r...r..
   b95f0:	72a1 000b 72ad 000b 72b9 000b 72c1 000b     .r...r...r...r..
   b9600:	72c9 000b 72d5 000b 72dd 000b 72e7 000b     .r...r...r...r..
   b9610:	72f1 000b                                   .r..

000b9614 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9614:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b9624:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b9634:	6d69 0065                                   ime.

000b9638 <_ZTV11USARTSerial>:
	...
   b9640:	77c5 000b 7831 000b 7809 000b 73dd 000b     .w..1x...x...s..
   b9650:	77d9 000b 77f5 000b 77e7 000b 7803 000b     .w...w...w...x..
   b9660:	77c7 000b 77cb 000b                         .w...w..

000b9668 <_ZTV9USBSerial>:
	...
   b9670:	786f 000b 78d7 000b 78ad 000b 73dd 000b     ox...x...x...s..
   b9680:	789f 000b 7871 000b 7881 000b 78d1 000b     .x..qx...x...x..
   b9690:	7891 000b 7869 000b                         .x..ix..

000b9698 <_ZTVN5spark9WiFiClassE>:
	...
   b96a0:	79cf 000b 79c5 000b 79bb 000b 7971 000b     .y...y...y..qy..
   b96b0:	79af 000b 79a3 000b 72b9 000b 72c1 000b     .y...y...r...r..
   b96c0:	7997 000b 798f 000b 7985 000b 797b 000b     .y...y...y..{y..
   b96d0:	72f1 000b                                   .r..

000b96d4 <_ZSt7nothrow>:
	...

000b96e0 <TWO52>:
   b96e0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b96f0:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b9700:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b9710:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b9720:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b9730:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b9740:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b9750:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b9760 <link_const_data_end>:
   b9760:	000b5695 	.word	0x000b5695
   b9764:	000b6ac1 	.word	0x000b6ac1
   b9768:	000b7069 	.word	0x000b7069
   b976c:	000b7269 	.word	0x000b7269
   b9770:	000b73c9 	.word	0x000b73c9
   b9774:	000b7505 	.word	0x000b7505
   b9778:	000b778d 	.word	0x000b778d
   b977c:	000b77b1 	.word	0x000b77b1
   b9780:	000b79d9 	.word	0x000b79d9
